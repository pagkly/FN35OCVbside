b'blob 15229\x00var counter = {};\nwindow.useBeep = true;\nwindow.OnError = null;\n\nvar statusMsg;\nvar timerId = null;\ncounter.timerRunning = false;\n\nvar ElapsedSeconds = 0;\nvar ElapsedMinutes = 0;\nvar ElapsedHours   = 0;\nvar RemainingSeconds = 0;\nvar RemainingMinutes = 0;\nvar RemainingHours   = 0;\nvar additionalHours = 0;\nvar additionalMinutes = 0;\nvar additionalSeconds = 0;\nvar additionalMS = 0;\nvar Hours = 0;\nvar Minutes = 0;\nvar Seconds = 0;\nvar attemptTimerCompletion = \'\';\nvar totalTimeSec = 0;\nvar lastCurrentTime = 0;\nvar lastActualTime = 0;\n\nvar startTime;\nvar endTime;\n\nvar halfTimeElapsedFlag = false;\nvar fiveMinElapsedFlag = false;\nvar oneMinElapsedFlag = false;\nvar thirtySecElapsedFlag = false;\nvar expirationFlag = false;\nvar expired = false;\nvar cssArrayWarning = [\'timeUpWarning\', \'thirtySecondWarning\',\n                \'halfTimeWarning\', \'oneMinuteWarning\', \'fiveMinuteWarning\'];\nvar timeElapsedCssArray = [ \'progressBarStyleOvertime\', \'progressBarStyleOneMin\', \'progressBarStyleThirtySec\',\n                           \'progressBarStyle\'];\n\nfunction cssChange ( messageArea, cssClassToAdd, cssArray )\n{\n  for ( var i = 0; i < cssArray.length; i++)\n  {\n    if ( cssArray[i].indexOf ( cssClassToAdd )>=0 )\n    {\n      Element.addClassName( messageArea, cssClassToAdd );\n    }\n    else\n    {\n      Element.removeClassName( messageArea, cssArray[i] );\n    }\n  }\n}\nfunction timeElapsedBar( remainingMS )\n{\n  var timePercentage;\n  if ( remainingMS > 0 && remainingMS <= totalTimeSec * 1000 )\n  {\n    timePercentage = Math.floor( ( totalTimeSec * 1000 - remainingMS ) / ( totalTimeSec * 1000 ) * 100 );\n\n    if ( remainingMS <= 30000 )\n    {\n      cssChange ( $(\'progressBar\'), \'progressBarStyleThirtySec\', timeElapsedCssArray );\n    }\n    else if ( remainingMS <= 90000 )\n    {\n      cssChange ( $(\'progressBar\'), \'progressBarStyleOneMin\', timeElapsedCssArray );\n    }\n    else\n    {\n      cssChange ( $(\'progressBar\'), \'progressBarStyle\', timeElapsedCssArray );\n    }\n    return timePercentage;\n  }\n  return 100;\n}\nfunction remainingTimerMessage( remainingMS )\n{\n  var messageKey = null;\n  var messageArea = $(\'timeWarningDiv\');\n  var closeWarning = true;\n  if ( remainingMS <= 0 && !expirationFlag )\n  {\n    messageKey = "elapsed_time_warning.expiration";\n    thirtySecElapsedFlag = true;\n    fiveMinElapsedFlag = true;\n    oneMinElapsedFlag = true;\n    halfTimeElapsedFlag = true;\n    expirationFlag = true;\n    closeWarning = false; // Never close the time-expired warning\n\n    cssChange ( messageArea, \'timeUpWarning\', cssArrayWarning );\n\n  }\n  else if ( remainingMS <= 30000 && !thirtySecElapsedFlag )\n  {\n    messageKey = "elapsed_time_warning.halfminute";\n    thirtySecElapsedFlag = true;\n    fiveMinElapsedFlag = true;\n    oneMinElapsedFlag = true;\n    halfTimeElapsedFlag = true;\n    cssChange ( messageArea, \'thirtySecondWarning\', cssArrayWarning );\n  }\n  else if ( remainingMS <= 60000 && !oneMinElapsedFlag )\n  {\n    messageKey = "elapsed_time_warning.oneminute";\n    oneMinElapsedFlag = true;\n    fiveMinElapsedFlag = true;\n    halfTimeElapsedFlag = true;\n    cssChange ( messageArea, \'oneMinuteWarning\', cssArrayWarning );\n  }\n  else if ( totalTimeSec > 300 && remainingMS <= 300000 && !fiveMinElapsedFlag )\n  {\n    messageKey = "elapsed_time_warning.fiveminutes";\n    fiveMinElapsedFlag = true;\n    halfTimeElapsedFlag = true;\n    cssChange ( messageArea, \'fiveMinuteWarning\', cssArrayWarning );\n  }\n  else if ( remainingMS * 2 <= ( endTime - startTime ) && !halfTimeElapsedFlag )\n  {\n    messageKey = "elapsed_time_warning.half";\n    halfTimeElapsedFlag = true;\n    cssChange ( messageArea, \'halfTimeWarning\', cssArrayWarning );\n  }\n  else\n  {\n    messageKey = null;\n  }\n  if ( messageKey !== null )\n  {\n    var textNode = document.createTextNode(page.bundle.getString( messageKey ));\n    while (messageArea.firstChild)\n    {\n      messageArea.removeChild(messageArea.firstChild);\n    }\n    messageArea.appendChild(textNode);\n    messageArea.style.display = "block";\n    // Make sure we don\'t close a recently changed warning (i.e. at 30 seconds)\n    if (messageArea.warningCounter)\n    {\n      messageArea.warningCounter = messageArea.warningCounter + 1;\n    }\n    else\n    {\n      messageArea.warningCounter = 1;\n    }\n    if (closeWarning)\n    {\n      setTimeout("closeWarningDiv("+ messageArea.warningCounter + ")",30000);\n    }\n  }\n}\nfunction closeWarningDiv(warnCount)\n{\n  var messageArea = $("timeWarningDiv");\n  if (messageArea.warningCounter == warnCount)\n  {\n    while (messageArea.firstChild)\n    {\n      messageArea.removeChild(messageArea.firstChild);\n    }\n    messageArea.style.display = "none";\n  }\n}\n\ncounter.getElapsedTimeInfo = function( canUpdateTimer )\n{\n  var currentTime = new Date().getTime();\n  var newActualTime = currentTime;\n  // If we have gone back in time then assume the student is playing with their local clock.  Switch to manually guessing at time-passed.\n  // This will not be totally accurate as it may take > 500ms between calls depending on system load, etc. BUT this is better than nothing\n  // and will get synced to be in-line with server-duration on the next question save.\n  if (currentTime < lastCurrentTime)\n  {\n    // In case they do something like attempt to submit and leave the alert box open (so js stops running),\n    // compare the delta between the current time and last actual time to figure out elapsed time - with\n    // a minimum of 500 ms because that is the interval between calls to this method\n    var dif = newActualTime-lastActualTime;\n    if (dif < 500)\n    {\n      dif = 500;\n    }\n    currentTime = lastCurrentTime + dif;\n  }\n  lastActualTime = newActualTime;\n  lastCurrentTime = currentTime;\n  var elapsedMS = currentTime - startTime;\n  var remainingMS = endTime - currentTime;\n  if ( canUpdateTimer )\n  {  \n    remainingTimerMessage( remainingMS );\n  }\n  ElapsedHours   = Math.floor( elapsedMS / 3600000 );\n  ElapsedMinutes = Math.floor( ( elapsedMS - (ElapsedHours*3600000) ) / 60000 );\n  ElapsedSeconds = Math.floor( ( elapsedMS - (ElapsedHours*3600000) - (ElapsedMinutes*60000) ) / 1000 );\n  if ( remainingMS>=0 )\n  {\n    RemainingHours   = Math.floor( remainingMS / 3600000 );\n    RemainingMinutes = Math.floor( ( remainingMS - ( RemainingHours*3600000) ) / 60000 );\n    RemainingSeconds = Math.floor( ( remainingMS - ( RemainingHours*3600000) - ( RemainingMinutes*60000) ) / 1000 );\n  }\n  if ( expired )\n  {\n    additionalMS = elapsedMS - totalTimeSec * 1000;\n    additionalHours = Math.floor( additionalMS / 3600000 );\n    additionalMinutes = Math.floor( ( additionalMS - (additionalHours*3600000) )  / 60000 );\n    additionalSeconds = Math.floor( ( additionalMS - (additionalHours*3600000) - (additionalMinutes*60000) ) / 1000 );\n  }\n\n  Hours = expired? additionalHours : RemainingHours;\n  Minutes = expired? additionalMinutes : RemainingMinutes;\n  Seconds = expired? additionalSeconds : RemainingSeconds;\n\n  var hourTitle="";\n  var minuteTitle="";\n  var secondTitle="";\n  if ( Hours == 1)\n  {\n    hourTitle=page.bundle.getString("elapsed_time_title.hour", Hours);\n  }\n  else if (Hours>1)\n  {\n    hourTitle=page.bundle.getString("elapsed_time_title.hours", Hours);\n  }\n\n  if (Minutes == 1)\n  {\n    minuteTitle=page.bundle.getString("elapsed_time_title.minute", "<span class=\'timeValue\'>" + (totalTimeSec>600?\'0\':\'\') + Minutes + "</span>" );\n  }\n  else if (Minutes>1)\n  {\n    minuteTitle=page.bundle.getString("elapsed_time_title.minutes", "<span class=\'timeValue\'>" + (Minutes<10?(totalTimeSec>600?\'0\':\'\'):\'\') + Minutes + "</span>" );\n  }\n\n  if (Seconds == 1)\n  {\n    secondTitle=page.bundle.getString("elapsed_time_title.second", "<span class=\'timeValue\'>" + \'0\' +Seconds  + "</span>" );\n  }\n  else\n  {\n    secondTitle=page.bundle.getString("elapsed_time_title.seconds", "<span class=\'timeValue\'>" + (Seconds<10?\'0\':\'\') +Seconds  + "</span>");\n  }\n  var hms = " " + hourTitle + " " + minuteTitle + " " + secondTitle;\n\n  var returnObject = {};\n  returnObject.hms = hms;\n  returnObject.expired = expired;\n  returnObject.remainingMS = remainingMS;\n  \n  return returnObject;\n}\n\nfunction resetClockWithTimeRemaining( remainingTimeInMS )\n{\n  expirationFlag = false;\n  expired = false;\n  \n  var messageArea = $(\'timeWarningDiv\');\n  setTimeout("closeWarningDiv(" + messageArea.warningCounter + ")",1000);\n  \n  timeElapsedBar( remainingTimeInMS );\n  remainingTimerMessage( remainingTimeInMS );\n  startClock( 0, remainingTimeInMS / 1000, attemptTimerCompletion )\n}\n\ncounter.showTime = function()\n{\n  var elapsedTimeInfo = counter.getElapsedTimeInfo( true );\n \n  if ( !elapsedTimeInfo.expired )\n  {\n\tvar remainingPer = timeElapsedBar( elapsedTimeInfo.remainingMS );\n\t    $("cl" ).innerHTML = "<span class=\'timeLabel\'><h3 style=\'display:inline\'>" + page.bundle.getString( "remaining_time_title" ) + "</h3></span>" + elapsedTimeInfo.hms;\n\t    $( \'progressBar\' ).style.width = remainingPer+\'%\';\n\n    if ( elapsedTimeInfo.remainingMS <= 0 )\n    {\n    \t  //Check with the server to determine precisely if the time for the assessment has elapsed.\n    \t  assessment.queryRemainingTimeInMS().then( function ( remainingTimeInMS ) {\n    \t\t  if (remainingTimeInMS <= 0)\n    \t\t  {\t   \n    \t\t\t counter.endAttemptTime( totalTimeSec, attemptTimerCompletion );\n    \t\t  }\n    \t\t  else\n    \t\t  {\n    \t\t\t //The server says this assessment has some time left, so something must have bumped the clock time forward.\n    \t\t\t //Reset the timer so that we don\'t submit the assessment too early.\n    \t\t\t resetClockWithTimeRemaining( remainingTimeInMS );\n    \t\t  }\n    \t  }\n    \t  );\n    }\n  }\n  else\n  { \n    $("cl").innerHTML = page.bundle.getString( "additional_time_title", \'<h3 style=\\\'display:inline\\\'>\', \'</h3>\', \'<span class=\\\'continuousTimerWarning\\\'>\', elapsedTimeInfo.hms, \'</span>\' );\n    \n    $( \'progressBar\' ).style.width = \'100%\';\n    cssChange ( $(\'progressBar\'), \'progressBarStyleOvertime\', timeElapsedCssArray );\n  }\n};\n\n// shows the remaining time on the \'Test Continue\' screen\ncounter.showRemainingTime = function( elapsedSec, timeLimitSec, timerCompletion )\n{\n  // initialize global js variables that are normally initialized by startClock().\n  lastCurrentTime = new Date().getTime();\n  startTime = lastCurrentTime - ( elapsedSec * 1000 );\n  endTime = startTime + timeLimitSec * 1000;\n  attemptTimerCompletion = timerCompletion;\n  totalTimeSec = timeLimitSec;\n\n  var elapsedTimeInfo = counter.getElapsedTimeInfo( false );\n  var msg = elapsedTimeInfo.expired ? page.bundle.getString.getString( "additional_time_title", \'\', \'\', \'\', elapsedTimeInfo.hms, \'\'  )\n      : page.bundle.getString( "your_remaining_time", elapsedTimeInfo.hms  );\n  var insertionDiv = $( \'timerInstructionId\' );\n  insertionDiv.innerHTML = insertionDiv.innerHTML + \' \' + msg;\n}\n\n\nfunction stopClock()\n{\n  if (counter.timerRunning)\n  {\n    timerId.stop();\n  }\n  counter.timerRunning = false;\n}\n\nfunction startClock( elapsedSec, timeLimitSec, timerCompletion )\n{\n  stopClock();\n  var messageArea = $("timeWarningDiv");\n  messageArea.setAttribute("aria-live", "assertive");\n  messageArea.setAttribute("aria-relevant", "additions");\n  lastCurrentTime = new Date().getTime();\n  startTime = lastCurrentTime - (elapsedSec * 1000);\n  endTime = startTime + timeLimitSec * 1000;\n  attemptTimerCompletion = timerCompletion;\n  totalTimeSec = timeLimitSec;\n  timerId = new PeriodicalExecuter(counter.showTime, 0.5);\n  counter.timerRunning = true;\n  UserDataDWRFacade.getStringTempScope("elapsed_time.hide.timer.pref", counter.toggleTimerDisplay);\n}\n\nfunction fixClock( elapsedSec )\n{\n  lastCurrentTime = new Date().getTime();\n  startTime = lastCurrentTime - (elapsedSec * 1000);\n  endTime = startTime + totalTimeSec * 1000;\n  // restart the clock on each save.\n  stopClock();\n  timerId = new PeriodicalExecuter(counter.showTime, 0.5);\n  counter.timerRunning = true;\n}\n\ncounter.endAttemptTime = function( timeLimitSec, timerCompletion )\n{\n  // if the timer is of Continual\n  if ( timerCompletion.indexOf( \'C\' ) >= 0 )\n  {\n    expired = true;\n    if ( confirm( page.bundle.getString( "elapsed_time_warning.end" ) ) )\n    {\n      assessment.userReallyWantsToSubmit = true;\n      //the purpose is to call confirmSubmit so no message here;\n      if ( confirmSubmit( \'\' ))\n      {\n        stopClock();\n        assessment.resetFields();\n        document.forms.saveAttemptForm.method.value = \'notajax\'; // Make sure we don\'t go through the ajax-save logic on the server - aside from that we don\'t care about the method value\n        document.forms.saveAttemptForm.save_and_submit.value = \'true\';\n        document.forms.saveAttemptForm.timer_completion.value = \'C\';\n        try\n        {\n          assessment.submitAttemptForm();\n        }\n        catch (err)\n        {\n          // If we had an error, continue to clear the saveandsubmit value\n        }\n        document.forms.saveAttemptForm.save_and_submit.value=\'\';\n      }\n      //clear the flag after the validation\n      assessment.userReallyWantsToSubmit = false;\n    }\n  }\n  // if the timer is of Hardstop\n  else if ( timerCompletion.indexOf( \'H\' ) >= 0 )\n  {\n    stopClock();\n    assessment.resetFields();\n    skipValidation = true;\n    validateForm();\n    skipValidation = false;\n\n    document.forms.saveAttemptForm.method.value = \'notajax\'; // Make sure we don\'t go through the ajax-save logic on the server - aside from that we don\'t care about the method value\n    document.forms.saveAttemptForm.save_and_submit.value = \'true\';\n    document.forms.saveAttemptForm.timer_completion.value = \'H\';\n\n    //Per LRN-57577, if user press and hold the Esc key cross the point of auto-submitting,\n    //the submitting will be held and the user is able to submit it after the the timer expired.\n    //So the key pressing/holding need be disabled during the submission when the timer is expired.\n    document.onkeydown = counter.onKeyPressHandler;\n    try\n    {\n      assessment.submitAttemptForm();\n    }\n    catch (err2)\n    {\n      // If we had an error, continue to clear the saveandsubmit value\n    }\n    document.forms.saveAttemptForm.save_and_submit.value=\'\';\n  }\n};\n\ncounter.onKeyPressHandler = function (event)\n{\n  if (!event)\n    event = window.event;\n  if (event.preventDefault)\n    event.preventDefault();\n};\n\ncounter.toggleTimerDisplay = function(newState)\n{\n  var tb = $(\'timerBar\');\n  var tbt = $(\'timerText\');\n  var tt = $(\'timerToggle\');\n\n  var saveState = false;\n  if (newState == \'toggle\')\n  {\n    saveState = true;\n  }\n  if ((saveState && tb.style.display == \'\') || newState == \'hide\')\n  {\n    tb.hide();\n    tbt.hide();\n    tt.innerHTML = page.bundle.getString( "elapsed_time.show.timer" );\n    tt.title = page.bundle.getString( "elapsed_time.show.timer" );\n    tt.addClassName(\'label\').addClassName(\'timer-collapsed\').removeClassName(\'timer-expanded\');\n    newState = \'hide\';\n  }\n  else\n  {\n    tb.show();\n    tbt.show();\n    tt.innerHTML = "";\n    tt.title= page.bundle.getString( "elapsed_time.hide.timer" );\n    tt.addClassName(\'timer-expanded\').removeClassName(\'label\').removeClassName(\'timer-collapsed\');\n    newState = \'show\';\n  }\n  if (saveState)\n  {\n    UserDataDWRFacade.setStringTempScope( "elapsed_time.hide.timer.pref", newState);\n  }\n};\n\nfunction showConfirm(message)\n{\n  return ( confirm( message ) ? true : false );\n}\n'