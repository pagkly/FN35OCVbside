b'blob 100493\x00/*\n * ChemCAL v2.0 2011\n */\n\n/* ======= config ====================================================== */\n\n// create the \'workbench\' singleton from which all the other objects descend\n//ohai\n\n$.fn.getBgWidth = function () {\n  var width = 0;\n  var path = $(this).css(\'background-image\').replace(\'url\', \'\').replace(\'(\', \'\').replace(\')\', \'\').replace(\'"\', \'\').replace(\'"\', \'\');\n  var tempImg = \'<img id="tempImg" src="\' + path + \'"/>\';\n  $(\'body\').append(tempImg); // add to DOM before </body>\n  $(\'#tempImg\').hide(); //hide image\n  width = $(\'#tempImg\').width(); //get width\n  $(\'#tempImg\').remove(); //remove from DOM\n  return width;\n};\n\nvar workbench = new WorkbenchObject({\n\n  // default values\n  def: {\n    inputWidth:         10,\n    scorePerAnswer:     1,\n    frameDuration:      1,\n    transitionDuration: 1\n  },\n\n  // titles & names\n  tit: {\n    modulePreface:      \'Module Preface\',\n    moduleResults:      \'Module Results Summary\'\n  },\n\n  // current values\n  cur: {\n    module:             false,\n    score:              0,\n    availScore:         10\n  },\n\n  // html element selectors\n  sel: {\n    module:             \'#content .module\',\n    moduleInfo:         \'.topic:first\',\n    moduleList:         \'#content .moduleList\',\n    exerciseList:       \'#content .exerciseList\',\n    exercise:           \'.topic:not(.reference), .nested0:not(.reference)\',\n    exercises:          \'.exercises\',\n    exerciseSteps:      \'.exesteps\',\n    exerciseStep:       \'.exestep\',\n    exerciseChoices:    \'.exechoices\',\n    exerciseChoice:     \'.exechoice\',\n    question:           \'.question\',\n    questionPrompt:     \'.prompt\',\n    answer:             \'.answer\',\n    answerResult:       \'.exechoiceresult\'\n  },\n\n});\n\n// keep track of all deferreds\nworkbench.deferreds = [];\n\n/* ======= main ======================================================== */\n\n$(document).ready(function(){\n  workbench.init();               // load the module data and subsequent exercise data\n  workbench.cur.module.start(document.location.href.split(\'#\')[1]);\n\n  $(\'#content\').fadeIn();\n});\n\n\n// load event occurs after graphics are loaded\n$(window).load(function() {\n    $(\'.firstExerciseBtn\').focus();\n});\n\n/* ======= funcs ======================================================= */\n\n/*\n * WorkbenchObject\n * \n */\n\nfunction WorkbenchObject(params){\n  this.def                    = params.def\n  this.tit                    = params.tit;\n  this.cur                    = params.cur\n  this.sel                    = params.sel;\n\n  this.modules                = new Object();\n  this.modulesOrder           = new Array();\n  this.moduleGroups           = new Array();\n  this.exercises              = new Object();\n  this.nav                    = new NavObject();\n  this.isPreview              = null;             // unknown at this stage\n\n  var thisWB                  = this;\n\n  // load the module data and subsequent exercise data\n  this.init = function(){\n    $(\'#exercises\').find(this.sel.exercise).addClass(\'exercise\');   // give all exercises the class \'exercise\'\n\n    this.isPreview = ($(\'body.preview\').length > 0);\n\n    /* ##### START: add skeleton elements ######## */\n\n    // remove controls if they exist\n    $(\'#controls\').remove();\n\n    if(!this.isPreview){\n      // build Menu\n      this.nav.buildMenu();\n    }\n\n    // build Nav\n    this.nav.buildNav();\n\n    // if no exercises element then add it\n    if(!$(\'#exercises\').length){\n      $(\'#content\').append(\'<div id="exercises"></div>\');\n    }\n\n    // add controls elements\n    $(\'#content\').append(\'\\\n      <div id="controls">\\\n        <button id="checkBtn">Check Answers</button>\\\n        <button id="showMeBtn">Show Me</button>\\\n        <button id="nextStepBtn">Proceed...</button>\\\n      </div>\\\n      <div id="exerciseFooter">\\\n        <button id="nextExerciseBtn">Go to next exercise &gt;</button>\\\n        <button id="resultsSummaryBtn">Go to results summary &gt;</button>\\\n      </div>\\\n    \');\n    $(\'#modules\').before(\'<div id="references"></div>\');\n\n    if($(\'#breadcrumbs\').length){\n      $(\'#header h1\').click(function(){\n        location = $(\'#breadcrumbs li:first a\').attr(\'href\');\n      });\n    }\n\n    /* ##### END: add skeleton elements ###### */\n\n    // load the data.modules object with relevant data and pointers to elements\n    // if moduleList exists, load module data from it \n    if($(thisWB.sel.moduleList+\' li>a\').length){\n\n      var modIndex = 0;\n      $(thisWB.sel.moduleList+\' li\').each(function(){\n\n        if(!$(this).find(\'>a\').length){ // is Module Group\n          var modGroupTitle = $(\'<li>\'+$(this).html()+\'</li>\');\n          modGroupTitle.find(\'ul\').remove();\n          thisWB.moduleGroups.push({\n            firstModuleIndex: modIndex,\n            title: modGroupTitle.html()\n          });\n\n        }else{ // is Module\n\n          var modId = $(this).attr(\'id\');\n          if(!modId){\n            modId = $(this).find(\'>a:first\').attr(\'href\');\n            modId = modId.replace(/\\//g,\'___\');\n          }\n          $(this).data(\'modId\',modId);\n          // $(this).attr(\'id\',\'link_\'+modId);\n\n          var isLoaded = ($(\'#\'+modId).length) ? true : false;\n\n          if(!isLoaded && $(this).hasClass(\'selected\')){\n            $(\'#modules .nested0:first\').attr(\'id\',modId);\n            // $(\'#modules\').empty();\n            // $(\'#modules\').append(\'<div class="topic module" id="\'+modId+\'">There is no module introduction.</div>\');\n            isLoaded = true;\n          }\n\n          thisWB.modules[modId] = new ModuleObject({\n            id:             modId,\n            title:          $(this).find(\'a\').html(),\n            url:            $(this).find(\'a\').attr(\'href\'),\n            isLoaded:       isLoaded,\n            el:             ((isLoaded) ? $(\'#\'+modId) : false),\n            listEl:         $(this),\n            exerciseListEl: ($(this).hasClass(\'selected\')?$(thisWB.sel.exerciseList):false),\n            index:          modIndex++\n          });\n\n          thisWB.modulesOrder.push(thisWB.modules[modId]);\n\n          // set workbench.cur.module to current module if it is \'selected\'\n          if($(this).hasClass(\'selected\')){\n            thisWB.cur.module = thisWB.modules[modId];\n          }\n        }\n\n      });\n\n      if(this.cur.module.index >= this.modulesOrder.length-1){\n        $(\'#moduleNav\').addClass(\'disableNext\').removeClass(\'disablePrev\');\n        $(\'#nextModule\').attr(\'disabled\', \'disabled\');\n      }\n      if(this.cur.module.index < 1){\n        $(\'#moduleNav\').addClass(\'disablePrev\').removeClass(\'disableNext\');\n        $(\'#prevModule\').attr(\'disabled\', \'disabled\');\n      }\n\n    }\n\n    // else moduleList missing, something wrong\n    else{\n      error(\'Module list missing!\');\n    }\n\n    this.nav.init();\n    this.headerResize();\n    $(window).resize(function(){\n      workbench.headerResize();\n    });\n    console.log(this);\n  }\n\n  this.hideControls = function(){\n    $(\'#controls button\').hide();\n  }\n\n  this.previousModule = function(){\n    if(this.cur.module.index > 0){\n      this.showModule(this.modulesOrder[this.cur.module.index-1].id);\n    }\n  }\n\n  this.nextModule = function(){\n    if(this.cur.module.index < this.modulesOrder.length-1){\n      this.showModule(this.modulesOrder[this.cur.module.index+1].id);\n    }\n  }\n\n  this.showModule = function(modId){\n    $(\'#moduleNav\')\n      .addClass(\'disablePrev disableNext loading\');\n\n    $(\'#content,#exerciseNav\').hide();\n    location = this.modules[modId].url;\n  }\n\n  this.headerResize = function(){\n    var h = (this.isPreview) ? 0 : $(\'#header\').height() + 5;\n    $(\'#content\').css(\'margin-top\',h);\n  }\n}\n\nfunction ModuleObject(params){\n  this.id                 = params.id;\n  this.title              = params.title;\n  this.url                = params.url;\n  this.isLoaded           = params.isLoaded;\n  this.el                 = params.el;\n  this.listEl             = params.listEl;\n  this.exerciseListEl     = params.exerciseListEl;\n  this.index              = params.index;\n\n  this.editUrl            = false;\n  this.resultsLink        = $(\'#content .moduleResults\');\n\n  this.curTotalScore      = 0;\n  this.curTotalAvailScore = 0;\n\n  this.exercises          = new Object();\n  this.exercisesOrder     = new Array();\n  this.curExercise        = false;\n\n  this.prefaceEl          = false;\n  this.resultsEl          = false;\n\n  var thisMod = this;\n\n  if(this.isLoaded){\n\n    this.prefaceEl          = this.el.find(\'.modbody\');\n\n    $(\'#modules\').find(\'.module-edit\')\n      .prependTo(this.el)         // place in the module whre it should be\n      .each(function(){\n        thisMod.editUrl = $(this).find(\'a\').attr(\'href\');\n        if(thisMod.editUrl){\n          thisMod.el.find(\'h1:first\').before(\'<a href="\'+thisMod.editUrl+\'" target="_blank" class="edit-link">Edit module</a>\');\n        }\n      });\n\n\n    if(this.exerciseListEl){\n      var exeIndex = 0;\n\n      // load the data.exercises object with relevant data and pointers to elements\n\n      // if exerciseList exists, then load exercise data from it\n      if(this.exerciseListEl.find(\'li\').length){\n        this.exerciseListEl.find(\'li\').each(function(){\n\n          var exeId = $(this).attr(\'id\');\n          if(!exeId){\n            if($(this).find(\'a\').attr(\'href\').match(/\\/module-instance\\//)){\n              exeId = $(this).find(\'a\').attr(\'href\').replace(/^.*?(\\d+)\\/module-instance\\/(\\d+).*?$/,"exercise-$1-$2");\n            }else{\n              exeId = $(this).find(\'a\').attr(\'href\').replace(/^.*?(\\d+).*?$/,"exercise-$1");\n            }\n          }\n          $(this).data(\'exeId\',exeId);\n          $(this).attr(\'id\',\'link_\'+exeId);\n\n          var isLoaded = ($(\'#\'+exeId).length) ? true : false;\n\n          thisMod.exercises[exeId] = new ExerciseObject({\n            id : exeId,\n            title : $(this).find(\'a\').html(),\n            url : $(this).find(\'a\').attr(\'href\'),\n            isLoaded : isLoaded,\n            el : ((isLoaded) ? $(\'#\'+exeId) : false),\n            listEl : $(this),\n            index : exeIndex++\n          });\n\n          thisMod.exercisesOrder.push(thisMod.exercises[exeId]);\n        });\n      }\n\n      // else no exercise list, so load exercises from the actual loaded exercise blocks\n      // preview mode uses this method\n      else{\n        if($(\'#exercises\').find(\'.exercise\').length){\n          $(\'#exercises\').find(\'.exercise\').each(function(){\n            var exeId = $(this).attr(\'id\');\n\n            thisMod.exercises[exeId] = new ExerciseObject({\n              id : exeId,\n              title : $(this).find(\'h1:first\').html(),\n              url : exeId,\n              isLoaded : true,\n              el : $(\'#\'+exeId),\n              listEl : false,\n              index : exeIndex++\n            });\n\n            // if the exercise has a container then smash it\n            if($(this).closest(\'.exercise-container\').length){\n              thisMod.exercises[exeId].smashContainer();\n            }\n\n            thisMod.exercisesOrder.push(thisMod.exercises[exeId]);\n          });\n        }else{\n          // there is no exercise list\n          report(\'No exercise list\');\n        }\n      }\n    }\n  }\n\n\n  this.start = function(){\n    var url = document.location.href.split(\'#\');\n\n    // TODO: Security on this. Strip dangerous text.\n    // if hash exists and is the id for an exercise then show exercise\n    if(url[1]){\n      if(url[1] == \'preface\'){\n        this.showSection(\'mod-preface\');\n      } else if(url[1] == \'results-summary\'){\n        this.showSection(\'mod-results\');\n      } else if(this.exercises[url[1]]){\n        this.showSection(url[1]);\n      }\n    }\n\n    // else if an exercise is selected exerciseList so it\n    else if(this.exerciseListEl.find(\'li.selected\').length){\n      var exeId = this.exerciseListEl.find(\'li.selected\').data(\'exeId\')\n      this.showSection(exeId);\n    }\n\n    // else show module preface\n    else{\n      this.showPreface();\n    }\n  }\n\n  this.previousExercise = function(){\n    if(!this.curExercise || this.curExercise.index < 1){\n      this.showSection(\'mod-preface\')\n      $(\'.firstExerciseBtn\').focus();\n      // Go to last exercise\n      //this.showSection(this.exercisesOrder[this.exercisesOrder.length-1].id);\n    }else{\n      this.showSection(this.exercisesOrder[this.curExercise.index-1].id);\n    }\n\n  }\n\n  this.nextExercise = function(){\n    if(!this.curExercise){\n      this.showSection(this.exercisesOrder[0].id);\n    }\n    else if(this.curExercise.index < this.exercisesOrder.length-1){\n      this.showSection(this.exercisesOrder[this.curExercise.index+1].id);\n    }else{\n      // Go to module summary\n      this.showSection(\'mod-results\');    \n    }\n  }\n\n  this.updateExerciseList = function(exe){\n    $(\'#selectExercise\').val(exe.attr(\'id\'));\n  }\n\n  this.showPreface = function(){\n    this.curExercise = false;\n\n    // set url hash as preface\n    document.location.hash = \'#preface\';\n\n    if(!workbench.isPreview){\n      if(this.exercisesOrder.length){\n        this.el.closest(\'#modules\').find(\'.firstExerciseBtn\').show();\n      }else{\n        this.el.closest(\'#modules\').find(\'.nextModuleBtn\').show();\n      }\n    }\n\n    this.el.show();\n    this.prefaceEl.fadeIn(function(){\n      $(\'#exerciseNav\').addClass(\'disablePrev\').removeClass(\'disableNext loading\');\n      $(\'#prevExercise\').attr(\'disabled\', \'disabled\');\n      $(\'#nextExercise\').removeAttr(\'disabled\');\n    });\n  }\n\n  this.showResults = function(){\n    this.curExercise = false;\n\n    // set url hash as mod-results\n    document.location.hash = \'#results-summary\';\n\n    // if there is no results container then create it\n    if(!this.resultsEl){;\n      this.resultsEl = $(\'<div class="modResults"></div>\');\n      this.prefaceEl.after(this.resultsEl);\n    }\n\n    var thisModule = this;\n\n    $.ajax({\n      url: this.resultsLink.attr(\'href\'),\n      dataType: \'html\',\n      context: document.body,\n      success: function(html){\n        thisModule.resultsEl\n          .html(html)\n          .each(function(){\n            resEl = $(this);\n\n            var actualTot   = roundDec(parseFloat(resEl.find(\'.actual-total\').text()),2);\n            var posTot      = roundDec(parseFloat(resEl.find(\'.possible-total\').text()),2);\n\n            // add an element for the totals\n            $(\'<div class="resultsTotal">\'+actualTot+\' / \'+posTot+\'</div>\')\n              .appendTo(resEl);\n\n            if(posTot > 0){\n              // calculate percentage for total\n              var prcnt = roundDec(actualTot / posTot * 100, 2);\n\n              // add an element for the percentage\n              $(\'<div class="totalPercentage">\'+prcnt+\'%</div>\')\n                .appendTo(resEl);\n            }\n\n            // bind click event to each exercise list item\n            // so they link to the exercise\'s page\n            $(this).find(\'.module-results li a\').each(function(){\n\n              // the href is a hash with the exercise code (eg. #exercise-234-1832)\n              var href = $(this).attr(\'href\');\n              href = href.replace(/#/,\'\');        // strip hash\n\n              $(this).click(function(event){\n                event.preventDefault();\n                if(thisMod.exercises[href]){\n                  thisMod.showSection(href);\n                }else{\n                  error("Error: Exercise doesn\'t exist! Please report this error, see the \'Contact\' page.");\n                }\n              });\n            });\n          });\n\n        thisModule.el.show();\n        thisModule.resultsEl.fadeIn(function(){\n          $(\'#exerciseNav\').addClass(\'disableNext\').removeClass(\'disablePrev loading\');\n          $(\'#nextExercise\').attr(\'disabled\', \'disabled\');\n          $(\'#prevExercise\').removeAttr(\'disabled\');\n        });\n      }\n    });\n\n\n  }\n\n  this.showSection = function(sectId){\n\n    // hide all sections, controls, exerciseList, un-select the list element\n    // and disable all exercise navigation\n    this.hideAllSections();\n    workbench.hideControls();\n    workbench.nav.exerciseListHide();\n    $(\'#exerciseNav\')\n      .addClass(\'loading disablePrev disableNext\');\n    workbench.nav.exerciseListEl\n      .find(\'.selected\').removeClass(\'selected\');\n    workbench.nav.exerciseListEl\n      .data(\'sectId\',sectId);\n\n    $(\'#prevExercise,#nextExercise\').attr(\'disabled\', \'disabled\');\n\n\n    // if section is module preface, show it \n    if(sectId == \'mod-preface\'){\n\n      var listEl = workbench.nav.exerciseListEl.find(\'.mod-preface-link\');\n      listEl.addClass(\'selected\');\n      $(\'#selectExercise\').html(listEl.find(\'a\').html());\n\n      this.showPreface();\n    }\n\n    // if section is module results, show it \n    else if(sectId == \'mod-results\'){\n\n      var listEl = workbench.nav.exerciseListEl.find(\'.mod-results-link\');\n      listEl.addClass(\'selected\');\n      $(\'#selectExercise\').html(listEl.find(\'a\').html());\n\n      this.showResults();\n    }\n\n    // else if it is an exercise, show it\n    else if(this.exercises[sectId]){\n\n      var exe = this.exercises[sectId];\n      exe.listEl.addClass(\'selected\');\n      $(\'#selectExercise\').html(exe.listEl.find(\'a\').html());\n\n      this.curExercise = exe;\n      this.curExercise.activate();\n    }\n\n    // else something wrong\n    else{\n      error("Section doesn\'t exist: "+sectId);\n    }\n  }\n\n  this.sectionReady = function(){\n\n    var sectId = workbench.nav.exerciseListEl.data(\'sectId\');\n\n    // if section is module preface\n    if(sectId == \'mod-preface\'){\n      $(\'#exerciseNav\').addClass(\'disablePrev\').removeClass(\'disableNext\');\n      $(\'#prevExercise\').attr(\'disabled\', \'disabled\');\n      $(\'#nextExercise\').removeAttr(\'disabled\');\n    }\n\n    // if section is module results, show it \n    else if(sectId == \'mod-results\'){\n      $(\'#exerciseNav\').addClass(\'disableNext\').removeClass(\'disablePrev\');\n      $(\'#nextExercise\').attr(\'disabled\', \'disabled\');\n      $(\'#prevExercise\').removeAttr(\'disabled\');\n    }\n\n    // else if it is an exercise, show it\n    else if(this.exercises[sectId]){\n      $(\'#exerciseNav\').removeClass(\'disableNext\').removeClass(\'disablePrev\');\n      $(\'#prevExercise,#nextExercise\').removeAttr(\'disabled\');\n    }\n  }\n\n  this.hideAllSections = function(){\n    workbench.cur.module.el.hide();\n    workbench.cur.module.prefaceEl.hide();\n    if(workbench.cur.module.resultsEl) workbench.cur.module.resultsEl.hide();\n    $(\'#exercises\').find(workbench.sel.exercise).hide();\n    this.hideNextExerciseBtn();\n    $(\'#previousScore\').remove();\n  }\n\n  this.showNextExerciseBtn = function(simpleShow){\n    // If it\'s not preview and not the last exercise then show Next Exercise Btn\n    if(!workbench.isPreview && (!this.curExercise || this.curExercise.index < this.exercisesOrder.length-1)){\n      if(simpleShow){\n        $(\'#nextExerciseBtn\').show().focus();\n      }else{\n        $(\'#nextExerciseBtn\').fadeIn().focus();\n        scrollToBottom();\n      }\n    }\n    // else if it\'s the last exercise show the Results Summary Btn\n    else if(!workbench.isPreview && this.curExercise && this.curExercise.index == this.exercisesOrder.length-1){\n      if(simpleShow){\n        $(\'#resultsSummaryBtn\').show();\n      }else{\n        $(\'#resultsSummaryBtn\').fadeIn();\n        scrollToBottom();\n      }\n    }\n  }\n  this.hideNextExerciseBtn = function(){\n    $(\'#nextExerciseBtn,#resultsSummaryBtn\').hide();\n  }\n}\n\nfunction ExerciseObject(params){\n  this.id             = params.id;\n  this.title          = params.title;\n  this.url            = params.url;\n  this.isLoaded       = params.isLoaded;\n  this.el             = params.el;\n  this.listEl         = params.listEl;\n  this.index          = params.index;\n\n  this.isCompleted    = false;\n  this.curStep        = false;\n  this.curScore       = 0;\n  this.curAvailScore  = 0;\n  this.previousScore  = \'None\';\n  this.tracking       = false;\n\n  this.resourcePath   = \'\';\n  this.editUrl        = false;\n\n  this.steps          = new Array();\n  this.isInit         = false;            // has exercise been initialized\n\n  this.presentations = new Array();       // Presentations\n\n  var thisExercise = this;\n\n  // ExerciseObject.alignSteps\n  //\n  // align steps within this exercise\n  //\n  this.alignSteps = function(){\n    var prevStepIsClosed = false;\n    var prevStepTop = 0;\n\n    $(\'#content .steps .step\')\n      .css(\'clear\',\'none\')\n      .each(function(){\n        // only need to align the visible steps\n        if($(this).css(\'display\') != \'none\'){\n          var stepOffset      = $(this).offset();\n\n          // clear:left if this step is has wrapped and the previous step is open\n          if(stepOffset.top > prevStepTop+2 && !prevStepIsClosed){\n            $(this).css(\'clear\',\'left\')\n          }\n\n          prevStepTop         = $(this).offset().top;\n          prevStepIsClosed    = $(this).is(\'.closed\');\n        }\n      });\n  }\n\n  // ExerciseObject.initPresentations\n  //\n  // init presentations within this exercise\n  //\n  this.initPresentations = function(){\n    var pIndex = 0; \n\n    this.el.find(\'.presentation\').each(function(){\n      var pres = $(this);\n\n      thisExercise.presentations.push(new presentationObject({\n        el : pres,\n        index : pIndex\n      }));\n\n      pIndex++;\n\n    });\n  }\n\n  // ExerciseObject.init\n  this.init = function(){\n    var stepIndex = 0;\n    var choices = false;\n    var prevStep = false;\n\n    this.el.find(workbench.sel.exerciseSteps).addClass(\'steps\');        // give all step groups the class \'steps\'\n    this.el.find(workbench.sel.exerciseStep).addClass(\'step\');          // give all single steps the class \'step\'\n    this.el.find(workbench.sel.exerciseChoices).addClass(\'choices\');    // give all choice groups the class \'choices\'\n    this.el.find(workbench.sel.exerciseChoice).addClass(\'choice\');      // give all single choices the class \'choice\'\n    this.el.find(workbench.sel.answerResult).addClass(\'result\');        // give all answer results the class \'result\'\n\n    this.el.find(\'.step\').hide();\n\n    this.initPresentations();\n\n    // init overlays\n    this.el.find(\'img.overlay\').each(function(){\n      var sty = $(this).attr(\'alt\');\n      $(this).attr(\'style\',sty);\n    });\n\n    // init reference links\n    this.el.find(\'a.xref\')\n      .addClass(\'ref-link system\')\n      .wrap(\'<div class="ref-wrap closed"/>\')\n      .wrap(\'<div class="ref-tab"/>\')\n      .click(function(event){\n        event.preventDefault();\n\n        // if ref is already loaded\n        if($(this).hasClass(\'loaded\')){\n          if($(this).closest(\'.ref-wrap\').is(\'.open\')){\n            $(this).closest(\'.ref-wrap\').find(\'.ref-content\')\n              .slideUp(function(){\n                $(this).closest(\'.ref-wrap\').addClass(\'closed\').removeClass(\'open\');\n              });\n\n          }else{\n            $(this).closest(\'.ref-wrap\').find(\'.ref-content\').slideDown();\n            $(this).closest(\'.ref-wrap\').addClass(\'open\').removeClass(\'closed\');\n          }\n        }\n\n        // else if not loading then load ref \n        else if(!$(this).hasClass(\'loading\')){\n          $(this).addClass(\'loading\');\n          var refLink = $(this);\n\n          $.ajax({\n            url: refLink.attr(\'href\'),\n            dataType: \'html\',\n            context: document.body,\n            success: function(html){\n              refLink.closest(\'.ref-wrap\').addClass(\'open\').removeClass(\'closed\');\n              var newRef = $(\'<div class="ref-content">\'+html+\'</div>\');\n              newRef.find(\'img\').each(function(){\n                $(this).attr(\'src\',\'/site_media/media/files/references/\'+$(this).attr(\'data-src\'));\n                $(this).show();\n              });\n              if(newRef.find(\'.title:first\').html() == refLink.html())\n                newRef.find(\'.title:first\').remove();\n              refLink.closest(\'.ref-tab\').after(newRef);\n              refLink.removeClass(\'loading\').addClass(\'loaded\');\n            }\n          });\n        }   \n      });\n\n\n    // initialize Director objects\n    this.el.find(\'object[type="application/x-director"]\')\n      .each(function(){\n\n        var src = $(this).find(\'param[name=src]\').attr(\'value\');\n\n        var embed = \'<embed src="\'\n              +$(this).find(\'param[name=src]\').attr(\'value\')\n              +\'" width="\'+$(this).attr(\'width\')\n              +\'" height="\'+$(this).attr(\'height\')\n              +\'" pluginspage="http://www.macromedia.com/shockwave/download/"></embed>\';\n        $(this).append(embed);\n      });\n\n    // create step objects\n    this.el.find(\'.step\').each(function(){\n      var step = $(this);\n\n      thisExercise.steps.push(new StepObject({\n        el : step,\n        parentExercise: thisExercise,\n        prevStep: prevStep,\n        choices : choices,\n        index : stepIndex\n      }));\n\n      prevStep = thisExercise.steps[stepIndex]\n      stepIndex++;\n\n    });\n\n    // add class to define each step as odd or even in the list\n    this.el.find(\'.step:even\').addClass(\'odd\');\n    this.el.find(\'.step:odd\').addClass(\'even\');\n\n    this.curStep    = (this.steps[0]) ? this.steps[0] : false;\n    this.isInit     = true;\n  }\n\n  // ExerciseObject.load\n  // load exercise from external source\n  this.load = function(){\n\n    // get a promise\n    var p = $.ajax({\n      url: thisExercise.url,\n      dataType: \'html\',\n      context: document.body\n    });\n\n    // to do stuff later\n    workbench.deferreds.push(p);\n\n    p.done(function(html){\n      var newEl = $(html);\n      $(\'#exercises\').append(newEl);\n\n      // if container, smash it up \n      if(newEl.is(\'.exercise-container\')){\n          thisExercise.smashContainer(newEl);\n      }else{\n        thisExercise.el = newEl;\n        thisExercise.el.addClass(\'exercise\');\n      }\n\n      thisExercise.isLoaded = true;\n      thisExercise.activate();\n\n      // add some classes to tables to identify first/last row/column\n      $(\'#exercises table\').each(function(){\n        var table = $(this);\n\n        // only add these to the table with data?\n        if (table.hasClass(\'table\')){\n          var rows = table.find(\'tr\');\n          rows.first().addClass(\'first-row\');\n          rows.last().addClass(\'last-row\');\n\n          $(rows[1]).addClass(\'second-row\');\n        \n\n          $(rows).each(function(){\n            var row = $(this);\n            row.find(\'td\').first().addClass(\'first-col\');\n            row.find(\'th\').first().addClass(\'first-col\');\n            row.find(\'td\').last().addClass(\'last-col\');\n            row.find(\'th\').last().addClass(\'last-col\');\n          })\n        }\n\n      });\n    })\n  }\n\n  // ExerciseObject.smashContainer\n  // \n  this.smashContainer = function(con){\n    var thisExercise = this;\n\n    if(con == undefined){\n      con = this.closest(\'.exercise-container\');\n    }\n\n    if(con.find(\'.resource-path\').length){\n      // get resource path text and remove any spaces\n      this.resourcePath = con.find(\'.resource-path\').text().replace(/\\s+/g,\'\');\n    }\n\n    if(con.find(\'.exercise-score\').length){\n      this.previousScore = con.find(\'.exercise-score\').html();\n    }\n\n    if(con.find(\'.exercise-edit\').length){\n      this.editUrl = con.find(\'.exercise-edit a\').attr(\'href\');\n    }\n\n    if(con.find(\'.exercise-tracking\').length){\n      // get exercise tracking url\n      this.tracking = con.find(\'.exercise-tracking\').text().replace(/\\s+/g,\'\');\n    }\n\n    if(con.find(\'.exercise-reward\').length){\n      this.exerciseReward = con.find(\'.exercise-reward\').html();\n    }\n\n\n    this.el = con.find(\'.exercise-content\').find(workbench.sel.exercise);\n    this.el.addClass(\'exercise\');\n    con.after(this.el);\n    con.remove();\n\n    if(this.editUrl){\n      this.el.find(\'h1:first\').before(\'<a href="\'+this.editUrl+\'" target="_blank" class="edit-link">Edit exercise</a>\');\n    }\n\n    this.el.find(\'.performance\').each(function(){\n          $(this).append(\'<div class="performance-stage" id="\'+$(this).attr(\'id\')+\'_stage"></div>\');\n    });\n\n    if(this.resourcePath){\n\n      // load and execute exercise defined scripts\n        this.el.find(\'.script-src\').each(function(){\n            var scriptFile = $(this).text().replace(/\\s+/g,\'\');\n            var scriptPath = (thisExercise.resourcePath) ? thisExercise.resourcePath + scriptFile : scriptFile;\n                console.log(\'Running getScript: \'+scriptFile);\n\n                $.getScript(scriptPath,function(data, textStatus, jqxhr) {\n                   console.log("ScriptData: "+data); //data returned\n                   console.log("ScriptStatus: "+textStatus); //success\n                   console.log("ScriptJqxhr: "+jqxhr.status); //200\n                   console.log(\'getScript was performed.\');\n                });\n        });\n\n      // add resource path to images\n      this.el.find(\'img.image\').each(function(){\n\n        var me = $(this);\n\n        // Need to do stuff after the images within .hint or .explain load\n          var d = $.Deferred();\n\n          // push our promise into our array of promises. we are using promises here as we are\n          // dynamically loading in the images\n          workbench.deferreds.push(d.promise());\n\n          // on the first load event for the <img> resolve the promise\n          me.one(\'load\', d.resolve);\n\n          // the following line sets the `src` attribute on the <img> causing the browser to load it in\n          me.attr(\'src\', thisExercise.resourcePath + $(this).attr(\'data-src\')).show();\n      });\n\n      // add resource path to objects\n      this.el.find(\'object param[name=src]\').each(function(){\n        $(this)\n          .attr(\'value\',thisExercise.resourcePath + $(this).attr(\'value\'))\n          .show();\n      });\n    }\n\n  }\n\n  this.showPreviousScore = function(){\n    var actualScore = $(this.previousScore).find(".actual-score").html();\n    if (actualScore) actualScore = actualScore.trim();\n    var possibleScore = $(this.previousScore).find(".possible-score").html();\n    if (possibleScore) possibleScore = possibleScore.trim();\n    var _dateCompleted = $(this.previousScore).find(".date-completed").html();\n    if (_dateCompleted) _dateCompleted = _dateCompleted.trim();\n    var dateCompleted = new Date.parse(_dateCompleted);\n    $("#previousScore").remove();\n    if (typeof dateCompleted == "object" && actualScore && possibleScore \n      && !isNaN(actualScore) && !isNaN(possibleScore)) {\n\n      var formattedDate = $.datepicker.formatDate(\'M d, yy\', dateCompleted);\n      $("#exerciseFooter").prepend(\n        "<div id=\'previousScore\'>" +\n          "<span id=\'left\'>" +\n            "<span id=\'message\'>Your previous attempt:</span>" +\n            "<span id=\'date\'>" + formattedDate + "</span>" +\n          "</span>" +\n          "<span id=\'score\'>" + actualScore + " / " + possibleScore +"</div>" +\n        "</div>"\n      );\n    }\n  }\n\n  this.showPreviousScore = function(){\n    var actualScore = $(this.previousScore).find(".actual-score").html();\n    if (actualScore) actualScore = actualScore.trim();\n    var possibleScore = $(this.previousScore).find(".possible-score").html();\n    if (possibleScore) possibleScore = possibleScore.trim();\n    var _dateCompleted = $(this.previousScore).find(".date-completed").html();\n    if (_dateCompleted) _dateCompleted = _dateCompleted.trim();\n    var dateCompleted = new Date.parse(_dateCompleted);\n    $("#previousScore").remove();\n    if (typeof dateCompleted == "object" && actualScore && possibleScore \n      && !isNaN(actualScore) && !isNaN(possibleScore)) {\n\n      var formattedDate = $.datepicker.formatDate(\'M d, yy\', dateCompleted);\n      $("#exerciseFooter").prepend(\n        "<div id=\'previousScore\'>" +\n          "<span id=\'left\'>" +\n            "<span id=\'message\'>Your previous attempt:</span>" +\n            "<span id=\'date\'>" + formattedDate + "</span>" +\n          "</span>" +\n          "<span id=\'score\'>" + actualScore + " / " + possibleScore +"</div>" +\n        "</div>"\n      );\n    }\n  }\n\n  // ExerciseObject.activate\n  this.activate = function(){\n    // this.updateSelectExercise(this.curExercise);\n    if(this.isLoaded){\n      if(!this.isInit){\n        this.init();\n      }\n\n      // set url hash as this exercise\'s id\n      document.location.hash = \'#\'+this.id;\n\n      this.showPreviousScore();\n\n\n      this.el.fadeIn(function(){\n\n      var self = $(this);\n\n      // when all the deferreds are resolved; i.e when our images are loaded\n      // now we can work out the max min width\n      $.when.apply($, workbench.deferreds).always(function(){\n        //self.resizeHintExplain();\n        // now resize it all the time\n        if (!self.attr(\'data-height\') && $(\'.presentation\').length) {\n          var frames = self.find(\'.frame, img\');\n          var maxHeight = self.height();\n\n          frames.each(function(){\n            var frame = $(this);\n            maxHeight = (maxHeight > frame.height()) ? maxHeight : frame.height();\n          });\n\n          if (maxHeight){\n            //console.log(\'setting height to: \', maxHeight);\n            self.height(maxHeight + 150);\n            self.attr(\'data-height\', true);\n          }\n        }\n\n        $(window).resize(self.resizeHintExplain);\n      });\n\n        // display first step if there is one\n        if(!thisExercise.isCompleted && thisExercise.curStep){\n          thisExercise.curStep.activate();\n        }\n\n        // else show Next Exercise button \n        //else if(!thisExercise.isCompleted){\n          //setTimeout(function(){workbench.cur.module.showNextExerciseBtn(true);}, 1000);\n        //}\n\n        // always show the Next Exercise Button\n        else {\n          setTimeout(function(){workbench.cur.module.showNextExerciseBtn(true);}, 1000);\n        }\n\n        $(\'#exerciseNav\').removeClass(\'disableNext\').removeClass(\'disablePrev loading\');\n        $(\'#prevExercise,#nextExercise\').removeAttr(\'disabled\');\n      });\n    }else{\n      this.load();    // load exercise from external source\n    }\n  }\n\n  // ExerciseObject.nextStep\n  this.nextStep = function(){\n    if(!this.curStep){\n      this.curStep = this.steps[0];\n    }else{\n      // if this current step is closeOnComplete then hide its content\n      if(this.curStep.el.is(\'.closeOnComplete\')) this.curStep.close();\n\n      this.curStep.closeHintExplain();\n\n      if(this.curStep.nextStep){\n        this.curStep = this.curStep.nextStep;\n      }else{\n        error(\'No next step!\');\n        return;\n      }\n    }\n\n    this.el.find(\'.clickList button\').removeAttr(\'disabled\');\n    $(\'#controls button\').hide();\n\n    this.curStep.activate();\n    scrollToBottom();\n  }\n\n  // ExerciseObject.exerciseComplete\n  this.exerciseComplete = function(){\n    this.isCompleted = true;\n    this.el.addClass(\'completed\');\n    this.curStep.el.removeClass(\'current\');\n    workbench.hideControls();\n    this.displayResult();\n    this.sendResult();\n    setTimeout(function(){workbench.cur.module.showNextExerciseBtn();}, 1000);\n  }\n\n  // ExerciseObject.displayResult\n  this.displayResult = function(){\n\n    // Pull all the server specific variables\n    var comment = $(this.exerciseReward).find(".rewardComment").html();\n    var image = $(this.exerciseReward).find(".rewardImage").html();\n    var rewardImageStyle = $(this.exerciseReward).find(".rewardImageStyle").html();\n    var rewardCommentStyle = $(this.exerciseReward).find(".rewardCommentStyle").html();\n    var rewardScoreStyle = $(this.exerciseReward).find(".rewardScoreStyle").html();\n\n    var isAllCorrect = (this.curScore == this.curAvailScore);\n    var resultClass = (isAllCorrect) ? \'allCorrect\' : \'notAllCorrect\';\n    var score = $(\'<div class="score system \'+resultClass+\'"></div>\');\n\n    if(isAllCorrect){  \n      var rewardComment = comment ? comment : \'&nbsp;\'; // the div needs to contain something  \n      // Add the comment\n      score.append(\'<div class="reward" style="\' + rewardCommentStyle + \'">\'+rewardComment+\'</div>\');\n\n      // Add the image\n      score.append(\'<div class="reward-image"><img src="\' + image + \'" style="\' + rewardImageStyle +\'" /></div>\');\n\n      // On image load, resize everything to fit it. (This is necessary or the \n      // absolute images will be relative to the wrong space)\n      score.find("img").load(function() {\n        score.find(\'.reward-image\').height($(this).height());\n        score.find(\'.reward-image\').width($(this).width());\n        score.height($(this).height());\n        score.width($(this).width());\n\n        // add the height of the image being loaded to the #exercises div\n        var height = score.parent().height();\n        $("#exercises").height(height + $(this).height());\n      });\n    }\n\n    // Add the score\n    score.append(\'<div class="score-result"><label>SCORE</label> \'+this.curScore+\' / \'+this.curAvailScore+\'</div>\');\n\n    // Only add styling to the score if the score is all correct\n    if (isAllCorrect) {\n      var scoreResult = score.find(\'.score-result\');\n      scoreResult.css(\'position\', \'absolute !important\');\n      scoreResult.attr(\'style\', rewardScoreStyle);\n    }\n\n    // Finally add the code to the page\n    this.el.find(\'.steps\').after(score);\n  }\n\n  // ExerciseObject.sendResult\n  // send score to the server\n  this.sendResult = function(){\n\n    if(this.tracking){\n      $.ajax({\n        url: this.tracking,\n        type: "POST",\n        data: \'score=\'+this.curScore+\'&possible_score=\'+this.curAvailScore,\n        dataType: \'json\',\n        context: document.body,\n        error: function(jqXHR, textStatus, errorThrown){\n          alert(\'Problem: Score not saved. \'+textStatus);\n        }\n      });\n    }\n  }\n\n\n  // This function is used to resize the .hint & .explain divs\n  // it is called after Exercises are loaded and all images are loaded\n  this.resizeHintExplain = function(){\n\n     // create two regexp that match <img> & <table>\n     var rImg = /(<img).*(>).*(<\\/img>)?/g;\n     var rTable = /(<table).*(>).*(<\\/table>)?/g;\n\n     var hints = $(\'.hint\');\n\n      // when called from $(window).resize this.el is undefined\n      if (this.el) \n        hints = this.el.find(\'.hint\');\n\n      $(hints).each(function(){\n\n        var hint = $(this);\n        var hintText = hint.html();\n\n\n        if (! (rImg.exec(hintText) || rTable.exec(hintText))) {\n\n          // remove <img> and <table> tags from .hint\n          hintText = hintText.replace(rImg, \'\').replace(/ /g,\'\').replace(/\\n/g,\'\')\n                             .replace(rTable, \'\');\n\n          // only set width, if there is free flowing text\n          if (hintText.length) {\n            var hintWidth = hint.parent().width();\n            if (hintWidth >= 500) hintWidth = 500;\n            hint.css(\'width\', hintWidth);\n          }\n\n        }\n      });\n\n      var explains =  $(\'.explain\');\n      if (this.el)\n        explains = this.el.find(\'.explain\');\n\n      $(explains).each(function(){\n\n        var explain = $(this);\n\n        var explainText = $(\'.explain\').html();\n\n        if (! (rImg.exec(explainText) || rTable.exec(explainText))) {\n          // remove <img> and <table> tags from .explain\n          explainText = explainText.replace(rImg, \'\').replace(/ /g,\'\').replace(/\\n/g,\'\').replace(rTable, \'\');\n\n          // only set width, if there is free flowing text\n          if (explainText.length) {\n            var explainWidth = explain.parent().width();\n            if (explainWidth >= 500) explainWidth = 500; \n            $(\'.explain\').css(\'width\', explainWidth);\n          }\n        }\n    });\n  }\n}\n\nfunction StepObject(params){\n  this.el             = params.el;\n  this.parentExercise = params.parentExercise;\n  this.prevStep       = params.prevStep;\n  this.index          = params.index;\n\n  this.isInit         = false;                    // has step been initialized\n  this.choices        = false;                    \n  this.choicesEl      = false;\n  this.nextStep       = false;\n\n  this.curScore       = 0;\n  this.curAvailScore  = 0;\n\n  this.answers        = new Array();\n  this.hasEmptyAnswer = false;\n\n  var thisStep        = this;\n\n  // if there is a previous step then assign its nextStep to this step\n  if(this.prevStep) this.prevStep.nextStep = this;        \n\n  // create choices object if a .choices element exists in this step\n  // else assign it to the previous step\'s choices\n  // else false\n  // NOTE: the choices object isn\'t necessarily unique to this step, could be shared\n  this.choices = (thisStep.el.find(\'.choices\').length)\n            ? new ChoicesObject({origEl: thisStep.el.find(\'.choices\')})\n            : ((thisStep.prevStep)\n                ? thisStep.prevStep.choices\n                : false);\n\n  this.init = function(){\n    console.log(\'Init Step \'+this.index)\n\n    // prepend stepNum and minimized/maximize button\n    this.el.prepend(\'<div class="stepNumWrap" title="Minimize / Maximize"><div class="stepNum system">\'+(this.index+1)+\'.</div><div class="minMax">-</div></div>\');\n\n    // build new choices element if required\n    // TODO: limit \'area\' to only singleDrop and drag etc\n    if(this.el\n        .find(\'area, .answer.radio, .answer.checkbox, .answer.singleClick, .answer.multiClick, .drop, .singleDrop, .multiDrop\').length\n          && this.choices\n          && this.choices.choice.length){\n\n      if(this.el.find(\'.imagemap, .multiDrag, .drop, .singleDrop, .multiDrop\').length){\n        var chWrapper = \'<div/>\';\n        var chItem = \'<span/>\';\n      }else{\n        var chWrapper = \'<ul/>\';\n        var chItem = \'<li/>\';\n      }\n\n      var chEl = $(chWrapper) \n        .addClass(this.choices.classes)\n\n      for(i in this.choices.choice){\n        var choice = this.choices.choice[i];\n\n        $(chItem)\n          .addClass(choice.classes)\n          .append(choice.option)\n          .data(\'choice\',choice)\n          .appendTo(chEl);\n      }\n\n      if(this.el.find(\'.answer.singleClick, .answer.multiClick\').length){\n        $(\'<li class="undoDel choice">&laquo;Undo</li>\').appendTo(chEl);\n      }\n\n      this.el.keypress(function(event){\n          if ( event.which == 13 ) {\n            event.preventDefault();\n          }\n      })\n\n      this.choicesEl = chEl;\n\n      // default action type for \n      var actionType = \'\';\n      if (chEl.hasClass(\'drag\')) actionType = \'Drag\';\n      else if (chEl.hasClass(\'click\')) actionType = \'Click\';\n      else if (chEl.hasClass(\'multiDrag\')) actionType = \'Multi-drag\';\n      else if (chEl.hasClass(\'multiClick\')) actionType = \'Multi-click\';\n\n\n      if (this.el.find(\'.answer.radio, .answer.checkbox\').length && this.choicesEl.hasClass(\'columns\')) {\n         // add the headings tab before the first question\n         this.el.find(\'.question\').first().before(this.choicesEl);\n      }\n      else if(this.el.find(\'.answer.singleClick, .answer.multiClick, .drop, .singleDrop, .multiDrop\').length){\n        this.el.append(this.choicesEl);\n\n        // only add the label if we worked out the actionType\n        if (actionType.length)\n          this.el.find(\'.question\').last().after("<span class=\'choice_type\'>" + actionType + "</span>");\n      }else{\n        this.el.find(\'.stepNumWrap\').after(this.choicesEl);\n      }\n    }\n\n    this.el.find(\'.choices.drag, .choices.multiDrag\')\n      .each(function(){\n        var helper = ($(this).is(\'.multiDrag\')) ? \'clone\' : \'original\';\n        $(this).find(\'.choice\')\n          .draggable({\n            revert: "invalid",\n            helper: helper,\n            zIndex: 3000\n          })\n          .click(function(event){\n            $(this).siblings(\'.choice\').removeClass(\'selected\');\n            $(this).addClass(\'selected\');\n          })\n      });\n\n    this.el.find(\'.choices.drag,.choices.multiDrag\')\n      .droppable({\n        accept: \'.chosen\',\n        hoverClass: "dropHover",    \n        drop: function( event, ui ) {\n\n          var departedDropSpot = ui.draggable.closest(\'.answerField\');\n\n          ui.draggable.removeClass(\'chosen\');\n          if($(this).is(\'.multiDrag\')){\n            ui.draggable\n              .remove();\n          }else{\n            ui.draggable\n              .css({\n                left: 0,\n                top: 0\n              })\n              .appendTo($(this));\n          }\n\n          // pop/clear the value of the previous dropSpot\n          departedDropSpot.each(function(){\n            if($(this).is(\'.multiDrop\')){\n              var newAnswerVal = \'\';\n              $(this).find(\'.choice\').each(function(){\n                var ch  = $(this).data(\'choice\');\n                newAnswerVal += ch.value;\n              });\n              $(this).data(\'value\',newAnswerVal);\n            }else{\n              $(this).data(\'value\',\'\');\n            }\n          });\n\n        }\n      });\n\n    // make draggable anything with class .drag (except .choices)\n    this.el.find(\'.drag:not(.choices)\')\n      .draggable({\n        zIndex: 3000\n      });\n\n    this.el.find(\'.choices.click .choice\').click(function(){\n      workbench.cur.module.curExercise.curStep.clickFill($(this))\n    });\n\n    // is there .hint or .explain\n    if(this.el.find(\'.hint,.explain\').length){\n\n      var hintExplain = $(\'<div class="hintExplain hintClosed explainClosed"><div class="tabs"></div></div>\');\n\n      var self = this;\n\n      // for each .hint as there can be more than one per step\n      this.el.find(\'.hint\').each(function(){\n        hintBtn = $(\'<button class="hintBtn">Hint</button>\');\n        hintBtn.click(function(){\n          var he = $(this).closest(\'.hintExplain\');\n\n\n          if(he.hasClass(\'hintOpen\')){\n            he.find(\'.hint\').slideUp(function(){\n              he.addClass(\'hintClosed\').removeClass(\'hintOpen\');\n            });\n          }else{\n            he.addClass(\'hintOpen\').removeClass(\'hintClosed\');\n\n            self.parentExercise.resizeHintExplain();\n            // only slide down the .hint if .explain is closed\n            if (he.hasClass(\'explainClosed\'))\n            he.find(\'.hint\').slideDown();\n            else\n              he.find(\'.hint\').show();\n          }\n\n          he.addClass(\'explainClosed\').removeClass(\'explainOpen\');\n          $(this).closest(\'.hintExplain\').find(\'.explain\').hide();\n        });\n        hintExplain.find(\'.tabs\').append(hintBtn);\n        hintExplain.append($(this));\n        hintExplain.addClass(\'hasHint\');\n      });\n\n      this.el.find(\'.explain\').each(function(){\n        explainBtn = $(\'<button class="explainBtn">Explanation</button>\');\n        explainBtn.click(function(){\n          var he = $(this).closest(\'.hintExplain\');\n\n          if(he.hasClass(\'explainOpen\')){\n            he.find(\'.explain\').slideUp(function(){\n              he.addClass(\'explainClosed\').removeClass(\'explainOpen\');\n            });\n          }else{\n            he.addClass(\'explainOpen\').removeClass(\'explainClosed\');\n\n            // only slide down the .explain if .hint is closed\n            if (he.hasClass(\'hintClosed\'))\n            he.find(\'.explain\').slideDown();\n            else\n              he.find(\'.explain\').show();\n          }\n\n          he.addClass(\'hintClosed\').removeClass(\'hintOpen\');\n          $(this).closest(\'.hintExplain\').find(\'.hint\').hide();\n        });\n        hintExplain.find(\'.tabs\').append(explainBtn);\n        hintExplain.append($(this));\n        hintExplain.addClass(\'hasExplain\');\n      });\n\n      this.el.append(hintExplain);\n\n    }\n\n    // add a content wrapper to the step for hiding/showing the step content\n    this.el.wrapInner(\'<div class="step-content" />\');\n\n    // TODO: add tools for open/close step, and make it only on completed steps (not current)\n    this.el.find(\'.stepNumWrap\')\n      .click(function(){\n        // minimize/maximize step contents\n        $(this).siblings(\'.step-content\').each(function(){\n          if($(this).css(\'display\') == \'none\'){\n            $(this).slideDown();\n            thisStep.el.find(\'.minMax\').html(\'-\');\n            thisStep.el.removeClass(\'closed\');\n            thisStep.parentExercise.alignSteps();\n\n          }else{\n            $(this).slideUp();\n            thisStep.el.find(\'.minMax\').html(\'+\');\n            thisStep.el.addClass(\'closed\');\n            thisStep.parentExercise.alignSteps();\n          }\n        })\n      })\n      .prependTo(thisStep.el);\n\n    // add an inner lining to the step for styling purposes\n    this.el.wrapInner(\'<div class="step-inner" />\');\n\n    this.initImageMaps();\n    this.initAnswers();\n\n    this.isInit = true;\n  }\n\n  this.initImageMaps = function(){\n\n    /*\n    this.el.find(\'.imagemap\')\n      .each(function(){\n        $(this).find(\'img\').attr(\'usemap\',\'\');\n      });\n    */\n\n    this.el.find(\'.imagemap img\').attr(\'usemap\',\'\');\n  }\n\n  this.initAnswers = function(el){\n    var answerIndex = 0;\n    this.el.find(\'.answer, .imagemap area\').each(function(){\n      var origEl = $(this);\n\n      if(origEl.is(\'area\') && origEl.attr(\'shape\')!=\'rect\'){ error(\'Map shape must "rect"!\') }\n\n      // create answer object\n      var newAnswer = new AnswerObject({\n        origEl:     origEl,\n        parentStep: thisStep,\n        index:      answerIndex++\n      });\n\n      newAnswer.traverseLogic($(\'<div>\'+newAnswer.value+\'</div>\'),\'\');  // this function is called here only to set the newAnswer.hasEmpty variable\n\n      thisStep.hasEmptyAnswer = thisStep.hasEmptyAnswer || newAnswer.hasEmpty;\n\n      thisStep.answers.push(newAnswer);\n\n      console.log(\'Init Answer \'+answerIndex)\n\n    });\n\n    this.el.find(\'.radioItem,.checkboxItem\')\n      .mouseover(function(){\n        $(this).addClass(\'hover\')\n      })\n      .mouseout(function(){\n        $(this).removeClass(\'hover\')\n      })\n\n    this.el.find(\'.radioItem\')\n      .click(function(){\n        if($(this).closest(\'.exestep\').is(\'.current\')){\n          $(this).closest(\'.radioInput\').find(\'.radioItem\')\n            .removeClass(\'checked\');\n\n          $(this).addClass(\'checked\');\n\n          $(this).find(\'input\')\n            .prop(\'checked\',true)\n            .trigger(\'change\');\n        }\n      })\n\n    this.el.find(\'.checkboxItem\')\n      .click(function(){\n        if($(this).closest(\'.exestep\').is(\'.current\')){\n          // toggle checkbox state\n          if($(this).is(\'.checked\')){\n            $(this).removeClass(\'checked\');\n            $(this).find(\'input\')\n              .prop(\'checked\',false)\n              .trigger(\'change\');\n          }else{\n            $(this).addClass(\'checked\');\n            $(this).find(\'input\')\n              .prop(\'checked\',true)\n              .trigger(\'change\');\n          }\n        }\n      })\n\n    this.initDroppables();\n    console.log(workbench.cur.module.curExercise);\n  }\n\n  // make this step the currently active step\n  this.activate = function(){\n    if(!this.isInit){\n      this.init()\n    }\n\n    // if is a radio or checkbox and not columns or rows then dont show choices\n    var dontShowChoices = (this.choicesEl && this.el.find(\'.answerField.checkboxInput,.answerField.radioInput\').length && !this.choicesEl.hasClass(\'columns\') && !this.choicesEl.hasClass(\'rows\'));\n\n    if(this.choicesEl && !dontShowChoices) this.choicesEl.show();\n\n    this.parentExercise.el.find(\'.step.current\').removeClass(\'current\');\n    // if(this.parentExercise.el.find(\'.step\').length > 1) this.el.addClass(\'current\');\n    this.el.addClass(\'current\');\n\n    this.el.append($(\'#controls\'));\n\n    // show the step\n    this.el.fadeIn(function(){\n      thisStep.parentExercise.alignSteps();\n    });\n\n    if(!workbench.isPreview){\n      this.el.find(\'input:text:first\').focus();\n    }\n\n    // if this is a "columns" multiple choice then make the columns align\n    if(this.el.find(\'.choices.columns\').length){\n      var maxPromptWidth = 0;\n\n      // set maxPromptWidth to the width of the widest prompt\n      this.el.find(\'.prompt\').each(function(){\n        if($(this).width() > maxPromptWidth) maxPromptWidth = $(this).width();\n        console.log(\'WW: \'+$(this).html()+\': \'+$(this).width());\n      });\n\n      console.log(\'maxPromptWidth: \'+maxPromptWidth);\n      // set all prompts to the max width\n      this.el.find(\'.prompt\').width(maxPromptWidth);\n\n      // if there is a prompt and it\'s to the left of the answer\n      // then set left margin of the choices to match prompt width\n      if(this.el.find(\'.prompt\').next(\'.answer,.answerField\').length){\n        this.el.find(\'.choices\').css(\'margin-left\',maxPromptWidth+5);\n      }\n\n      // set columns to be same width as their header\n      var colN = 0;\n      this.el.find(\'.choices .choice\').each(function(){\n        colN++;\n        var colHeadWidth = $(this).width();\n\n        thisStep.el.find(\'.question .answerField .radioItem:nth-child(\'+colN+\'), .question .answerField .checkboxItem:nth-child(\'+colN+\')\').width(colHeadWidth);\n\n        console.log(\'colHeadWidth: \' + colHeadWidth + \' / \' + $(this).html() + \' / \' + thisStep.el.find(\'.question .answerField .radioItem:nth-child(\'+colN+\')\').find(\'input\').val())\n      });\n\n    }\n\n    // if this step has no answers then stepComplete \n    if(!this.answers.length){\n      this.stepComplete();\n    }\n  }\n\n  this.initDroppables = function(){\n    this.el.find(\'.singleDrop,.multiDrop\')\n      .addClass(\'drop\')\n      .click(function(event){\n        if($(this).closest(\'.exestep\').find(\'.choices .choice.selected\').length){\n          thisStep.dropItem($(this),event,$(this).closest(\'.exestep\').find(\'.choices .choice.selected:first\'));\n        }\n      })\n      .droppable({\n        accept: \'.choice\',\n        hoverClass: \'dropHover\',\n        drop: function(event,ui){ thisStep.dropItem($(this),event,ui.draggable) }\n      });\n  }\n\n  this.dropItem = function(dropSpot,event,dragItem){\n\n    dragItem.removeClass(\'selected\');\n\n    var departedDropSpot = dragItem.closest(\'.ui-droppable\');\n\n    departedDropSpot.addClass(\'leaving\');\n\n    var choice  = dragItem.data(\'choice\');\n\n    if(dropSpot.is(\'.multiDrop\')){\n\n      var oldVal = dropSpot.data(\'value\');\n      if(oldVal == undefined){oldVal = \'\';}\n      dropSpot.data(\'value\',oldVal+choice.value);\n\n    }else{\n      // if already has something dropped in it then swap places\n      // unless the choices is multiDrag, in which case remove\n      if(dropSpot.find(\'.choice\').length){\n        if(departedDropSpot.is(\'.multiDrag\')){\n          dropSpot.find(\'.choice\').remove();\n        }else{\n          departedDropSpot\n            .append(dropSpot.find(\'.choice\'))\n            .data(\'value\',dropSpot.data(\'value\'));\n        }\n      }\n\n      // else dropSpot was empty, nothing to swap so make departedDropSpot value empty\n      else{\n\n        if(!departedDropSpot.is(\'.multiDrag\')){\n          departedDropSpot.data(\'value\',\'\');\n        }\n      }\n\n      dropSpot.data(\'value\',choice.value);\n    }\n\n    if(dragItem.closest(\'.exechoices\').is(\'.multiDrag\')){\n\n      var clon = dragItem.clone();\n      clon.data(\'choice\',choice);\n      clon\n        .css({\n          left: 0,\n          top: 0\n        })\n        .addClass(\'chosen\')\n        .draggable({\n          revert: \'invalid\',\n          helper: \'original\',\n          zIndex: 3000\n        })\n        .appendTo(dropSpot);\n    }else{\n\n      dragItem\n        .css({\n          left: 0,\n          top: 0\n        })\n        .addClass(\'chosen\')\n        .appendTo(dropSpot);\n    }\n\n    // if departing dropSpot and arriving dropSpot aren\'t the same spot\n    if(dropSpot.hasClass(\'leaving\')){\n      // set the value of the departing dropSpot\n      departedDropSpot.each(function(){\n        var newAnswerVal = \'\';\n        $(this).find(\'.choice\').each(function(){\n          var ch  = $(this).data(\'choice\');\n          newAnswerVal += ch.value;\n        });\n        $(this).data(\'value\',newAnswerVal);\n      });\n    }\n    departedDropSpot.removeClass(\'leaving\');\n\n    workbench.cur.module.curExercise.curStep.el.find(\'.mark:not(.correct,.shown)\').remove();\n    $(\'#checkBtn\').fadeIn().scrollIntoView();\n  }\n\n  /*\n  this.initRadios = function(){       \n    this.el.find(\n    if(this.el.find(\'.choices.columns li\').length){\n      var cols = <\n      this.el.find(\'.choices.columns li\').each(function(){\n\n      });\n    }\n  */\n\n  /*\n  this.getChoices = function(){\n    st = this.el;\n    while(!st.find(\'.choices li\').length){\n      st = st.prev(\'.step\');\n    }\n    if(st.find(\'.choices li\').length){\n\n    }else{\n      return false;\n    }\n  }\n  * */\n\n  this.clickFill = function(clickBtn){\n    var clon    = clickBtn.clone();\n    var choice  = clickBtn.data(\'choice\');\n    var input   = this.el.find(\'.answerField.clickInput:first\');\n\n    if(clickBtn.hasClass(\'undoDel\')){\n      var newAnswerVal = \'\';\n      var mV = input.data(\'multiValue\');\n      if(mV != undefined){\n        mV.pop();\n        for(i in mV){\n          newAnswerVal += mV[i];\n        }\n      }\n      input.data(\'multiValue\',mV);\n      input.data(\'value\',newAnswerVal);\n      input.html(newAnswerVal);\n    }else{\n      if(input.hasClass(\'multiClick\')){\n        input.append(choice.result);\n\n        var mV = input.data(\'multiValue\');\n        if(mV == undefined){mV = new Array();}\n        mV.push(choice.result);\n        input.data(\'multiValue\',mV);\n\n        var oldVal = input.data(\'value\');\n        if(oldVal == undefined){oldVal = \'\';}\n        input.data(\'value\',oldVal+choice.value);\n      }else{\n        input.empty().append(choice.result);\n        input.data(\'value\',choice.value);\n      }\n      this.el.find(\'.mark\').remove();\n      $(\'#checkBtn\').fadeIn().scrollIntoView();\n    }\n  }\n\n  this.checkAnswers = function(){\n    var pointsTotal     = 0;\n    var scoreTotal      = 0;\n    var hasMissing      = false;\n\n    for(i in this.answers){\n      var answer = this.answers[i];\n      if(!answer.locked){\n        var score   = answer.check();\n        hasMissing  = hasMissing || !answer.attempted;\n        pointsTotal += answer.points;\n        scoreTotal  += answer.score;\n      }\n    }\n\n    console.log(\'hasMissing:\'+hasMissing+\' / pointsTotal:\'+pointsTotal+\' / scoreTotal:\'+scoreTotal)\n\n    // if all answers correct then step is complete\n    if(!hasMissing && pointsTotal == scoreTotal){\n      this.stepComplete(true);\n    }\n\n    // else if no answers are missing, display the Show Me button\n    else if(!hasMissing){\n      $(\'#showMeBtn\').fadeIn().scrollIntoView();\n    }\n  }\n\n  /*\n   * revealAnswers()\n   * Reveal the answers\n   * \n   */\n  this.revealAnswers = function(){\n    for(i in this.answers){\n      var answer = this.answers[i];\n\n      if(answer.locked){ continue }\n\n      answer.reveal();\n\n    }\n    this.stepComplete();\n  }\n\n  /*\n   * stepComplete()\n   * \n   */\n  this.stepComplete = function(isAllCorrect){\n    this.el.find(\'input.answerField, .answerField input, .clickList button\').attr(\'disabled\',\'disabled\');\n    $(\'#checkBtn, #showMeBtn, span.choice_type\').hide();\n\n    this.el.find(\'.explainBtn\').fadeIn();\n    if(this.choicesEl && !this.choicesEl.hasClass(\'columns\')){\n      this.choicesEl.hide();\n    }\n\n    this.closeHintExplain();\n\n    if(this.nextStep){\n\n      if(isAllCorrect){\n        this.parentExercise.nextStep();\n      }else{\n        this.el.removeClass(\'current\');\n        $(\'#nextStepBtn\').fadeIn().focus().scrollIntoView();\n      }\n\n    }else{\n\n      $(\'#nextStepBtn\').hide();\n      this.parentExercise.exerciseComplete();\n\n    }\n    console.log(\'Step score: \'+this.parentExercise.curScore+\' / \'+this.parentExercise.curAvailScore); // DEBUG\n  }\n\n  this.close = function(){\n    this.el.find(\'.step-content\').hide();\n    this.el.addClass(\'closed\');\n    thisStep.parentExercise.alignSteps();\n  }\n\n  this.closeHintExplain = function(){\n\n    this.el.find(\'.hintExplain\')\n      .removeClass(\'hintOpen\').addClass(\'hintClosed\')\n      .removeClass(\'explainOpen\').addClass(\'explainClosed\')\n      .find(\'.hint, .explain\').hide();\n\n  }\n\n\n}\n\nfunction ChoicesObject(params){\n  this.origEl     = params.origEl;\n  this.classes    = params.origEl.attr(\'class\');\n  this.choice     = new Array();\n\n  var thisChoices = this;\n\n  // load the choice array\n  this.origEl.find(\'.choice\').each(function(){\n    // if a value parameter was set then make that the chValue and then remove the span containing the value\n    if($(this).find(\'.value\').length){\n      var chValue =  $(this).find(\'.value\').text();\n      $(this).find(\'.value\').remove();\n    }else{\n      var chValue = ($(this).find(\'.result\').length) ? $(this).find(\'.result\').html() : $(this).html();\n    }\n\n    var chResult = ($(this).find(\'.result\').length) ? $(this).find(\'.result\').html() : $(this).html();\n\n    $(this).find(\'.result\').remove();\n\n    var chOption = $(this).html();\n\n    thisChoices.choice.push({\n      value:  chValue,\n      result: chResult,\n      option: chOption,\n      classes:    $(this).attr(\'class\') \n    })\n  });\n\n  this.origEl.addClass(\'origChoices\').removeClass(\'choices\');\n}\n\nfunction AnswerObject(params){\n  this.origEl         = params.origEl;\n  this.parentStep     = params.parentStep;\n  this.index          = params.index;\n\n  this.el             = false;\n  this.markEl         = false;\n  this.locked         = false;        // answer is locked if it found to be correct or has been shown\n  this.attempted      = false;\n  this.classes        = this.origEl.attr(\'class\');\n  this.isImageMapArea = this.origEl.is(\'area\');\n\n  this.inputType      = \'text\';\n  this.restrict       = \'none\';   // TODO: not sure what restrict does now\n\n  this.score          = 0;\n\n  this.hasEmpty       = false;\n  this.userAnswerIsEmpty = false;\n  this.points         = workbench.def.scorePerAnswer;\n  this.tolerance      = false;\n  this.min            = false;\n  this.max            = false;\n  this.maxsigfigs     = false;\n\n  var thisAnswer = this;\n\n\n  // By default an empty answer is worth no points\n  // This allows drag-drop questions to have lots of empty answers and not award points to them \n  if(this.origEl.html() == \'\' && this.origEl.attr(\'alt\') == \'\'){\n    thisAnswer.points = 0;\n  }\n\n  this.origEl.find(\'.points\').each(function(){\n    thisAnswer.points = parseFloat($(this).text());\n  });\n  this.origEl.find(\'.tolerance\').each(function(){\n    thisAnswer.tolerance = parseFloat($(this).text());\n  });\n  this.origEl.find(\'.min\').each(function(){\n    thisAnswer.min = parseFloat($(this).text());\n  });\n  this.origEl.find(\'.max\').each(function(){\n    thisAnswer.max = parseFloat($(this).text());\n  });\n  this.origEl.find(\'.maxsigfigs\').each(function(){\n    thisAnswer.maxsigfigs = parseInt($(this).text());\n  });\n\n  this.origEl.find(\'.points, .tolerance, .min, .max, .maxsigfigs\').remove();\n\n  if(this.origEl.is(\'.text, .number, .integer\')){\n    this.inputType  = \'textInput\';\n    this.restrict   = whichClass(this.origEl,\'text number integer\',false);\n\n  }else if(this.origEl.is(\'.radio\')){\n    this.inputType  = \'radioInput\';\n    this.restrict   = whichClass(this.origEl,\'radio\',false);\n\n  }else if(this.origEl.is(\'.checkbox\')){\n    this.inputType  = \'checkboxInput\';\n    this.restrict   = whichClass(this.origEl,\'checkbox\',false);\n\n  }else if(this.origEl.is(\'.singleClick, .multiClick\')){\n    this.inputType  = \'clickInput\';\n    this.restrict   = whichClass(this.origEl,\'singleClick multiClick\',false);\n\n  }else if(this.origEl.is(\'area, .singleDrop\')){\n    this.inputType  = \'singleDrop\';\n    this.restrict   = whichClass(this.origEl,\'singleDrop\',false);\n\n  }else if(this.origEl.is(\'area, .multiDrop\')){\n    this.inputType  = \'multiDrop\';\n    this.restrict   = whichClass(this.origEl,\'multiDrop\',false);\n\n  }else if(this.origEl.is(\'.drag, .multiDrag\')){\n    this.inputType  = \'dragInput\';\n    this.restrict   = whichClass(this.origEl,\'drag\',false);\n  }\n\n  // DEBUG only\n  this.origEl.attr(\'inputType\',this.inputType);\n  this.origEl.attr(\'restrict\',this.restrict);\n\n  // the new answer field element\n  this.el = $(\'<b>[Field Missing]</b>\');\n\n  var thisAnswer = this;\n\n  // store default value if it exists\n  this.defaultValue = false;\n  this.origEl.find(\'.default\').each(function(){\n    thisAnswer.defaultValue = $(this).html();\n    $(this).remove();\n  });\n\n  this.value = this.origEl.html();\n\n  // if there are <or> values, put them in the thisAnswer.or array\n  thisAnswer.or = new Array();\n  var valueWrap = $(\'<div>\'+this.value+\'</div>\');\n  valueWrap.find(\'.or\').each(function(){\n    thisAnswer.or.push($(this).html());\n  });\n\n  // build answer field element\n  var extraClasses = \'\';\n\n  // scroll to the check answer button only on the first keypress\n  thisAnswer.first_press = true;\n\n  switch(this.inputType){\n    case \'textInput\':\n      this.el = $(\'<input/>\');\n      var size = classValue(\'size-\',this.origEl.attr(\'class\'),workbench.def.inputWidth);  // get the character width\n      if(size == \'small\') size = 5;\n      if(size == \'medium\') size = 15;\n      if(size == \'large\') size = 30;\n      if(size == \'huge\') size = 60;\n\n      this.el.attr({\n        type: \'text\',\n        size: size,\n        maxlength: size\n      });\n\n      this.el.keypress(function(){\n        $(this).next(\'.mark:not(.correct):first\').remove();\n        // workbench.cur.module.curExercise.curStep.el.find(\'.mark:not(.correct)\').remove();\n        $(\'#checkBtn\').fadeIn();\n\n        if (thisAnswer.first_press) {\n          $(\'#checkBtn\').scrollIntoView();\n          thisAnswer.first_press = false;\n        }\n      });\n      break;\n\n    case \'clickInput\':\n      this.el = $(\'<div></div>\');\n      break;\n\n    case \'singleDrop\': case \'multiDrop\':\n      this.el = $(\'<div></div>\');\n\n      // build image map area\n      if(this.isImageMapArea){\n        this.value = this.origEl.attr(\'alt\');\n        var coords = this.origEl.attr(\'coords\').split(\',\');\n        this.el\n          .addClass(\'mapItem\')\n          .css({\n            left:   coords[0]+\'px\',\n            top:    coords[1]+\'px\',\n            width:  (coords[2]-coords[0])+\'px\',\n            height: (coords[3]-coords[1])+\'px\'\n          })\n      }\n\n      break;\n\n    case \'radioInput\':\n      if(this.parentStep.choicesEl){\n        extraClasses = (this.parentStep.choicesEl.hasClass(\'columns\'))?\' columns\':\'\';\n        this.el = $(\'<div></div>\');\n\n        // get the radiogroupname from original answer tag, which in turn comes from the dita\n        var radiogroupname = this.origEl.attr(\'data-radiogroupname\') || \'\';\n\n        if(this.parentStep.choices.choice.length){\n          for(i in this.parentStep.choices.choice){\n            var ch = this.parentStep.choices.choice[i];\n            // this.el.append(\'<div class="radioItem"><input type="radio" name="radioRow_\'+thisAnswer.parentStep.parentExercise.id+\'_\'+thisAnswer.parentStep.index+\'-\'+thisAnswer.index+\'" value="\'+ch.value+\'"/><label>\'+ch.option+\'</label></div>\');\n\n            // use the user defined radio name or create our own\n            var groupname = radiogroupname || \'radioRow_\' + thisAnswer.parentStep.parentExercise.id + \'_\' + thisAnswer.parentStep.index + \'-\' + thisAnswer.index;\n            this.el.append(\'<div class="radioItem"><input type="radio" name="\' + groupname + \'"value="\' + ch.value + \'"/><label>\' + ch.option + \'</label></div>\');\n          };\n        }\n      }\n      this.el.change(function(){\n        $(this).next(\'.mark:not(.correct):first\').remove();\n        $(\'#checkBtn\').fadeIn().scrollIntoView();\n      });\n      break;\n\n    case \'checkboxInput\':\n      if(this.parentStep.choicesEl){\n        extraClasses = (this.parentStep.choicesEl.hasClass(\'columns\'))?\' columns\':\'\';\n        this.el = $(\'<div></div>\');\n        if(this.parentStep.choices.choice.length){\n          for(i in this.parentStep.choices.choice){\n            var ch = this.parentStep.choices.choice[i];\n            this.el.append(\'<div class="checkboxItem"><input type="checkbox" name="checkboxRow_\'+thisAnswer.parentStep.parentExercise.id+\'_\'+thisAnswer.parentStep.index+\'-\'+thisAnswer.index+\'" value="\'+ch.value+\'"/><label>\'+ch.option+\'</label></div>\');\n          };\n        }\n      }\n\n      this.el.change(function(){\n        workbench.cur.module.curExercise.curStep.el.find(\'.mark\').remove();\n        $(\'#checkBtn\').fadeIn().scrollIntoView();\n      });\n      break;\n  }\n\n  this.el\n    .addClass(thisAnswer.origEl.attr(\'class\'))\n    .removeClass(\'answer\')\n    .addClass(\'answerField\')\n    .addClass(extraClasses)\n    .addClass(thisAnswer.inputType)\n    .keypress(function(event){\n        if ( event.which == 13 ) {\n          event.preventDefault();\n          workbench.cur.module.curExercise.curStep.checkAnswers();\n        }\n    })\n\n  if(this.isImageMapArea){\n    this.el.appendTo(thisAnswer.origEl.closest(\'.imagemap\'));\n  }else{\n    this.el.insertAfter(thisAnswer.origEl).show();\n  }\n\n\n  /* #######################################################################\n   *  check\n   *\n   *  mark this answer\n   *  \n   */\n  this.check = function(){\n\n    var theAnswer = this.value;\n\n    switch(this.inputType){\n      case \'textInput\':\n        var userAnswer = this.el.val();\n        break;\n      case \'radioInput\':\n        var userAnswer = this.el.find(\'input:radio:checked\').val();\n        break;\n      case \'checkboxInput\':\n        theAnswer = this.answerString(theAnswer);\n\n        var allUserVals = new Array();\n        this.el.find(\'input:checkbox:checked\').each(function(){\n          allUserVals.push($(this).val());\n        });\n        var userAnswer = allUserVals.join(\'+\'); // userAnswer will be like \'value1+value2+value3\'\n        break;\n      default:\n        var userAnswer = this.el.data(\'value\');\n    }\n\n    // Remove mark from possible previous attempt\n    this.el.next(\'.mark\').remove();\n\n    // if answer empty, use defaultValue if there is one\n    if(userAnswer == undefined || userAnswer == \'\'){\n      if(this.defaultValue){\n        userAnswer = this.defaultValue;\n      }else{\n        this.userAnswerIsEmpty = true;\n      }\n    }else{\n      this.userAnswerIsEmpty = false;\n    }\n\n    var sigfigsIsMaxedOut = false;\n\n    // test max significant figures if they exist\n    if(this.maxsigfigs !== false){\n      var sigfigs = userAnswer.toString();\n      sigfigs = sigfigs.replace(/^[0\\.]*/,\'\');    // remove leading zeros and decimal point\n      sigfigs = sigfigs.replace(/E.*$/i,\'\');      // remove Exponent\n      sigfigs = sigfigs.replace(/\\./,\'\');         // remove decimal point\n\n      var sigfigsN = sigfigs.length;\n\n      sigfigsIsMaxedOut = (sigfigsN > this.maxsigfigs);\n    }\n\n    // test if the answer is correct, taking into account potential logic operators (or, xor, and)\n    var logicStr = this.traverseLogic($(\'<div>\'+theAnswer+\'</div>\'),userAnswer);\n    console.log(\'Answer logic: \'+ logicStr);\n    this.isCorrect = eval(logicStr);\n\n    console.log(\'realAnswer: \'+theAnswer+\n          \' (defaultAnswer: \'+ this.defaultValue+\') / \' + \n          \' userAnswer: \' + userAnswer +\n          \' maxsigfigs: \' + this.maxsigfigs +\n          \' sigfigs: \' + sigfigs +\n          \' [isCorrect: \'+this.isCorrect+\n          \' / hasEmpty: \'+this.hasEmpty+\n          \' / userAnswerIsEmpty: \'+this.userAnswerIsEmpty+\n          \' / step.hasEmptyAnswer: \'+this.parentStep.hasEmptyAnswer+\']\');\n\n\n    // Too many Significant Figures\n    if(sigfigsIsMaxedOut){\n      this.attempted = true;\n      this.markEl = $(\'<span class="mark sigfigs" title="Too many significant figures">Too Many Sig Figs</span>\');\n\n      // TODO: show significant figures explanation block\n    }\n\n    // the answer is not empty and user\'s answer is empty, so mark as missing\n    // also if the step contains empty answer(s) or the question is allowed empty answers\n    // then the answer field is allowed to be left empty\n    else if(!this.isCorrect && !this.hasEmpty && this.userAnswerIsEmpty && !this.parentStep.hasEmptyAnswer && !this.el.closest(\'.question\').is(\'.emptyAnswerAllowed\')){\n      this.markEl = $(\'<span class="mark missing" title="Answer is missing">???</span>\');\n    }\n\n    // answer and userAnswer are both empty but no points are available\n    // then it\'s correct but no points are awarded and the field is not locked\n    else if(this.points == 0 && this.isCorrect && this.hasEmpty && this.userAnswerIsEmpty){\n      this.attempted = true;\n      this.markEl = $(\'\');    // remove mark\n    }\n\n    // answer is correct\n    else if(this.isCorrect){\n      this.score = this.points;\n      if(!this.attempted){\n        this.parentStep.parentExercise.curScore += this.points;\n        this.parentStep.parentExercise.curAvailScore += this.points;\n\n        // only add this class for non radioInput fields\n        if (this.inputType != \'radioInput\')\n        this.el.addClass(\'correct\');\n\n        this.markEl = $(\'<span class="mark correct" title="You got it correct, full points">Correct!</span>\');\n        this.attempted = true;\n      }else{\n        this.el.addClass(\'shown\');\n        this.markEl = $(\'<span class="mark shown" title="Your first attempt was wrong, this is the correct answer">That\\\'s it!</span>\')\n\n      }\n\n      // disable and lock answer field because it is correct\n\n\n      // but only disable the field for radio\n      if (this.el.find(\'checked\').length) {\n        this.el.attr(\'disabled\',\'disabled\').find(\'input[type=radio], input[type=checkbox]\').attr(\'disabled\',\'disabled\');\n\n        this.locked = true;\n        $(this).addClass(\'locked\');\n      }\n\n      else {\n      // disable dragging/dropping for this answer        \n      if(this.el.is(\'.singleDrop,.multiDrop\')){\n        this.el.droppable({ disabled: true });\n        this.el.find(\'.choice\').draggable({ disabled: true });\n      }\n\n      this.locked = true;\n      $(this).addClass(\'locked\');\n    }\n    }\n\n    // else answer is wrong\n    else{\n      if(!this.attempted){\n        this.parentStep.parentExercise.curAvailScore += this.points;\n        this.attempted = true;\n      }\n\n      // if userAnswer is empty and parent step contains empty answers or the question is allowed empty answers\n      if(this.userAnswerIsEmpty && (this.parentStep.hasEmptyAnswer || this.el.closest(\'.question\').is(\'.emptyAnswerAllowed\'))){\n        // don\'t mark wrong because the user is allowed more attempts\n        // and if we mark this empty space wrong now, they\'ll know that this space is the correct one to put something in\n        this.markEl = $(\'\');\n      }\n\n      // else mark wrong\n      else{\n        this.markEl = $(\'<span class="mark wrong">Wrong!</span>\');\n      }\n    }\n\n    // insert the mark icon near the answer\n    var answerPos = this.el.position();\n\n    if (this.inputType == \'radioInput\' && this.el.find(\'.checked\').length)\n      this.markEl.insertAfter(this.el);\n    else if (this.inputType != \'radioInput\')\n      this.markEl.insertAfter(this.el);\n\n    if(this.el.is(\'.mapItem\')){\n      this.markEl\n        .css({\n          left: answerPos.left + this.el.width() - 5,\n          top: answerPos.top - 5\n        })\n    }\n  }\n\n  // traverse the logic \n  this.traverseLogic = function(theAnswer,userAnswer){\n    var str = \'\';\n\n    if(theAnswer.find(\'>.and,>.or,>.xor\').length){\n\n      theAnswer.find(\'>.and,>.or,>.xor\').each(function(){\n\n        if($(this).is(\'.and\')){         // and\n          logicOp = \'&&\';\n        }else if($(this).is(\'.or\')){    // or\n          logicOp = \'||\';\n        }else{                          // xor\n          logicOp = \'!=\';\n        }\n\n        if(!$(this).is(\':first-child\')){\n          str += logicOp;\n        }\n\n        if($(this).is(\'.xor\')){\n          str += \'!\';\n        }\n\n        var hasDeeperLogic = ($(this).find(\'>.and,>.or,>.xor\').length);\n\n        if(hasDeeperLogic) str += \'(\';\n        str += thisAnswer.traverseLogic($(this),userAnswer);\n        if(hasDeeperLogic) str += \')\';\n      });\n\n    }else{\n      // the answer contains an empty\n      this.hasEmpty   = this.hasEmpty || theAnswer == undefined || theAnswer.html() == \'\';\n\n      // compare answer values\n      str += this.compareAnswers(theAnswer.html(),userAnswer);\n    }\n\n    return str;\n  }\n\n  // compareAnswers\n  // \n  this.compareAnswers = function(theAnswer,userAnswer){\n\n    console.log(\'Comparing answers: \'+theAnswer+\' / \'+userAnswer)\n\n    // if answer should be a number or integer\n    if(this.el.is(\'.number,.integer\')){\n      userAnswer = parseFloat(userAnswer);    // treat userAnswer as number, not text\n      theAnswer = parseFloat(theAnswer);      // treat theAnswer as number, not text\n\n      if(this.tolerance !== false){\n        if(this.min === false) this.min = theAnswer - this.tolerance;\n        if(this.max === false) this.max = theAnswer + this.tolerance;\n      }\n\n      console.log(\'tolerance: \'+this.tolerance+\' / min: \'+this.min+\' / max:\'+this.max);\n    }\n    // the answer is not empty and user\'s answer is empty then it\'s wrong\n    if(!(theAnswer == undefined || theAnswer == \'\') && (userAnswer == undefined || userAnswer == \'\')){\n      return false;\n    }\n\n    // answer and userAnswer are both empty then it\'s correct\n    else if((theAnswer == undefined || theAnswer == \'\') && (userAnswer == undefined || userAnswer == \'\')){\n      return true;\n    }\n\n    // answer is correct\n    else if((this.min != false && userAnswer >= this.min && userAnswer <= this.max) || theAnswer == userAnswer){\n      return true;\n    }\n\n    // else answer is wrong\n    else{\n      return false;\n    }\n  }\n\n  /*\n   *  reveal\n   *\n   *  display this answer\n   */\n  this.reveal = function(){\n    var answer = this;\n\n    this.el.each(function(){\n      var firstAnswer = thisAnswer.firstAnswer(answer.value);\n\n      if($(this).hasClass(\'textInput\')){\n        $(this).val(firstAnswer);\n      }else if($(this).hasClass(\'radio\')){\n        $(this).find(\'.radioItem\')\n          .removeClass(\'checked\')\n          .each(function(){\n            // if this is the answer, check-it and add \'revealed\' class\n            if(firstAnswer == $(this).find(\'input:radio\').val()){\n              $(this).find(\'input:radio\').prop(\'checked\',true);\n              $(this).addClass(\'revealed\');\n            }\n          });\n\n\n      }else if($(this).hasClass(\'checkbox\')){\n\n        $(this).find(\'.checkboxItem\').removeClass(\'checked\');\n        $(this).find(\'input:checkbox\').prop(\'checked\',false);\n\n        var cAnswer = $(\'<div>\'+firstAnswer+\'</div>\');\n        // if no "and" than create a single one\n        if(!cAnswer.find(\'.and\').length){\n          var answerArray = answer.value.split(\'+\');\n          cAnswer = $(\'<div><span class="and">\'+answerArray.join(\'</span><span class="and">\')+\'</span></div>\');\n        }\n\n        cAnswer.find(\'.and\').each(function(){\n          var ansVal = $(this).text();\n          answer.el.find(\'input:checkbox[value=\'+ansVal+\']\')\n            .prop(\'checked\',true)\n            .closest(\'.checkboxItem\')\n              .addClass(\'revealed\');\n        });\n\n      }else{  // else must be click or drag\n\n        var choiceFound = false;\n\n        // if there is an answer && not multiClick||multiDrop && there are choices, look up the correct choice\n        if(firstAnswer != \'\' && !answer.el.is(\'.multiClick,.multiDrop\') && answer.parentStep.choicesEl.length){\n          for(i in answer.parentStep.choices.choice){\n            var choice = answer.parentStep.choices.choice[i];\n            console.log(choice.value+\' / \'+firstAnswer);\n            if(choice.value == firstAnswer){\n              $(this).html(choice.result);\n              choiceFound = true;\n              break;\n            }\n          }\n          if(!choiceFound){ error(\'Choice not found for answer!\') }\n        }else{\n          $(this).html(firstAnswer);\n        }\n\n      }\n\n      $(this).next(\'.mark\').remove();\n\n      if(firstAnswer != \'\'){\n        // insert the mark icon\n        var markEl = $(\'<span class="mark shown" title="Your first attempt was wrong, this is the correct answer">That\\\'s it!</span>\');\n        $(this).after(markEl);\n\n        // position mark icon near the answer\n        var answerPos = $(this).position();\n        if($(this).is(\'.mapItem\')){\n          markEl\n            .css({\n              left: answerPos.left + $(this).width() - 5,\n              top: answerPos.top - 5\n            })\n        }\n      }\n    });\n  }\n\n  this.firstAnswer = function(theAnswer){\n    if($(\'<div>\'+theAnswer+\'</div>\').find(\'>.or\').length){\n      return $(\'<div>\'+theAnswer+\'</div>\').find(\'>.or:first-child\').html();\n    }else{\n      return theAnswer;\n    }\n  }\n\n  // if theAnswer contains class="and" tags\n  // then return a string like \'value1+value2+value3\'\n  // else return theAnswer string untouched\n  this.answerString = function(theAnswer){\n    var cAnswer = $(\'<div>\'+theAnswer+\'</div>\');\n    // if answer has more than one checkbox then create answer string \n    // because the <and> tags can be any order we need to make the answer string in the same order as the inputs\n    if(cAnswer.find(\'.and\').length){\n      var answerArray = new Array();\n      this.el.find(\'input\').each(function(){\n        var thisInput = $(this);\n        cAnswer.find(\'.and\').each(function(){\n          // if this \'and\' value matches the input value then push it real good\n          if(thisInput.val() == $(this).text()){\n            answerArray.push($(this).text());\n          }\n\n        });\n      });\n      theAnswer = answerArray.join(\'+\');  // theAnswer will be like \'value1+value2+value3\'\n    }\n    return theAnswer;\n  }\n}\n\nfunction presentationObject(params){\n  this.el                 = params.el;\n  this.index              = params.index;\n\n  this.frames             = new Array();\n  this.frameSequence      = (this.el.find(\'.frames.sequence-nonlinear\').length) ? \'nonlinear\' : \'linear\';\n  this.startFrame         = (this.el.find(\'.frames\').attr(\'startframe\')) ? this.el.find(\'.frames\').attr(\'startframe\') : false;\n  this.currentFrame       = false;\n  this.keyframesN         = 0;\n  this.frameNames         = new Array();\n\n  this.controlPanelEl = $(\'<div class="control-panel"><button class="play-btn">&gt;</button><div class="keyframeBtns"></div><div class="playing system">Playing...</div></div>\');\n\n  var thisPres = this;\n\n  if(this.frameSequence == \'nonlinear\'){\n    this.controlPanelEl.find(\'.play-btn\').remove();\n  }else{\n    this.controlPanelEl.find(\'.play-btn\')\n      .click(function(){\n        thisPres.play();\n      });\n  }\n\n  this.controlPanelEl.prependTo(this.el); // insert control panel at top of presentation\n\n  this.initFrames = function() {\n    var frameIndex = 0;\n\n    //Calculate the maximun height and apply it to the container        \n    //resizePresentation();\n    //Initialize frames    \n    this.el.find(\'.frame\')\n            .attr(\'style\', thisPres.el.find(\'.frames\').attr(\'style\'))\n            .each(function() {\n      var thisFrame = $(this);\n\n      thisPres.frames.push(new frameObject({\n        el: thisFrame,\n        parentPres: thisPres,\n        index: frameIndex\n      }));\n\n      frameIndex++;\n    });\n  }\n\n  this.play = function(){\n    var curFrameIndex = this.currentFrame.index;\n\n    // if not the last frame then play\n    if(curFrameIndex < this.frames.length-1){\n      this.controlPanelEl.find(\'button\').prop(\'disabled\', true);\n      this.controlPanelEl.find(\'.playing\').css(\'visibility\',\'visible\');\n\n      if(curFrameIndex < this.frames.length-1){\n        var newFrame = this.frames[curFrameIndex+1];\n\n        newFrame.showFrame();\n      }\n    }\n  }\n\n  this.stop = function(){\n    // enable the control buttons\n    this.el.find(\'.control-panel button\').prop(\'disabled\', false);\n    this.controlPanelEl.find(\'.playing\').css(\'visibility\',\'hidden\');\n\n    // if is the last frame then disable play button\n    if(this.currentFrame.index == this.frames.length-1){\n      this.el.find(\'.control-panel .play-btn\').prop(\'disabled\', true);\n    }\n  }\n\n  this.initFrames();\n\n  if(this.startFrame){\n    this.frameNames[this.startFrame].showFrame();\n  }else{\n    // show first frame\n    this.frames[0].showFrame();  \n  }\n}\n\nfunction frameObject(params){\n  this.el                 = params.el;\n  this.parentPres         = params.parentPres;\n  this.index              = params.index;\n\n  this.keyframeBtnEl      = false;\n  this.isKeyframe         = this.el.is(\'.keyframe\');\n  this.transition         = classValue(\'transition-\',this.el.attr(\'class\'),\'crossfade\');\n  this.transitionDirection= classValue(\'direction-\',this.el.attr(\'class\'),\'down\');\n  this.action             = classValue(\'action-\',this.el.attr(\'class\'),\'stop\');\n\n  this.duration           = (this.el.find(\'.duration\').length && this.el.find(\'.duration\').text())\n              ? this.el.find(\'.duration\').text() : workbench.def.frameDuration;\n\n  this.transitionDuration = (this.el.find(\'.transition-duration\').length && this.el.find(\'.transition-duration\').text())\n                ? this.el.find(\'.transition-duration\').text() : workbench.def.transitionDuration;\n\n  this.trD = this.transitionDuration;\n\n  // convert seconds to milliseconds\n  this.duration           = parseFloat(this.duration)*1000;   \n  this.transitionDuration = parseFloat(this.transitionDuration)*1000;\n\n  this.label              = (this.el.find(\'.label\').length && this.el.find(\'.label\').html())\n              ? this.el.find(\'.label\').html() : false;\n\n  this.name               = (this.el.attr(\'name\'))?this.el.attr(\'name\'):false;\n\n  var thisFrame           = this;\n\n  if(this.name){\n    this.parentPres.frameNames[this.name] = this;\n  }\n\n  if(this.isKeyframe){\n    var kNum = ++this.parentPres.keyframesN;\n\n    this.keyframeBtnEl  = $(\'<button>\'+((this.label)?this.label:kNum)+\'</button>\');\n\n    this.keyframeBtnEl\n      .click(function(){\n        // if the sequence is linear then we don\'t show the transition on click\n        thisFrame.showFrame((thisFrame.parentPres.frameSequence == \'linear\'),true);\n      })\n      .appendTo(this.parentPres.el.find(\'.keyframeBtns\'));\n  }\n\n  /*\n   * showFrame\n   *\n   * Do transition from current frame to this frame\n   */\n  this.showFrame  = function(noTransition,isKeyframeClick){ \n\n\n    if(isKeyframeClick){\n      //When user clicks the same frame don\'t do any transition\n      if(thisFrame.parentPres.currentFrame && thisFrame.parentPres.currentFrame.index==this.index){  \n        return;\n      }\n      this.keyframeBtnEl.addClass(\'current\');\n    }    \n\n    this.el.find(\'img.playOnView\')\n      .each(function(){\n        var img = $(this);\n        var newImg = $(\'<img class="image newy playOnView"/>\')\n          .attr(\'src\',img.attr(\'src\')+"?fewfwe32")\n          .css(\'display\',\'inline\')\n          .insertAfter(img);\n\n        img.remove();\n      });\n\n    if(noTransition || this.transition == \'cut\'){\n      thisFrame.el.show();\n      if(thisFrame.parentPres.currentFrame){\n        this.parentPres.currentFrame.el.hide();\n      }\n      thisFrame.currentFrameReady();\n    }else{\n\n      switch(this.transition){\n        case \'fade\':\n          if(thisFrame.parentPres.currentFrame){\n            this.parentPres.currentFrame.el.fadeOut(thisFrame.transitionDuration,function(){\n              thisFrame.el.fadeIn(thisFrame.transitionDuration,function(){\n                thisFrame.currentFrameReady();\n              });\n            });\n          }else{\n            this.el.fadeIn(thisFrame.transitionDuration,function(){\n              thisFrame.currentFrameReady();\n            });\n          }\n          break;\n\n        case \'crossfade\':\n          if(thisFrame.parentPres.currentFrame){\n            // place the current frame above this frame\n            zAbove(thisFrame.parentPres.currentFrame.el,thisFrame.el);\n            this.el.show();           \n            // fade-out the current frame           \n            this.parentPres.currentFrame.el.fadeOut(thisFrame.transitionDuration,function(){\n              thisFrame.currentFrameReady();\n            });\n          }else{\n            this.el.fadeIn(thisFrame.transitionDuration,function(){\n              thisFrame.currentFrameReady();\n            });\n          }\n          break;\n\n        case \'dissolve\':\n          if(thisFrame.parentPres.currentFrame){\n            this.parentPres.currentFrame.el.fadeOut(thisFrame.transitionDuration);\n          }\n          this.el.fadeIn(thisFrame.transitionDuration,function(){\n            thisFrame.currentFrameReady();\n          });\n          break;\n\n        case \'wipe\':\n\n          // wipe down\n          if(thisFrame.transitionDirection == \'down\'){\n            if(thisFrame.parentPres.currentFrame){\n              // place this frame (the new frame) above the current frame\n              zAbove(thisFrame.el,thisFrame.parentPres.currentFrame.el);\n            }\n            thisFrame.el.slideDown(thisFrame.transitionDuration,function(){\n              if(thisFrame.parentPres.currentFrame){\n                thisFrame.parentPres.currentFrame.el.hide();\n              }\n              thisFrame.currentFrameReady();\n            });\n          }\n\n          // wipe up\n          else{\n            if(thisFrame.parentPres.currentFrame){\n              // place the current frame above this frame (the new frame)\n              zAbove(thisFrame.parentPres.currentFrame.el,thisFrame.el);\n\n              thisFrame.el.show();\n              thisFrame.parentPres.currentFrame.el.slideUp(thisFrame.transitionDuration,function(){\n                thisFrame.currentFrameReady();\n              });\n            }\n            // there is no current frame so we can\'t use it to slideUp, so just show new frame\n            // TODO: make this transition work as intended for 1st frames, but it\'s not a priority\n            else{\n              thisFrame.el.show();\n              thisFrame.currentFrameReady();\n            }\n          }\n          break;\n      }\n    }\n  }\n\n  // remove the styling on the current frame\n  this.leavingCurrentFrame = function(){\n    if(this.parentPres.currentFrame){\n      this.parentPres.currentFrame.el.removeClass(\'current\');\n      if(this.parentPres.currentFrame.isKeyframe){\n        this.parentPres.currentFrame.keyframeBtnEl.removeClass(\'current\');\n      }\n    }\n  }\n\n  /* currentFrameReady\n   * unset/set the current frame state\n   * then if action is \'play\', wait for duration and then play\n   */\n  this.currentFrameReady = function(){\n    this.leavingCurrentFrame();\n    thisFrame.parentPres.currentFrame = this;\n    if(this.parentPres.currentFrame.isKeyframe){\n      this.keyframeBtnEl.addClass(\'current\');\n    }\n    this.el.addClass(\'current\');\n\n    // if action is \'play\' then wait for duration and then play\n    if(this.action == \'play\'){\n      setTimeout(function(){thisFrame.parentPres.play()},this.duration);\n    }else{\n      this.parentPres.stop();\n    }\n  }\n}\n\nfunction NavObject(params){\n  this.moduleListEl   = $(\'<div class="moduleNavList navList"></div>\');\n  this.exerciseListEl = $(\'<div class="exerciseNavList navList"></div>\');\n\n  this.el = false;\n\n  this.buildNav = function(){\n\n    // first remove nav if it exists\n    $(\'nav,#nav\').remove();\n\n    // add nav elements\n    this.el = $(\'<nav id="nav"></nav>\');\n\n    this.moduleNavEl = $(\'\\\n      <div id="moduleNav" class="navSelector closed">\\\n        <table cellspacing="0" border="0" id="moduleNavHead" class="navHead"><tr>\\\n          <td><button id="prevModule" class="navPrev">&lt;</button></td>\\\n          <td class="navSelectTd"><button id="selectModule" class="navSelect">&nbsp;</button></td>\\\n          <td><button id="nextModule" class="navNext">&gt;</button></td>\\\n        </tr></table>\\\n      </div>\\\n    \');\n\n    this.exerciseNavEl = $(\'\\\n      <div id="exerciseNav" class="navSelector closed">\\\n        <table cellspacing="0" border="0" id="exerciseNavHead" class="navHead"><tr>\\\n          <td><button id="prevExercise" class="navPrev">&lt;</button></td>\\\n          <td class="navSelectTd"><button id="selectExercise" class="navSelect">&nbsp;</button></td>\\\n          <td><button id="nextExercise" class="navNext">&gt;</button></td>\\\n        </tr></table>\\\n      </div>\\\n    \');\n\n    this.el.append(this.moduleNavEl).append(this.exerciseNavEl);\n\n    $(\'#header\').append(this.el);\n\n  }\n\n  // build the menu\n  this.buildMenu = function(){\n\n    var menu = $(\'\\\n      <div id="menu">\\\n        <div id="menuTopRow" class="menuRow">\\\n          <a id="homeCrumb" class="crumb"></a>\\\n          <a id="optionsCrumb" class="crumb" href="javascript:void()">Options</a>\\\n        </div>\\\n        <div id="optionsMenu"></div>\\\n        <div id="menuBottomRow" class="menuRow">\\\n          <a id="subjectCrumb" class="crumb"></a>\\\n          <a id="learnGroupCrumb" class="crumb"></a>\\\n        </div>\\\n      </div>\\\n    \');\n\n    menu.find(\'#optionsCrumb\')\n      .click(function(){\n        if($(\'#optionsMenu\').css(\'display\') == \'none\'){\n          $(\'#optionsMenu\').fadeIn();\n          workbench.headerResize();\n        }else{\n          $(\'#optionsMenu\').hide();\n          workbench.headerResize();\n        }\n      });\n\n    menu.find(\'#optionsMenu\')\n      .append($(\'#login-logout\'));\n\n    var homeCrumb = $(\'#breadcrumbs li.page-home a\');\n    var subjectCrumb = $(\'#breadcrumbs li.page-subject a\');\n    var learnGroupCrumb = $(\'#breadcrumbs li.page-learning-type a\');\n\n    menu.find(\'#homeCrumb\')\n      .attr(\'href\',homeCrumb.attr(\'href\'))\n      .html($(\'#header h1:first\').html());\n\n    menu.find(\'#subjectCrumb\')\n      .attr(\'href\',subjectCrumb.attr(\'href\'))\n      .html(subjectCrumb.html());\n\n    menu.find(\'#learnGroupCrumb\')\n      .attr(\'href\',learnGroupCrumb.attr(\'href\'))\n      .html(learnGroupCrumb.html());\n\n    menu.prependTo($(\'#header\'));\n  }\n\n  this.init = function(){\n\n    var numExercises = workbench.cur.module.exercisesOrder.length;\n\n    // Build module nav\n    var modNavList  = $(\'<ul></ul>\');\n    for(i in workbench.modulesOrder){\n      var mod = workbench.modulesOrder[i];\n      var modNavItem = $(\'<li class="moduleItem\'+((mod.isLoaded)?\' selected\':\'\')+\'"><a href="\'+mod.url+\'">\'+mod.title+\'</a></li>\');\n      modNavItem.data(\'modId\',mod.id);\n\n      modNavList.append(modNavItem);\n    }\n\n    // Insert Module Group Titles\n    for(i in workbench.moduleGroups){\n      var modGroup = workbench.moduleGroups[i];\n      modNavList.find(\'li.moduleItem:eq(\'+modGroup.firstModuleIndex+\')\').before(\'<li class="modGroup">\'+modGroup.title+\'</li>\');\n    }\n\n    this.moduleListEl.append(\'<h2>List of Modules</h2>\');\n    this.moduleListEl.append(modNavList);\n\n    // Build exercise nav\n    var modPreface = $(\'<li class="mod-preface-link selected"><a href="mod-preface">\'+workbench.tit.modulePreface+\'</a></li>\');\n    modPreface.data(\'exeId\',\'mod-preface\');\n    var modPrefaceWrap = $(\'<ul></ul>\');\n    modPrefaceWrap.append(modPreface);\n    this.exerciseListEl.append(modPrefaceWrap);\n\n    if(numExercises){\n      var exeNavList = $(\'<ul></ul>\');\n      for(i in workbench.cur.module.exercisesOrder){\n        var exe = workbench.cur.module.exercisesOrder[i];\n        var exeNavItem = $(\'<li><a href="\'+exe.url+\'">\'+exe.title+\'</a></li>\');\n        exeNavItem.data(\'exeId\',exe.id);\n\n        exe.listEl = exeNavItem;\n\n        exeNavList.append(exeNavItem);\n      }\n\n      var modResults = $(\'<li class="mod-results-link selected"><a href="mod-results">\'+workbench.tit.moduleResults+\'</a></li>\');\n      modResults.data(\'exeId\',\'mod-results\');\n\n      this.exerciseListEl\n        .append(\'<h2>List of Exercises</h2>\')\n        .append(exeNavList)\n        .append(modResults)\n    }else{\n      this.exerciseListEl\n        .append(\'<h2>There are no exercises for this module.</h2>\')\n    }\n\n\n    // Add navLists to DOM\n    $(\'#moduleNav\').append(this.moduleListEl);\n    $(\'#exerciseNav\').append(this.exerciseListEl);\n    // $(\'#nav\').append($(\'<div id="navLists"></div\').append(this.moduleListEl).append(this.exerciseListEl));\n\n    // bind click event to module selector and display module name\n    $(\'#selectModule\')\n      .html(workbench.cur.module.title)\n      .click(function(){\n        workbench.nav.exerciseListHide();\n        if(workbench.nav.moduleListEl.css(\'display\')==\'none\'){\n          workbench.nav.moduleListShow();\n        }else{\n          workbench.nav.moduleListHide();\n        }\n      });\n\n    // bind click event to module list links\n    this.moduleListEl.find(\'a\')\n      .click(function(event){\n        // event.preventDefault();\n        workbench.nav.moduleListEl.find(\'.selected\').removeClass(\'selected\');\n        $(this).closest(\'li\').addClass(\'selected\');\n        $(\'#selectModule\')\n          .html($(this).html());\n        $(\'#moduleNav\')\n          .addClass(\'disablePrev disableNext loading\');\n        workbench.nav.moduleListHide();\n        $(\'#content,#exerciseNav\').hide();\n      });\n\n    // bind click to previous module button\n    $(\'#prevModule\')\n      .click(function(){\n        workbench.previousModule();\n      });\n\n    // bind click to next module button\n    $(\'#nextModule\')\n      .click(function(){\n        workbench.nextModule();\n      });\n\n    // Button: Go to first exercise \n    $(\'<button class="firstExerciseBtn">Go to first exercise &gt;</button>\')\n      .click(function(){\n        workbench.cur.module.nextExercise();\n      })\n      .appendTo(workbench.cur.module.el)\n      .focus();\n\n    // Button: Go to next module \n    $(\'<button class="nextModuleBtn">Go to next module &gt;</button>\')\n      .click(function(){\n        workbench.nextModule();\n      })\n      .appendTo(workbench.cur.module.el);\n\n\n    // bind click event to exercise selector    \n    $(\'#selectExercise\')\n      .html(workbench.tit.modulePreface)\n      .click(function(){ \n        if($(\'#exerciseNav\').is(\'.loading\')) return;\n\n        workbench.nav.moduleListHide();\n        if(workbench.nav.exerciseListEl.css(\'display\')==\'none\'){\n          workbench.nav.exerciseListShow();\n        }else{\n          workbench.nav.exerciseListHide();\n        }\n      });\n\n    // bind click event to exercise list links\n    this.exerciseListEl.find(\'a\')\n      .click(function(event){\n        event.preventDefault();\n        workbench.cur.module.showSection($(this).closest(\'li\').data(\'exeId\'));\n      });\n\n    // bind click to previous exercise button\n    $(\'#prevExercise\')\n      .click(function(){\n        workbench.cur.module.previousExercise();\n      });\n\n    // bind click to next exercise button\n    $(\'#nextExercise\')\n      .click(function(){\n        workbench.cur.module.nextExercise();\n      });\n\n\n    // init Controls\n\n    $(\'#checkBtn\')\n      .click(function(){\n        workbench.cur.module.curExercise.curStep.checkAnswers();\n      });\n    $(\'#showMeBtn\')\n      .click(function(){\n        workbench.cur.module.curExercise.curStep.revealAnswers();\n        workbench.cur.module.curExercise.curStep.el.find(\'.explainBtn\').trigger(\'click\');\n      });\n    $(\'#nextStepBtn\')\n      .click(function(){\n        workbench.cur.module.curExercise.nextStep();\n      });\n\n    $(\'#nextExerciseBtn\')\n      .click(function(){\n        workbench.cur.module.nextExercise();\n      });\n\n    $(\'#resultsSummaryBtn\')\n      .click(function(){\n        workbench.cur.module.showSection(\'mod-results\');\n      });\n  }\n\n  this.moduleListShow = function(){\n    workbench.nav.moduleNavEl.addClass(\'open\').removeClass(\'closed\');\n    workbench.nav.moduleListEl.fadeIn();\n    workbench.headerResize();\n  }\n\n  this.moduleListHide = function(){\n    workbench.nav.moduleNavEl.addClass(\'closed\').removeClass(\'open\');\n    this.moduleListEl.hide();\n    workbench.headerResize();\n  }\n\n  this.exerciseListShow = function(){\n    workbench.nav.exerciseNavEl.addClass(\'open\').removeClass(\'closed\');\n    workbench.nav.exerciseListEl.fadeIn();\n    workbench.headerResize();\n  }\n  this.exerciseListHide = function(){\n    workbench.nav.exerciseNavEl.addClass(\'closed\').removeClass(\'open\');\n    this.exerciseListEl.hide();\n    workbench.headerResize();\n  }\n\n}\n\nfunction curExerciseResourcePath(){\n    return workbench.cur.module.curExercise.resourcePath;\n}\n\n// place element e1 above element e2 on the z-axis\nfunction zAbove(e1,e2){\n  e1.css(\'z-index\',parseInt(e2.css(\'z-index\'))+1);\n}\n\n\nfunction whichClass(el,classes,defaultClass){\n  var cls = classes.split(/\\s+/);\n  for(var c in cls){\n    if(el.hasClass(cls[c])) return cls[c];\n  }\n  return defaultClass;\n}\n\nfunction classValue(prefix,classes,defaultValue){\n  if(!classes){return defaultValue}\n\n  var cls = classes.split(/\\s+/);\n  for(var c in cls){\n    var re = new RegExp(\'^\'+prefix);\n    if(cls[c].match(re)) return cls[c].replace(re,\'\');\n  }\n  return defaultValue;\n}\n\nfunction scrollToBottom(){\n  $(\'html,body\').animate({scrollTop:9999999}, \'slow\');\n}\nfunction error(msg){\n  alert(\'Error: \'+msg);\n}\nfunction report(msg){\n  console.log(\'Report: \'+msg);\n}\n\nfunction roundDec(n,dec) {\n  n = parseFloat(n);\n  if(!isNaN(n)){\n    if(!dec) var dec= 0;\n    var factor= Math.pow(10,dec);\n    return Math.floor(n*factor+((n*factor*10)%10>=5?1:0))/factor;\n  }else{\n    return n;\n  }\n}\n\n\n/**\n * Resize frame height so that the animations are visible\n */\nfunction resizePresentation() {\n\n    var display = $(".exercise").css("block");\n    $(".exercise").css("display", "block");\n    var sumHeight = 0;\n    var frameCount = 0;\n    $(\'.frames\').each(function() {\n        var frames = $(this);\n        var maxFrameHeight = 1;\n        frames.find(".frame") .each(function() {\n            frameCount+=1;\n            var thisFrame = $(this);\n\n            thisFrame.css("height", "");\n\n            var isVisible = thisFrame.is(":visible");\n            if (!isVisible) {\n                thisFrame.show();\n            }\n            maxFrameHeight = (maxFrameHeight > thisFrame.height()) ? maxFrameHeight : thisFrame.height();\n            sumHeight += maxFrameHeight;\n            if (!isVisible) {\n                thisFrame.hide();\n            }\n        });\n        console.log("Resizing presentation height to: " + maxFrameHeight + "px");\n        frames.css({\n            height: maxFrameHeight + maxFrameHeight / 2\n        });\n    });\n    $(".exercise").css({"display": \'display\', "padding-bottom": (sumHeight/frameCount)});\n    $(\'.frame\').css("position", "absolute");\n}\n'