b'blob 55035\x00if (!window.inventoryList)\n{\nvar list = {};\nvar genericList = {};\nvar nestedList = {};\nvar inventoryList = {};\n\ninventoryList.listUrls = $H();\ninventoryList.listenerElements = $H();\ninventoryList.cleanUpListeners = $H();\ninventoryList.ajaxRequestIds = $H();\n\n/**\n * called during an page onload to register clean-up logic for inventory list\n * related js objects. The registered function is called  during ajax reload\n *  before replacing the innerhtml of the list\n */\ninventoryList.addToCleanUpListener = function(listId,listenerFunc)\n{\n    inventoryList.cleanUpListeners.set(listId,listenerFunc);\n};\n\ninventoryList.DisplayController = Class.create();\ninventoryList.DisplayController.prototype =\n{\n   /**\n    *  inventory list in ajax mode registers all the event listeners for paging and sorting links\n    *  and list refresh based on the active filter search criterion\n    */\n  initialize: function( inventoryListContainerId,url,initPagingValue,initPageIndex,limitMaxNumOfItems,pageResultsMaxSize,totalResultsCount )\n  {\n     var listenerElements = [];\n     inventoryList.listUrls.set( inventoryListContainerId, url );\n     $$(\'#\' + inventoryListContainerId +\' .pagelink\' ).each(function(ele) {\n       if( $s(ele) )\n       {\n        Event.observe(ele, \'click\' ,inventoryList.ajaxPostOnClick.bindAsEventListener( this,inventoryListContainerId ));\n        listenerElements.push(ele);\n       }\n     });\n\n     $$(\'#\' + inventoryListContainerId +\' .sortheader\' ).each(function(ele) {\n       if( $s(ele) )\n       {\n        Event.observe(ele, \'click\' ,inventoryList.ajaxPostOnClick.bindAsEventListener( this,inventoryListContainerId ));\n        listenerElements.push(ele);\n       }\n     });\n\n     if(!limitMaxNumOfItems)\n     {\n       pageResultsMaxSize = -1;\n     }\n\n     var cardViewLinkElement = $s(inventoryListContainerId  + \'_cardViewLink\');\n     if (cardViewLinkElement)\n     {\n       Event.observe(cardViewLinkElement, \'click\' ,inventoryList.ajaxPostOnClick.bindAsEventListener( this,inventoryListContainerId ));\n       listenerElements.push(cardViewLinkElement);\n     }\n     var tableViewLinkElement = $s(inventoryListContainerId  + \'_tableViewLink\');\n     if (tableViewLinkElement)\n     {\n       Event.observe(tableViewLinkElement, \'click\' ,inventoryList.ajaxPostOnClick.bindAsEventListener( this,inventoryListContainerId ));\n       listenerElements.push(tableViewLinkElement);\n     }\n\n     var gopagingElement = $s(inventoryListContainerId  + \'_gopaging\');\n     if(gopagingElement)\n     {\n       Event.observe( gopagingElement, "click", inventoryList.onGoButtonClick.bindAsEventListener( this, inventoryListContainerId,\'numResults\', \'gopaging\', \'numResults\', initPagingValue, true, pageResultsMaxSize ) );\n       listenerElements.push(gopagingElement);\n     }\n\n     var goFieldElement = $s(inventoryListContainerId  + \'_numResults\');\n     if( goFieldElement )\n     {\n       Event.observe( goFieldElement, "keypress", inventoryList.onPageFieldEnter.bindAsEventListener( this, inventoryListContainerId, \'numResults\', \'gopaging\', \'numResults\', initPagingValue, true, pageResultsMaxSize ) );\n       listenerElements.push( goFieldElement );\n     }\n\n     gopagingElement = $s(inventoryListContainerId + \'_gobut_top\');\n     if( gopagingElement)\n      {\n         Event.observe( gopagingElement, "click", inventoryList.onGoButtonClick.bindAsEventListener( this, inventoryListContainerId,\'jump_top\', \'gobut_top\', \'pageIndex\', initPageIndex, true, pageResultsMaxSize ) );\n         listenerElements.push(gopagingElement);\n      }\n\n     goFieldElement = $s(inventoryListContainerId + \'_jump_top\');\n     if( goFieldElement )\n     {\n         Event.observe( goFieldElement, "keyup", inventoryList.onPageFieldEnter.bindAsEventListener( this, inventoryListContainerId, \'jump_top\', \'gobut_top\', \'pageIndex\', initPageIndex, true, pageResultsMaxSize ) );\n         listenerElements.push( goFieldElement );\n     }\n\n     gopagingElement = $s(inventoryListContainerId + \'_gobut_bot\');\n      if(gopagingElement)\n      {\n        Event.observe(gopagingElement, "click", inventoryList.onGoButtonClick.bindAsEventListener( this, inventoryListContainerId, \'jump_bot\', \'gobut_bot\', \'pageIndex\', initPageIndex, true, pageResultsMaxSize ) );\n        listenerElements.push(gopagingElement);\n      }\n\n      goFieldElement = $s(inventoryListContainerId + \'_jump_bot\');\n      if( goFieldElement )\n      {\n          Event.observe( goFieldElement, "keyup", inventoryList.onPageFieldEnter.bindAsEventListener( this, inventoryListContainerId, \'jump_bot\', \'gobut_bot\', \'pageIndex\', initPageIndex, true, pageResultsMaxSize ) );\n          listenerElements.push( goFieldElement );\n      }\n\n      var showAllElement = $s(inventoryListContainerId  + \'_showAllButton\');\n      if(showAllElement)\n      {\n        Event.observe( showAllElement, "click", inventoryList.onShowallButtonClick.bindAsEventListener( this, pageResultsMaxSize, totalResultsCount ) );\n        listenerElements.push(showAllElement);\n      }\n\n      inventoryList.listenerElements.set(inventoryListContainerId,listenerElements);\n\n  }\n\n};\n/**\n * "all" cached js objects for "anything" inside the list area that is being replaced needs to be cleaned up.\n *  At early design time we knew of one concrete example (any hiddenDivs associated with context menus inside the inventory list)\n *  but we need exhaustive in-depth code tracing/review to make sure that we clean up everything else.\n *  TODO :comment for \'future js cleanup to be added when required\'\n *  This method is called during an ajax reload before replacing the innerhtml of the list.\n */\ninventoryList.cleanUp = function(id){\n  var listeners = inventoryList.listenerElements.get(id);\n  if(listeners) {\n  listeners.each(function(ele) {\n    if( $s(ele) )\n    {\n     $(ele).stopObserving( \'click\' );\n    }\n  });\n  inventoryList.listenerElements.unset(id);\n  }\n  var cleanUpFunction = inventoryList.cleanUpListeners.get(id);\n  if(cleanUpFunction){\n    cleanUpFunction.apply();\n  inventoryList.cleanUpListeners.unset(id);\n  }\n  list.checkboxes.unset(id);\n  list.radioButtons.unset(id);\n};\n/**\n * This method calculates the ajax post request url\n */\ninventoryList.getListUrl = function(event,id, retainSortingAndPaging)\n{\n  var listUrl = null;\n  var params = null;\n  var url;\n  if(event)\n  {\n    // paging and sorting ajax refresh\n    var eventElement = Event.element( event );\n    var hrefElement = eventElement.up(\'a\') || eventElement;\n    url = hrefElement.href ;\n    hrefElement.href = "#";\n    if( !url )\n    { // return if there is no url to work with\n      return url;\n    }\n    params = url.toQueryParams();\n  }\n  else\n  {\n    // active filter ajax refresh\n    url = inventoryList.listUrls.get( id );\n    if( !url )\n    { // return if there is no url to work with\n      return url;\n    }\n    params = url.toQueryParams();\n    // using $H(params).unset(\'key\') did not seem to work for me. Hence using the old-style\n    if (!retainSortingAndPaging)\n    {\n      delete params[page.bundle.getString("numResults")];// reset the paging results to default or the one in session\n      delete params[page.bundle.getString("startIndex")];// reset the paging index to 0\n      delete params[page.bundle.getString("sortDir")];// reset the sorting sequence\n    }\n  }\n  // make sure to remove any lingering sc in request, even though the InventoryListHelper removes\n  // this param from list and sort url\n  delete params[page.bundle.getString("search.criterion")];\n  listUrl = url.split("?")[0] + "?" + $H( params ).toQueryString();\n  return listUrl;\n};\n/**\n *  This method does a ajax post request for all the onclick handlers registered\n *  to render the inventory list in ajax-mode. This included list paging, list column\n *  sorting and  active search filter triggers\n */\ninventoryList.ajaxPostOnClick = function(event, id, extraParams, retainSortingAndPaging)\n{\n    var container = $s(id);\n    inventoryList.cleanUp(id);\n    var listUrl = inventoryList.getListUrl(event,id,retainSortingAndPaging);\n    if(listUrl)\n    {\n        listUrl = listUrl +  "&" + page.bundle.getString("ajax.mode") + "=" + id ;\n\n        if ( typeof activeFilter != \'undefined\' && activeFilter )\n        {\n          var searchCriterion = activeFilter.getSearchCriteriaInstance(false).getSearchCriteriaAsXml();\n          if( searchCriterion && searchCriterion != \'\') // if empty , do not append.\n          {\n            listUrl = listUrl + "&"+ page.bundle.getString("search.criterion") +"=" + encodeURIComponent(searchCriterion) ;\n          }\n        }\n        var params = listUrl.toQueryParams();\n        if (extraParams)\n        {\n          for (var key in extraParams)\n          {\n            if ( extraParams.hasOwnProperty( key ) )\n            {\n              var val = extraParams[key];\n              if ( typeof val != "function" )\n              {\n                params[key] = val;\n              }\n            }\n          }\n        }\n        listUrl = listUrl.split("?")[0];\n\n        new Ajax.Request(listUrl,\n        {\n            method: \'post\',\n            parameters: params,\n            onCreate: function(response) {\n              var ajaxRequestCounter = inventoryList.ajaxRequestIds.get(id);\n              if ( !ajaxRequestCounter )\n              {\n                ajaxRequestCounter = 1;\n              }\n              else\n              {\n                ajaxRequestCounter++;\n              }\n              response.request.submittedCounter = ajaxRequestCounter;\n              inventoryList.ajaxRequestIds.set(id,ajaxRequestCounter);\n              document.body.style.cursor = \'progress\';\n              $(\'loadList\'+id ).show();\n            },\n            onComplete: function(response) {\n              var ajaxRequestCounter = inventoryList.ajaxRequestIds.get(id);\n              inventoryList.removeNotAllShownMsgIfExists();\n              if (ajaxRequestCounter == response.request.submittedCounter)\n              {\n                document.body.style.cursor = \'default\';\n                $(\'loadList\'+id ).hide();\n              }\n            },\n            onSuccess: function(transport, json) {\n            try\n             {\n                 var ajaxRequestCounter = inventoryList.ajaxRequestIds.get(id);\n                 if (ajaxRequestCounter == transport.request.submittedCounter)\n                 {\n                   // before refreshing the container, close all the context menu pop-ups that can be closed\n                   page.ContextMenu.closeAllContextMenus();\n                   var textString = inventoryList.LIST_AJAX_MODE_SUFFIX_MARQUEE_TEXT;\n                   var startString = inventoryList.LIST_AJAX_MODE_START_MARQUEE_TEXT + id+ textString;\n                   var endString = inventoryList.LIST_AJAX_MODE_END_MARQUEE_TEXT + id+ textString;\n                   var resultHtml = transport.responseText;\n                   var responseHtml = resultHtml.split(startString)[1].split(endString)[0];\n                   container.innerHTML =  responseHtml;\n                   // evaluate the inventory list related js on ajax refresh to re-initialize the event listeners for the list controls\n                   page.globalEvalScripts( responseHtml, false );\n                 }\n             }\n             catch ( e )\n             {\n               // exception message looks ugly for the end-user, hence use a more user-friendly message to indicate the ajax refresh failed\n                new page.InlineConfirmation("error", page.bundle.getString("list.inventory.ajax.mode.error"), false );\n             }\n         }.bind(this)\n      });\n    }\n    else\n    {\n      // debug message\n      new page.InlineConfirmation("error", page.bundle.getString("list.inventory.ajax.mode.list.url.error",listUrl), false );\n    }\n    if ( event )\n    {\n      Event.stop( event );\n    }\n};\n\ninventoryList.onShowallButtonClick = function( event, pageResultsMaxSize, totalResultsCount )\n{\n\n  if( pageResultsMaxSize != -1 && totalResultsCount > pageResultsMaxSize )\n  {\n      alert( page.bundle.getString( \'inventoryList.error.max.items.per.page.showall\', [ pageResultsMaxSize ] ) );\n      Event.stop( event );\n      return;\n  }\n};\n\ninventoryList.onPageFieldEnter = function( event, id, inputName, goButtonName, paramName, initValue, ajaxMode, pageResultsMaxSize )\n{\n  var key = event.keyCode || event.which;\n  if ( key == Event.KEY_RETURN )\n  {\n    inventoryList.onGoButtonClick(  event, id, inputName, goButtonName, paramName, initValue, ajaxMode, pageResultsMaxSize );\n    if ( event && !ajaxMode )\n    {\n      Event.stop( event );\n    }\n  }\n};\n\n/**\n * validates the go-page index before firing the ajax post for paging (in ajax mode only)\n * else a server request is generated\n */\ninventoryList.onGoButtonClick = function( event, id, inputName, goButtonName, paramName, initValue, ajaxMode, pageResultsMaxSize )\n{\n  var eventElement = Event.element( event );\n  var goButtonElement = $s( id + "_" + goButtonName );\n  var inputElem = $s( id + "_" + inputName );\n  var inputValue = inputElem.value;\n  var trimmedVal = inputValue.trim();\n  // added this check bcoz for numeric fields which are not required, this function was not working\n  if ( trimmedVal != "" )\n  {\n    var numVal = parseInt( trimmedVal, 10 );\n    if ( !isNaN( numVal ) )\n    {\n      if ( pageResultsMaxSize != -1 && numVal > pageResultsMaxSize )\n      {\n        alert( page.bundle.getString( \'inventoryList.error.max.items.per.page\', [ pageResultsMaxSize ] ) );\n        inputElem.value = initValue;\n        Event.stop( event );\n        return;\n      }\n\n      var url = goButtonElement.href + "&" + paramName + "=" + numVal;\n\n      eventElement.href = url;\n      if ( ajaxMode )\n      {\n        // make an ajax request\n        inventoryList.ajaxPostOnClick( event, id );\n      }\n      else\n      {\n        window.location.href = url;\n        Event.stop( event );\n      }\n    }\n    else\n    {\n      inputElem.value = initValue;\n      Event.stop( event );\n    }\n  }\n  else\n  {\n    if ( inputValue.length > 0 )\n    {\n      alert( JS_RESOURCES.getFormattedString( \'validation.number\', [ trimmedVal ] ) );\n    }\n    Event.stop( event );\n  }\n};\n\ninventoryList.displayNotAllShownMessage = function(listId)\n{\n  var msg = page.bundle.getString(\'listOptions.warn.not.all.shown\');\n  new page.NestedInlineConfirmation("bad", msg, false, $s(listId), true, undefined, undefined, false, false, undefined, undefined, false, "receipt_page_size" );\n};\n\n/**\n * If we\'ve clicked on Show All and too many results existed, we show a bad warning label to the user that not all rows are listed\n * if we refresh the paging, we need to remove that msg and this is the method to do it.\n */\ninventoryList.removeNotAllShownMsgIfExists = function()\n{\n  var receiptDiv = $( "receipt_page_size" );\n  if( receiptDiv )\n  {\n  receiptDiv.remove();\n  }\n};\n\n/**\n * This function allows a page to "refresh" the inventory list on demand, such as when a user\n * clicks a Search button. This is useful if the inventory list is in a frame and is connected\n * to a drawer and we can\'t use useWindowName for the drawer. Besides, it\'s Ajaxy.\n */\ninventoryList.refresh = function( params )\n{\n  inventoryList.ajaxPostOnClick( null, \'listContainer\', params, false );\n};\n\n\ninventoryList.CardController = Class.create();\ninventoryList.CardController.prototype =\n{\n    initialize: function( inventoryListContainer, checkboxName, areCheckboxesUsable )\n    {\n      this.containerId = inventoryListContainer;\n      this.checkboxName = checkboxName;\n      this.areCheckboxesUsable = areCheckboxesUsable;\n      $$(\'#\' + this.containerId +\' .block\' ).each(function(ele) {\n        if( $s(ele) )\n        {\n          var hoverElements = ele.getElementsByClassName(\'inventoryListCardHoverText\');\n          if (hoverElements && hoverElements.length > 0)\n          {\n            var hoverElement = hoverElements[0];\n            var hoverText = hoverElement.innerHTML;\n            hoverText = hoverText.trim();\n            if (hoverText.length > 0)\n            {\n              ele.title = hoverText;\n            }\n          }\n          var ckboxes = ele.getElementsBySelector("input[name="+this.checkboxName+"]");\n          if (ckboxes && ckboxes.length > 0)\n          {\n            ele.myCheckbox = ckboxes[0];\n            var eleToToggleCheckbox = ele;\n            if (this.areCheckboxesUsable)\n            {\n              var theMenu = ele.getElementsByClassName(\'inlineMenuItems\');\n              if (theMenu && theMenu.length > 0)\n              {\n                eleToToggleCheckbox = theMenu[0];\n              }\n            }\n            Event.observe(  eleToToggleCheckbox, "click", this.handleCellClick.bindAsEventListener( this, ele.myCheckbox ) );\n          }\n\n        }\n      }.bind(this));\n\n      $$(\'#\' + this.containerId +\' .sortOrderMenu\').each(function(ele) {\n        if ($s(ele))\n        {\n          Event.observe(ele, "click", this.handleSortOrderMenuClick.bindAsEventListener(this, ele));\n        }\n      }.bind(this));\n\n      $$(\'#\' + this.containerId +\' .sortColumnMenu\').each(function(ele) {\n        if ($s(ele))\n        {\n          Event.observe(ele, "click", this.handleSortColumnMenuClick.bindAsEventListener(this, ele));\n        }\n      }.bind(this));\n\n    },\n\n    handleSortOrderMenuClick: function( event, link )\n    {\n      var menu = $(this.containerId + \'_sortOrderMenu\');\n      var otherMenu = $(this.containerId + \'_sortColumnsMenu\');\n      this.toggleMenu(menu, otherMenu, link);\n    },\n\n    handleSortColumnMenuClick: function( event, link )\n    {\n      var menu = $(this.containerId + \'_sortColumnsMenu\');\n      var otherMenu = $(this.containerId + \'_sortOrderMenu\');\n      this.toggleMenu(menu, otherMenu, link);\n    },\n\n    toggleMenu: function(menu, otherMenu, link)\n    {\n      if (menu && otherMenu && link)\n      {\n        otherMenu.hide();\n        this.positionRelativeToLink(menu, link);\n        menu.toggle();\n      }\n    },\n\n    positionRelativeToLink: function(ele, link)\n    {\n      var dims = link.getDimensions();\n      var leftOffset = "-" + dims.width + "px";\n      var topOffset = (dims.height) + "px";\n      ele.setStyle({ left: leftOffset, top: topOffset, \'margin-right\': leftOffset, position: \'relative\' });\n\n      var eleWidth = ele.getWidth();\n\n      var absLeft = link.parentElement.offsetLeft;\n      var parentWidth = link.parentElement.getWidth();\n      if ( eleWidth > parentWidth )\n      {\n        absLeft = absLeft - (eleWidth - parentWidth);\n      }\n      if (absLeft < 0)\n      {\n        absLeft = 0;\n      }\n      var absTop = link.offsetTop + dims.height;\n      ele.setStyle( { left: absLeft + "px", top: absTop + "px", \'margin-right\': \'auto\', position: \'absolute\'});\n    },\n\n    handleCellClick: function( event, ckbox )\n    {\n      // In card view you can only ever have one cell checked at a time.\n      $$(\'#\' + this.containerId + \' input[name=\'+this.checkboxName+\']\').each(function (ck) {\n        ck.checked = false;\n      });\n      ckbox.checked = true;\n    }\n};\n /************************************inventory List PagingController***********************************************************************************/\ninventoryList.PagingController = Class.create();\ninventoryList.PagingController.prototype =\n{\n    initialize: function( inventoryListContainer, initPagingValue, initPageIndex, inAjax, limitMaxNumOfItems, pageResultsMaxSize, totalResultsCount )\n    {\n      this.containerId = inventoryListContainer;\n      this.initPagingValue = initPagingValue;\n      this.initPageIndex = initPageIndex;\n\n      if(!limitMaxNumOfItems)\n      {\n        pageResultsMaxSize = -1;\n      }\n\n        if( $s( this.containerId  + \'_openpaging\') ) { Event.observe(  this.containerId + \'_openpaging\', "click", this.onOpenPagingClick.bindAsEventListener( this ) ); }\n        if( $s( this.containerId  + \'_closepaging\') ) { Event.observe(  this.containerId + \'_closepaging\', "click", this.onClosePagingButtonClick.bindAsEventListener( this ) ); }\n\n        if( $s( this.containerId  + \'_currentpage_top\') ) { Event.observe(  this.containerId + \'_currentpage_top\', "click", this.showJumpPage.bindAsEventListener( this, \'top\' ) ); }\n        if( $s( this.containerId  +\'_closejump_top\') )  { Event.observe(  this.containerId + \'_closejump_top\', "click", this.hideJumpPage.bindAsEventListener( this, \'top\' ) ); }\n\n        if( $s( this.containerId  + \'_currentpage_bot\') ) { Event.observe(  this.containerId + \'_currentpage_bot\', "click", this.showJumpPage.bindAsEventListener( this, \'bot\' ) ); }\n        if( $s( this.containerId  + \'_closejump_bot\') ) { Event.observe(  this.containerId + \'_closejump_bot\', "click", this.hideJumpPage.bindAsEventListener( this, \'bot\' ) ); }\n\n        if(!inAjax )// register only once in ajax Mode.\n        {\n          if( $s( this.containerId  + \'_numResults\') ) { Event.observe(  this.containerId + \'_numResults\', "keypress", inventoryList.onPageFieldEnter.bindAsEventListener( this,this.containerId,\'numResults\', \'gopaging\', \'numResults\', this.initPagingValue, inAjax, pageResultsMaxSize ) ); }\n          if( $s( this.containerId  + \'_gopaging\') ) { Event.observe(  this.containerId + \'_gopaging\', "click", inventoryList.onGoButtonClick.bindAsEventListener( this,this.containerId,\'numResults\', \'gopaging\', \'numResults\', this.initPagingValue, inAjax, pageResultsMaxSize ) ); }\n          if( $s( this.containerId  + \'_gobut_top\') ) { Event.observe(  this.containerId + \'_gobut_top\', "click", inventoryList.onGoButtonClick.bindAsEventListener( this, this.containerId, \'jump_top\', \'gobut_top\', \'pageIndex\', this.initPageIndex, inAjax, pageResultsMaxSize ) ); }\n          if( $s( this.containerId  + \'_gobut_bot\') ) { Event.observe( this.containerId + \'_gobut_bot\', "click", inventoryList.onGoButtonClick.bindAsEventListener( this, this.containerId, \'jump_bot\', \'gobut_bot\', \'pageIndex\', this.initPageIndex, inAjax, pageResultsMaxSize ) ); }\n          if( $s( this.containerId  + \'_jump_bot\') ) { Event.observe( this.containerId + \'_jump_bot\', "keyup", inventoryList.onPageFieldEnter.bindAsEventListener( this, this.containerId, \'jump_bot\', \'gobut_bot\', \'pageIndex\', this.initPageIndex, inAjax, pageResultsMaxSize ) ); }\n          if( $s( this.containerId  + \'_jump_top\') ) { Event.observe( this.containerId + \'_jump_top\', "keyup", inventoryList.onPageFieldEnter.bindAsEventListener( this, this.containerId, \'jump_top\', \'gobut_top\', \'pageIndex\', this.initPageIndex, inAjax, pageResultsMaxSize ) ); }\n          if( $s( this.containerId  + \'_showAllButton\') ) { Event.observe( this.containerId + \'_showAllButton\', "click", inventoryList.onShowallButtonClick.bindAsEventListener( this, pageResultsMaxSize, totalResultsCount ) ); }\n        }\n\n        // Remove the jump to page from the DOM until needed\n        var topJumpToPageEle = $(this.containerId + \'_jumptopage_top\');\n        var bottomJumpToPageEle = $(this.containerId + \'_jumptopage_bot\');\n        this.jumpToPage = {\n         top: topJumpToPageEle ? topJumpToPageEle.show().remove() : null,\n         bot: bottomJumpToPageEle ? bottomJumpToPageEle.show().remove() : null\n        };\n\n      },\n\n    onOpenPagingClick: function( event )\n    {\n        $( this.containerId  + \'_editpaging\').show();\n        $( this.containerId  + \'_itemcount\').hide();\n        $(this.containerId  + \'_numResults\').focus();\n        Event.stop( event );\n    },\n\n\n    onClosePagingButtonClick: function( event )\n    {\n      $(this.containerId + \'_numResults\').value = this.initPagingValue;\n      $(this.containerId + \'_editpaging\').hide();\n      $(this.containerId +\'_itemcount\').show();\n      Event.stop( event );\n    },\n\n    showJumpPage: function( event, loc )\n    {\n      var navPaging = $(this.containerId + \'_navpaging_\'+loc);\n      var jumpToPage = this.jumpToPage[ loc ];\n      var container = navPaging.up();\n      container.addClassName(\'jumptopage\');\n      container.appendChild( jumpToPage );\n      navPaging.hide();\n      (function() { $(this.containerId +\'_jump_\'+loc).focus(); }.bind(this).delay(0.1));\n      Event.stop( event );\n    },\n\n    hideJumpPage: function( event, loc )\n    {\n      var navPaging = $(this.containerId + \'_navpaging_\'+loc);\n      var jumpToPage = this.jumpToPage[ loc ];\n      navPaging.up().removeClassName(\'jumptopage\');\n      navPaging.show();\n      jumpToPage.remove();\n      Event.stop( event );\n    }\n};\n\nlist.checkboxes = $H();\nlist.radioButtons = $H();\n/**********************************************  List ActionBarController***********************************/\n\n/**\n * Controls checkboxes on an list\n */\nlist.ActionBarController = Class.create();\nlist.ActionBarController.prototype =\n{\n    initialize: function( listContainer, id, minSelected, onClick, errorMsg )\n    {\n        this.containerId = listContainer;\n        var titleElem = $s(listContainer + "_link_" + id);\n        if( titleElem )\n        {\n          Event.observe( titleElem, "click", this.onActionItemClick.bindAsEventListener( this, minSelected, onClick, errorMsg ) );\n        }\n    },\n\n    onActionItemClick: function( event, minSelected, onClick, errorMsg )\n    {\n      var thisCheckBoxes =  list.checkboxes.get(this.containerId);\n      var thisRadioButtons =  list.radioButtons.get(this.containerId);\n      var numSelected, i;\n      if( thisCheckBoxes.length !== 0 )\n      {\n        numSelected = 0;\n        for ( i = 0; i < thisCheckBoxes.length; i++ )\n        {\n          if ( thisCheckBoxes[i].type == \'checkbox\' && thisCheckBoxes[i].checked )\n          {\n            numSelected++;\n          }\n        }\n        if( numSelected >= minSelected )\n        {\n          if ( onClick !== undefined && ( onClick != "null" ) )\n          {\n            this.executeOnClick( event, onClick );\n          }\n        }\n        else\n        {\n          alert( errorMsg );\n          Event.stop( event );\n        }\n      }\n      else if( thisRadioButtons.length !== 0 )\n      {\n        // if radios are on the page instead of checkboxes, then there must be 1 and only 1 item selected to perform an action\n        numSelected = 0;\n        for ( i = 0; i < thisRadioButtons.length; i++ )\n        {\n           if ( thisRadioButtons[i].type == \'radio\' && thisRadioButtons[i].checked )\n           {\n                numSelected++;\n                break;\n           }\n        }\n        if( numSelected === 0 )\n        {\n            alert( errorMsg );\n            Event.stop( event );\n        }\n      }\n      // Case when checkboxes/radios does not exist, but request needs to be submitted.\n      // See InventoryListHelper.filterListActionBarRenderer where list action item is\n      // shown even when there are no items in the list with a checkbox/radio.\n      else if ( minSelected === 0 )\n      {\n        this.executeOnClick( event, onClick );\n      }\n    },\n\n    executeOnClick: function( event, onClick )\n    {\n      var func = new Function( onClick );\n      var result = func();\n      if( result === false )\n      {\n        Event.stop( event );\n      }\n    }\n};\n\n\n/************************************ List CheckboxRadioContainer***********************************************************************************/\n\nlist.checkboxAndRadio = {};\nlist.checkboxAndRadio.CheckboxRadioContainer = Class.create();\nlist.checkboxAndRadio.CheckboxRadioContainer.prototype =\n{\n\n  initialize: function( container )\n  {\n    this.isCardContainer = false;\n    this.isTableContainer = false;\n    this.container = container;\n    if (this.container.getElementsByTagName("tbody")[0])\n    {\n      this.isTableContainer = true;\n    }\n    else if (this.container.getElementsByClassName(\'inventoryListCardView\')[0])\n    {\n      this.isCardContainer = true;\n    }\n  },\n\n  getCheckboxOrRadioContainer: function()\n  {\n    if (this.isTableContainer)\n    {\n      return this.container.getElementsByTagName("tbody")[0];\n    }\n    else\n    {\n      return $("itemList");\n    }\n  },\n\n  getCheckboxOrRadioBoundaryTag: function()\n  {\n    if (this.isTableContainer)\n    {\n      return "tr";\n    }\n    else if (this.isCardContainer)\n    {\n      return "div";\n    }\n    else\n    {\n      return "li";\n    }\n  },\n\n  getItemCellTag: function()\n  {\n    if (this.isTableContainer)\n    {\n      return "td";\n    }\n    else if (this.isCardContainer)\n    {\n      return "div"\n    }\n    else\n    {\n      return "li";\n    }\n  },\n\n getItemCellClassTag: function()\n  {\n    if (this.isTableContainer || this.isCardContainer)\n    {\n      return "smallCell";\n    }\n    else\n    {\n      return "simple_mode";\n    }\n  }\n};\n\n\n/************************************ List CheckboxRadioController***********************************************************************************/\n\n\nlist.CheckboxRadioController = Class.create();\nlist.CheckboxRadioController.prototype =\n{\n    initialize: function( listContainer, hasSelectAll, isSelectAllFromList, listener )\n    {\n        this.containerId = listContainer;\n        this.container = $s(listContainer);\n        this.checkBoxAndRadioContainer = new list.checkboxAndRadio.CheckboxRadioContainer(this.container);\n        this.highColor = \'\';\n        this.emptyColor = \'\';\n        this.isSelectAllFromList = isSelectAllFromList;\n\n        var tableHeads = this.container.getElementsByClassName("inventoryListHead");\n         if( tableHeads.length > 0 )\n         {\n            this.selectAllCheckbox = tableHeads[0].getElementsByTagName("input")[0];\n            this.selectAllLabel = $s(this.containerId +"_selectAllLabel");\n            this.optionsWhileSelectAll = $s(this.containerId +"_optionsWhileSelectAll");\n\n            if( this.selectAllCheckbox )\n            {\n              if( this.selectAllCheckbox.checked )\n              {\n                this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.uncheckToDeselectAllItems\');\n              }\n              else\n              {\n                this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.checkToSelectAllItems\');\n              }\n            }\n          }\n          var myTempElement = $(this.containerId);\n          if( myTempElement )\n          {\n            myTempElement.addClassName( "high" );\n            this.highColor = myTempElement.getStyle(\'backgroundColor\');\n            myTempElement.removeClassName( "high" );\n          }\n\n          var checkBoxOrRadioContainer = this.checkBoxAndRadioContainer.getCheckboxOrRadioContainer();\n          if ( checkBoxOrRadioContainer )\n          {\n            Event.observe( checkBoxOrRadioContainer, "mouseover", this.onRowOver.bindAsEventListener( this ) );\n            Event.observe( checkBoxOrRadioContainer, "mouseout", this.onRowOut.bindAsEventListener( this ) );\n          }\n\n          // for shopping cart/ drawer integration\n          this.initializeStatusMsgArray();\n          this.initializeRemoveStatusMsgArray();\n          inventoryList.initCheckboxesAndRadioButtons(this.containerId, this.checkBoxAndRadioContainer);\n\n           var thisListcheckboxes = list.checkboxes.get(this.containerId);\n           var thisListradioButtons = list.radioButtons.get(this.containerId);\n\n            if( (thisListcheckboxes  && thisListcheckboxes.length !== 0) || ( thisListradioButtons && thisListradioButtons.length !== 0) )\n            {\n              if( thisListcheckboxes.length !== 0 )\n              {\n                if ( this.selectAllCheckbox )\n                {\n                  Element.show( this.selectAllCheckbox );\n                }\n                if ( this.selectAllLabel )\n                {\n                  Element.show( this.selectAllLabel );\n                }\n                if ( this.selectAllCheckbox )\n                {\n                  Event.observe( this.selectAllCheckbox, "click", this.onSelectAllClick.bindAsEventListener( this ) );\n                }\n              }\n\n              if (checkBoxOrRadioContainer)\n              {\n                Event.observe( checkBoxOrRadioContainer, "click", this.onCheckboxRadioOrRowClick.bindAsEventListener( this ) );\n              }\n           }\n           else\n           {\n                if (this.selectAllCheckbox )\n                {\n                  Element.hide( this.selectAllCheckbox );\n                }\n                if (this.selectAllLabel )\n                {\n                  Element.hide( this.selectAllLabel );\n                }\n           }\n           this.listener = listener;\n           if ( this.optionsWhileSelectAll )\n           {\n             if (hasSelectAll)\n             {\n               this.selectAllCheckbox.checked = true;\n               this.onSelectAllClick();\n               if (isSelectAllFromList)\n               {\n                 this.disableSelectAllCheckbox();\n                 document.getElementById(this.containerId + "_selectAllFromList" ).value = "true";\n               }\n             }\n             else\n             {\n               this.optionsWhileSelectAll.style.display="none";\n             }\n           }\n    },\n\n    onSelectAllClick: function( event )\n    {\n      if ( this.optionsWhileSelectAll )\n      {\n        if(this.selectAllCheckbox.checked)\n        {\n          var checkboxes = list.checkboxes.get(this.containerId);\n          var currentItemNumber = $( \'selectCurrentItemNumber\' );\n          if ( currentItemNumber )\n          {\n             currentItemNumber.innerHTML = checkboxes.length;\n          }\n          this.optionsWhileSelectAll.style.display="";\n        }\n        else\n        {\n          this.optionsWhileSelectAll.style.display="none";\n        }\n      }\n      this.toggleSelectAllCheckbox();\n      if(this.listener) {\n        if (this.selectAllCheckbox.checked)\n        {\n          this.showStatusMessage(this.selectAllCheckbox, true);\n        } else {\n          this.showRemoveStatusMessage(this.selectAllCheckbox, true);\n        }\n      }\n    },\n\n    initializeStatusMsgArray: function()\n    {\n      this.currentStatusMsgindex = -1;\n      this.statusMsgArray = [];\n      this.statusMsgArray[0] = {elem:$(\'status_msg0\')};\n      this.statusMsgArray[1] = {elem:$(\'status_msg1\')};\n      this.statusMsgArray[2] = {elem:$(\'status_msg2\')};\n      this.statusMsgArray[3] = {elem:$(\'status_msg3\')};\n      this.addAllStatusMsg = {elem:$(\'status_msg_addAll\')};\n    },\n\n    initializeRemoveStatusMsgArray: function()\n    {\n      this.currentRemoveStatusMsgindex = -1;\n      this.removeStatusMsgArray = [];\n      this.removeStatusMsgArray[0] = {elem:$(\'status_remove_msg0\')};\n      this.removeStatusMsgArray[1] = {elem:$(\'status_remove_msg1\')};\n      this.removeStatusMsgArray[2] = {elem:$(\'status_remove_msg2\')};\n      this.removeStatusMsgArray[3] = {elem:$(\'status_remove_msg3\')};\n      this.removeAllStatusMsg = {elem:$(\'status_msg_removeAll\')};\n    },\n\n    findAvailableStatusMsg: function(selectAll)\n    {\n      if(selectAll)\n      {\n        return this.addAllStatusMsg;\n      }\n      if(this.currentStatusMsgindex >= 3)\n      {\n        this.currentStatusMsgindex = -1;\n      }\n      this.currentStatusMsgindex = this.currentStatusMsgindex + 1;\n      return this.statusMsgArray[this.currentStatusMsgindex];\n\n    },\n\n    findAvailableRemoveStatusMsg: function(removeAll)\n    {\n      if(removeAll)\n      {\n        return this.removeAllStatusMsg;\n      }\n      if(this.currentRemoveStatusMsgindex >= 3)\n      {\n        this.currentRemoveStatusMsgindex = -1;\n      }\n      this.currentRemoveStatusMsgindex = this.currentRemoveStatusMsgindex + 1;\n      return this.removeStatusMsgArray[this.currentRemoveStatusMsgindex];\n\n    },\n\n    showStatusMessage: function( checkbox, selectAll )\n    {\n      var availableMsg = this.findAvailableStatusMsg(selectAll);\n      // Note : position cloning doesn\'t work in IE if the element has style \'display:none\'\n      availableMsg.elem.addClassName( \'hideoff\' );\n      availableMsg.elem.setStyle({display : \'block\'});\n      Position.clone(checkbox,availableMsg.elem,{ setLeft: true, setTop: true, setWidth: false, setHeight: false } );\n      if ( page.util.isRTL() ) {\n        availableMsg.elem.style.left = parseFloat(availableMsg.elem.style.left)-availableMsg.elem.getWidth() + "px";\n      }\n      availableMsg.elem.removeClassName( \'hideoff\' );\n      setTimeout(function(){this.fadeEffect(availableMsg);}.bind(this),100);\n    },\n\n    showRemoveStatusMessage: function( checkbox, removeAll )\n    {\n      var availableMsg = this.findAvailableRemoveStatusMsg(removeAll);\n      // Note : position cloning doesn\'t work in IE if the element has style \'display:none\'\n      availableMsg.elem.addClassName( \'hideoff\' );\n      availableMsg.elem.setStyle({display : \'block\'});\n      Position.clone(checkbox,availableMsg.elem,{ setLeft: true, setTop: true, setWidth: false, setHeight: false } );\n      if ( page.util.isRTL() ) {\n        availableMsg.elem.style.left = parseFloat(availableMsg.elem.style.left)-availableMsg.elem.getWidth() + "px";\n      }\n      availableMsg.elem.removeClassName( \'hideoff\' );\n      setTimeout(function(){this.fadeEffect(availableMsg);}.bind(this),100);\n    },\n\n    fadeEffect: function(statusMsgVar)\n    {\n      statusMsgVar.elem.fade();\n    },\n\n    onCheckboxRadioOrRowClick: function( event )\n    {\n        var eventElement = event ? Event.element( event ) : null;\n        if( !eventElement )\n        {\n          return;\n        }\n        var tagName = eventElement.tagName.toLowerCase();\n        var row = eventElement;\n        var fromNonSelectClick = false;\n        var fromContextMenuClick = false;\n        var checkboxOrRadioBoundaryTag = this.checkBoxAndRadioContainer.getCheckboxOrRadioBoundaryTag();\n        while ( row && row.tagName.toLowerCase() != checkboxOrRadioBoundaryTag )\n        {\n          if ( page.util.hasClassName( row, \'nonSelectContainer\' ) || this.isSelectAllFromList )\n          {\n            fromNonSelectClick = true;\n          }\n          if ( page.util.hasClassName( row, \'contextMenuContainer\' ) )\n          {\n            fromContextMenuClick = true;\n          }\n          row = row.parentNode;\n          if (row && row.tagName.toLowerCase() == \'body\' )\n          {\n            row = null;\n          }\n        }\n        if ( row && !fromNonSelectClick )\n        {\n          // Deselect all except the current row if this was a context menu click.\n          if ( fromContextMenuClick )\n          {\n              var currentRowCheckBox = row.down("input[type=\\"checkbox\\"]");\n              var currentRowRadioButton = row.down("input[type=\\"radio\\"]");\n\n              if ( currentRowCheckBox )\n              {\n                list.checkboxes.get(this.containerId).each( function( checkbox )\n                {\n                  var row1 = checkbox.parentNode.parentNode;\n                  if ( checkbox == currentRowCheckBox )\n                  {\n                    checkbox.checked = true;\n                    if ( row1 && row1.tagName.toLowerCase() == checkboxOrRadioBoundaryTag && this.checkBoxAndRadioContainer.isTableContainer )\n                    {\n                      row1.style.backgroundColor = this.highColor;\n                    }\n                  }\n                  else\n                  {\n                    checkbox.checked = false;\n                    if ( row1 && row1.tagName.toLowerCase() == checkboxOrRadioBoundaryTag && this.checkBoxAndRadioContainer.isTableContainer )\n                    {\n                      row1.style.backgroundColor = this.emptyColor;\n                    }\n                  }\n                }.bind( this ) );\n\n               if ( this.selectAllCheckbox )\n               {\n                 if ( list.checkboxes.get(this.containerId).length == 1 )\n                 {\n                   this.selectAllCheckbox.checked = true;\n                   this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.uncheckToDeselectAllItems\');\n                 }\n                 else\n                 {\n                   this.selectAllCheckbox.checked = false;\n                   this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.checkToSelectAllItems\');\n                 }\n               }\n             }\n             else if ( currentRowRadioButton )\n             {\n               currentRowRadioButton.checked = true;\n               this.resetRadioRowBackgroundColors( currentRowRadioButton );\n             }\n          }\n          // Just toggle the row\n          else if ( this.checkBoxAndRadioContainer.isTableContainer || tagName == \'input\' )\n          {\n            var isOnCheckboxRadio = ( tagName == \'input\' && eventElement.checked !== undefined );\n            // if we\'re clicking a link, do not check the checkbox assuming we\'re navigating away\n            // or meant to trigger some other actions rather than selecting an item\n            // this assumption may not be bullet proof but should be reasonable enough and\n            // the change prevents CS folders from accidentally being added to drawer or a file\n            // being added when users just wanted to view it\n            var needToToggleCheckboxRadio = !isOnCheckboxRadio && ( tagName != \'a\' );\n\n            var checkbox = (isOnCheckboxRadio) ? eventElement : row.down("input[type=\\"checkbox\\"]");\n            var radioButton = (isOnCheckboxRadio) ? eventElement : row.down("input[type=\\"radio\\"]");\n            var checkElement;\n            if ( checkbox )\n            {\n              checkElement = checkbox;\n            }\n            else if( radioButton )\n            {\n              checkElement = radioButton;\n            }\n            if ( checkElement && !checkElement.hasClassName( \'togglingDisabled\' ) )\n            {\n              this.toggleNormalCheckboxRadio( checkElement, needToToggleCheckboxRadio, row );\n              if ( radioButton )\n              {\n                // Reset the row background colors as only one radio button can be selected\n                // at any given time.\n                this.resetRadioRowBackgroundColors( radioButton );\n              }\n              if ( this.listener && ( needToToggleCheckboxRadio || isOnCheckboxRadio ) ) {\n                var checkElementName = checkElement.name;\n                if (checkElement.checked) {\n                  this.showStatusMessage(checkElement, false);\n                } else {\n                  this.showRemoveStatusMessage(checkElement, false);\n                }\n              }\n            }\n          }\n        }\n    },\n\n    resetRadioRowBackgroundColors: function( currentRadio )\n    {\n      var checkboxOrRadioBoundaryTag = this.checkBoxAndRadioContainer.getCheckboxOrRadioBoundaryTag();\n      var isTableContainer = this.checkBoxAndRadioContainer.isTableContainer;\n      // Reset the background color of all radio rows.\n      list.radioButtons.get(this.containerId).each( function( radio )\n      {\n        var row1 = radio.parentNode.parentNode;\n        if ( row1 && row1.tagName.toLowerCase() == checkboxOrRadioBoundaryTag && isTableContainer )\n        {\n          row1.style.backgroundColor = (radio === currentRadio) ? this.highColor : this.emptyColor;\n        }\n      }.bind( this ) );\n    },\n\n    onRowOver: function( event )\n    {\n        var row = Event.element( event );\n        while ( row && row.tagName.toLowerCase() != \'tr\' )\n        {\n          row = row.parentNode;\n          if ( row.tagName.toLowerCase() == \'body\' )\n          {\n            row = null;\n          }\n        }\n        if ( row )\n        {\n          Element.addClassName( row, \'gray\' );\n        }\n    },\n\n    onRowOut: function( event )\n    {\n        var row = Event.element( event );\n        while ( row && row.tagName.toLowerCase() != \'tr\' )\n        {\n          row = row.parentNode;\n          if ( row.tagName.toLowerCase() == \'body\' )\n          {\n            row = null;\n          }\n        }\n        if ( row )\n        {\n          Element.removeClassName( row, \'gray\' );\n        }\n    },\n\n    rowChangeClass : function(checkbox,row)\n    {\n      if ( row )\n      {\n        if ( checkbox.checked )\n        {\n          row.style.backgroundColor = this.highColor;\n        }\n        else\n        {\n          row.style.backgroundColor = this.emptyColor;\n        }\n      }\n\n    },\n\n    toggleNormalCheckboxRadio: function( checkboxRadio, needToToggleCheckboxRadio, row, noEventPropagation )\n    {\n        if ( needToToggleCheckboxRadio )\n        {\n            checkboxRadio.checked = !checkboxRadio.checked;\n        }\n\n        if ( row )\n        {\n          if ( checkboxRadio.checked )\n          {\n            row.style.backgroundColor = this.highColor;\n          }\n          else\n          {\n            row.style.backgroundColor = this.emptyColor;\n          }\n        }\n\n        // only applies to shopping cart - removing item from shopping cart\n        if( needToToggleCheckboxRadio && row && !checkboxRadio.checked && this.listener && noEventPropagation  )\n        {\n          this.showRemoveStatusMessage(checkboxRadio, false);\n        }\n\n        if( this.selectAllCheckbox )\n        {\n          var allSelected = true;\n          var thisCheckBoxes = list.checkboxes.get(this.containerId);\n          for ( var i = 0; i < thisCheckBoxes.length; i++ )\n          {\n             if ( !thisCheckBoxes[i].checked )\n             {\n               allSelected = false;\n               break;\n             }\n          }\n\n          if ( allSelected )\n          {\n              var currentItemNumber = $( \'selectCurrentItemNumber\' );\n              if ( currentItemNumber )\n              {\n                currentItemNumber.innerHTML = thisCheckBoxes.length;\n              }\n              this.selectAllCheckbox.checked = true;\n              if ( this.optionsWhileSelectAll )\n              {\n                this.optionsWhileSelectAll.style.display="";\n              }\n              this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.uncheckToDeselectAllItems\');\n          }\n          else\n          {\n              this.selectAllCheckbox.checked = false;\n              if ( this.optionsWhileSelectAll )\n              {\n                this.optionsWhileSelectAll.style.display="none";\n              }\n              this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.checkToSelectAllItems\');\n          }\n        }\n        if ( !noEventPropagation && this.listener )\n        {\n          this.listener( checkboxRadio );\n        }\n    },\n\n    toggleSelectAllCheckbox: function()\n    {\n        // toggle all the checkboxes based on the current state of the checkbox\n        if( this.selectAllCheckbox )\n        {\n          var checkboxes = list.checkboxes.get(this.containerId);\n          for ( var i=0; i < checkboxes.length; ++i )\n          {\n            checkboxes[ i ].checked = this.selectAllCheckbox.checked;\n            this.rowChangeClass(  checkboxes[i], Element.up(checkboxes[i],\'tr\'));\n            if ( this.listener )\n            {\n              this.listener( checkboxes[ i ] );\n            }\n          }\n          if ( this.selectAllCheckbox.checked )\n          {\n            this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.uncheckToDeselectAllItems\');\n          }\n          else\n          {\n            this.selectAllLabel.innerHTML = JS_RESOURCES.getString(\'list.checkToSelectAllItems\');\n          }\n        }\n    },\n    disableSelectAllCheckbox: function()\n    {\n        // toggle all the checkboxes based on the current state of the checkbox\n        if( this.selectAllCheckbox )\n        {\n          this.selectAllCheckbox.disabled = true;\n          var checkboxes = list.checkboxes.get(this.containerId);\n          for ( var i=0; i < checkboxes.length; ++i )\n          {\n            checkboxes[ i ].disabled = true;\n\n          }\n\n        }\n    }\n\n};\n\n\n/**********************************************  List global checkboxes / radiobuttons initialization***********************************/\ninventoryList.initCheckboxesAndRadioButtons = function( id, checkboxAndRadioContainer )\n{\n    if( !id )\n    {\n      id = "listContainer";\n    }\n    var container = $s(id);\n\n    var checkBoxAndRadioContainerTagName = \'td\';\n    var checkBoxAndRadioContainerClassName = \'smallCell\';\n    if ( checkboxAndRadioContainer )\n    {\n      checkBoxAndRadioContainerTagName = checkboxAndRadioContainer.getItemCellTag();\n      checkBoxAndRadioContainerClassName =  checkboxAndRadioContainer.getItemCellClassTag();\n    }\n\n    var tds = container.getElementsByTagName(checkBoxAndRadioContainerTagName);\n    var numTds = tds.length;\n    var checkboxes = [];\n    var radios = [];\n    for ( var i = 0; i < numTds; i++ )\n    {\n      var td = tds[i];\n      if ( page.util.hasClassName( td, checkBoxAndRadioContainerClassName ) )\n      {\n        list.populateCheckboxesAndRadioButtons(id,td,checkboxes,radios);\n      }\n    }\n\n    // select all <input type="checkbox"> elements that are inside <td class="smallCell">\n    list.checkboxes.set(id,checkboxes);\n    // select all <input type="radio"> elements that are inside <td class="smallCell">\n    list.radioButtons.set(id,radios);\n\n};\n/****************************************************** common methods shared by lists****************************************************/\n\n/*\n * Used when page loading is complete to enable checkbox/radio elements that are initially rendered disabled\n *\n * @param checkboxRadioValue if provided only the elements that has a matching value will be enabled\n */\ninventoryList.enableCheckboxesAndRadioButtons = function( id, checkboxRadioName, checkboxRadioValue )\n{\n  if( !id )\n  {\n    id = "listContainer";\n  }\n  var container = $s(id);\n\n  var checkBoxes;\n  if( checkboxRadioValue )\n  {\n    checkBoxes = container.select( \'input[value=\' + checkboxRadioValue + \']\' );\n  }\n  else\n  {\n    checkBoxes = container.select( \'input[name=\' + checkboxRadioName + \']\' );\n  }\n\n  for (var i=0, len=checkBoxes.length; i<len; i++)\n  {\n    if( !checkboxRadioValue || ( checkboxRadioValue && checkboxRadioName === checkBoxes[i].name ) )\n    {\n      checkBoxes[i].disabled = false;\n    }\n  }\n};\n\nlist.populateCheckboxesAndRadioButtons = function(id,ele,checkboxes,radios)\n{\n  var inputs = ele.getElementsByTagName(\'input\');\n  var numInputs = inputs.length;\n  for ( var j = 0; j < numInputs; j++ )\n  {\n    var input = inputs[j];\n    if ( input.type.toLowerCase() == \'checkbox\' )\n    {\n      checkboxes.push( input );\n    }\n    else if ( input.type.toLowerCase() == \'radio\' )\n    {\n      radios.push( input );\n    }\n  }\n\n};\n/*************************************************************** generic list controls***********************************************************************/\n\ngenericList.CheckboxRadioController = Class.create();\ngenericList.CheckboxRadioController.prototype =\n{\n    initialize: function( listContainer, listener )\n    {\n      this.containerId = listContainer;\n      this.container = $s(listContainer);\n     // content/canvas item list\n      if(  this.container )\n      {\n      this.selectAllCheckboxTop  = $s(this.containerId +"_selectAll_top");\n      this.clearAllCheckboxTop  = $s(this.containerId +"_clearAll_top");\n      this.selectAllCheckboxBot  = $s(this.containerId +"_selectAll_bot");\n      this.clearAllCheckboxBot  = $s(this.containerId +"_clearAll_bot");\n\n      genericList.initCheckboxesAndRadioButtons(this.containerId);\n\n        // content List items\n        if(this.selectAllCheckboxTop)\n        {\n           Event.observe( this.selectAllCheckboxTop, "click", this.selectAllCheckboxOnClick.bindAsEventListener( this ) );\n        }\n        if(this.selectAllCheckboxBot)\n        {\n           Event.observe( this.selectAllCheckboxBot, "click", this.selectAllCheckboxOnClick.bindAsEventListener( this ) );\n        }\n        if(this.clearAllCheckboxTop)\n        {\n           Event.observe( this.clearAllCheckboxTop, "click", this.clearAllCheckboxOnClick.bindAsEventListener( this ) );\n        }\n        if(this.clearAllCheckboxBot)\n        {\n           Event.observe( this.clearAllCheckboxBot, "click", this.clearAllCheckboxOnClick.bindAsEventListener( this ) );\n        }\n      }\n\n  },\n     selectAllCheckboxOnClick: function(event)\n     {\n          var checkboxes = list.checkboxes.get(this.containerId);\n          for ( var i=0; i < checkboxes.length; ++i )\n           {\n             checkboxes[ i ].checked = true;\n           }\n           if( event )\n           {\n             Event.stop(event);\n           }\n      },\n\n      clearAllCheckboxOnClick: function(event)\n      {\n           var checkboxes = list.checkboxes.get(this.containerId);\n           for ( var i=0; i < checkboxes.length; ++i )\n           {\n             checkboxes[ i ].checked = false;\n           }\n           if( event )\n           {\n             Event.stop(event);\n           }\n      }\n};\n\ngenericList.initCheckboxesAndRadioButtons = function(id)\n{\n    var checkboxes = [];\n    var radios = [];\n    var container = $s(id);\n    if(container)\n    {\n      var inputs =  container.getElementsByTagName(\'input\');\n      var num = inputs.length;\n      for ( var i = 0; i < num; i++ )\n      {\n        var input = inputs[i];\n        if ( ( page.util.hasClassName(input.parentNode, \'item\' ) ||\n               page.util.hasClassName(input.parentNode, \'smallCell\' ) ) &&\n             input.type.toLowerCase() == \'checkbox\' )\n        {\n          checkboxes.push( input );\n        }\n        else if ( ( page.util.hasClassName(input.parentNode, \'item\' ) ||\n                    page.util.hasClassName(input.parentNode, \'smallCell\' ) ) &&\n                  input.type.toLowerCase() == \'radio\' )\n        {\n          radios.push( input );\n        }\n      }\n   }\n    // select all <input type="checkbox"> elements that are inside <td class="smallCell">\n    list.checkboxes.set(id,checkboxes);\n    // select all <input type="radio"> elements that are inside <td class="smallCell">\n    list.radioButtons.set(id,radios);\n\n};\n\ngenericList.updateFilterTypes = function (name,suffix)\n{\n  var selectElements = document.getElementsByName(name);\n  var currentSelectElement = $ (name+\'_id\' + suffix);\n  selectElements[0].options[currentSelectElement.selectedIndex].selected=true;\n  selectElements[1].options[currentSelectElement.selectedIndex].selected=true;\n};\n/***************************************************************** nestedList controls********************************************************************/\n\nnestedList.CheckboxRadioController = Class.create();\nnestedList.CheckboxRadioController.prototype =\n{\n    initialize: function( id )\n    {\n        if( !id )\n        {\n          id = "listContainer";\n        }\n        this.containerId = id;\n        var checkboxes = document.getElementsByName("checkbox");\n        if( checkboxes.length !== 0 )\n        {\n          for ( var k = 0 ; k < checkboxes.length; k++ )\n          {\n            var contextMenu = $(checkboxes[k].parentNode).next().down( ".contextMenuContainer" );\n            if ( contextMenu )\n            {\n              Event.observe( contextMenu, "click", this.onCheckboxRadioOrRowClick.bindAsEventListener( this, checkboxes[k] ) );\n            }\n          }\n       }\n      // select all <input type="checkbox"> elements that are inside <td class="smallCell">\n      list.checkboxes.set(id,checkboxes);\n    },\n    onCheckboxRadioOrRowClick: function( event , x  )\n    {\n        var cbs = list.checkboxes.get(this.containerId);\n        for ( var k = 0 ; k < cbs.length; k++ )\n        {\n           cbs[k].checked = false;\n        }\n        x.checked = true;\n    }\n};\n\n}'