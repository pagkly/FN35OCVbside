b'blob 50417\x00#!/usr/bin/env python\n#ph3fn="pyhook-1.6.1-cp35-cp35m-win32.whl"\n#ph3downdir="\\\\$ph3fn"\n#ph3downlink="https://files.pythonhosted.org/packages/00/36/c08af743a671d94da7fe10ac2d078624f3efc09273ffae7b18601a8414fe/PyHook3-1.6.1-cp35-win32.whl"\n#curl -o "$ph3fn" "$ph3downlink"\nimport os, sys, threading\nimport _thread\nfrom FN33andlib import *\nfrom functools import partial\n\ndir0 = os.path.dirname(os.path.realpath(__file__))\ntextclick=0\npause=0\nis_recording=0\nlinuxpc=1\ndef Default():\n    textclick=0\n    pause=0\n    is_recording=0\nDefault()\ndef MouseGetPos():\n    if sys.platform in [\'linux\', \'linux2\']:\n        screenroot=display.Display().screen().root\n        pointer = screenroot.query_pointer()\n        data = pointer._data\n        x=data["root_x"]\n        y=data["root_y"]\n        return x, y\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        pass\nif sys.platform in [\'linux\', \'linux2\'] or sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n    def mouselu(event):\n        global textclick, clickStartX, clickStopX, clickStartY, clickStopY, objno2, Home\n        if pause==0 and not Home:\n            if sys.platform in [\'linux\', \'linux2\']:\n                clickX, clickY=MouseGetPos()\n            if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n                clickX, clickY=event.Position\n            if (textclick==0):\n                if (linuxpc==0) and os.path.exists("/run/user/1000/gvfs/*/Internal"):\n                    subprocess.call("adb shell \\"su -c \'input keyevent KEYCODE_ESCAPE && sleep 0.1 && killall com.fiistudio.fiinote\'\\"", shell=True)\n                clickStartX, clickStartY=clickX, clickY\n                ###print(clickStartX, clickStartY)\n                TT.config(text="C")\n                textclick=1\n            elif (textclick==1):\n                clickStopX, clickStopY=clickX, clickY\n                ###print(clickStopX, clickStopY)\n                clickStartX=int(clickStartX)\n                clickStartY=int(clickStartY)\n                clickStopX=int(clickStopX)\n                clickStopY=int(clickStopY)\n                if clickStartX<clickStopX :\n                    global curattachdirpc\n                    SS=SS1(clickStartX,clickStartY,clickStopX,clickStopY,curattachdirpc)\n                    ###print(SS)\n                    objno2,curattachdirpc=appendnewpic(SS[0],SS[1],SS[2],SS[3],SS[4],"nearlatest")\n                    imgdir=curattachdirpc+os.path.sep+SS[2]\n                    if (linuxpc==0) and os.path.exists("/run/user/1000/gvfs/*/Internal"):\n                        subprocess.call("adb push -p "+imgdir+" "+fnnotesanddirint+newdir1+".notz/attach",shell=True)\n                    TT.config(text="P")\n                    TT2.config(text=str(objno2))\n                    ##subprocess.call("adb shell su -c \'monkey -p com.fiistudio.fiinote -c android.intent.category.LAUNCHER 1\'", shell=True)\n                        ## \\"su -c \'killall com.fiistudio.fiinote\'\\"\n                    #except :\n                        ##TT.config(text="try")\n                    ##monkey -p com.fiistudio.fiinote.editor.Fiinote -c android.intent.category.LAUNCHER 1\n                else:\n                    TT.config(text="Rep")\n                textclick=0\n    def task2():\n        global root,TT,TT2\n        root=tk.Tk()\n        m = Button(root, text="Pause R", command=Suspend1,height=3,width=3)\n        m.pack()\n        newf = Button(root, text="New F", command=newnotz1,height=3,width=3)\n        newf.pack()\n        copyk = Button(root, text="copy", command=copykey,height=3,width=3)\n        copyk.pack()\n        pastek = Button(root, text="paste", command=pastekey,height=3,width=3)\n        pastek.pack()\n        restartgui=Button(root, text="restart", command=restartguifn,height=3,width=3)\n        restartgui.pack()\n        choosepdf=Button(root, text="choosepdf", command=choosepdfguiinit,height=3,width=3)\n        choosepdf.pack()\n        exitall=Button(root, text="exitsc", command=quit,height=1,width=3)\n        exitall.pack()\n        TT=Label(root, relief=\'raised\')\n        TT.pack()\n        TT2=Label(root)\n        TT2.pack()\n        #root.withdraw()\n        if sys.platform in [\'linux\', \'linux2\'] :\n            w = root.winfo_screenwidth()\n            h = root.winfo_screenheight()\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            w=GetSystemMetrics(0)\n            h=GetSystemMetrics(1)\n        x = w-70\n        y = h-(h*1300/1440)\n        wn=50\n        #hn=800\n        hn=int(0.7*h)\n        root.wm_attributes(\'-alpha\',0.50,\'-topmost\',1)\n        root.geometry(\'%dx%d+%d+%d\' % (wn, hn, x,y))\n        root.resizable(False, False)\n        root.update_idletasks()\n        root.overrideredirect(True)\n        Suspend1()\n        #MainApplication(rootimgv).pack(side="top", fill="both", expand=True)\n        root.mainloop()\n    def quit():\n        global root\n        root.quit()\n        sys.exit()\n        exit()\n        quit()\n        os.exit(0)\n    def restartguifn():\n        quit()\n        #if sys.platform in [\'linux\', \'linux2\'] :\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            subprocess.call("%USERPROFILE%\\\\Documents\\\\GitHub\\\\FN35OCVbside\\\\fn33andguistart.bat",shell=True)\n        return True\n    def choosepdfguiinit():\n        _thread.start_new_thread(choosepdfgui,())\n        #choosepdfgui()\n        return True\n    def ClearTT():\n        TT.config(text="")\n        return True\n    def copykey():\n        #if sys.platform in [\'linux\', \'linux2\'] :\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            import win32com.client as comclt\n            wsh=comclt.Dispatch("WScript.Shell")\n            #wsh.AppActivate("Notepad") # select another application\n            #wsh.AppActivate("%USERPROFILE%\\\\Documents\\\\Docs\\\\Automate\\\\FiiNoteWINE\\\\FiiNote.exe")\n            focusprog("FiiNote")\n            wsh.SendKeys("%{TAB}")\n            time.sleep(0.3)\n            wsh.SendKeys("^c") # send the keys you want\n    def pastekey():\n        #if sys.platform in [\'linux\', \'linux2\'] :\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            import win32com.client as comclt\n            wsh=comclt.Dispatch("WScript.Shell")\n            #wsh.AppActivate("%USERPROFILE%\\\\Documents\\\\Docs\\\\Automate\\\\FiiNoteWINE\\\\FiiNote.exe")\n            #focusprog("Atom")\n            focusprog("FiiNote")\n            wsh.SendKeys("%{TAB}")\n            time.sleep(0.3)\n            wsh.SendKeys("^v") # send the keys you want\n    def Suspend1():\n        global pause\n        if pause==0:\n            pause=1\n            TT.config(text="Suspended")\n            fiinotew10pcdir=userhomedir+"\\\\Documents\\\\Docs\\\\Automate\\\\FiiNoteWINE\\\\FiiNote.exe"\n            if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n               #subprocess.call("start \\"fiinote\\" \\""+fiinotew10pcdir+"\\"",shell=True)\n                pass\n        elif pause==1:\n            pause=0\n            TT.config(text="Resume")\n            if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n                #subprocess.call("taskkill /F /IM FiiNote.exe /T",shell=True)\n                pass\n    def newnotz1():\n        global newdir1,objno2\n        #newnotz0()\n        newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n        TT2.config(text="NEW")\n    def term(scriptn):\n        if sys.platform in [\'linux\', \'linux2\'] :\n            python_path=""\n            subprocess.call("python3 "+str(dir0)+"/"+str(scriptn)+".py", shell=True)\n            ###print(python_path+"sudo python3 "+str(dir0)+"/"+scriptn)\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            python_path=dir0+os.path.sep+"WinPython-32bit-3.5.3.1Qt5"+os.path.sep+"scripts"+os.path.sep\n            subprocess.call(python_path+"python "+str(dir0)+"\\\\"+str(scriptn)+".py", shell=True)\n            return True\n\ndef choosepdfgui0():\n    global rootimgv,Top,Mid,mfwidth,mfheight\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        userhomedir=subprocess.getoutput("echo %USERPROFILE%")\n    rootimgv = tk.Tk()\n    width = 600\n    height = 300\n    screen_width = rootimgv.winfo_screenwidth()\n    screen_height = rootimgv.winfo_screenheight()\n    x = (screen_width/2) - (width/2)\n    y = (screen_height/2) - (height/2)\n    rootimgv.geometry("%dx%d+%d+%d" % (width, height, x, y))\n    rootimgv.resizable(0, 0)\n    #================================FRAMES=========================================\n    mfwidth=500\n    mfheight=200\n    Top = Frame(rootimgv, width=mfwidth, bd=1, relief=SOLID)\n    Top.pack(side=TOP)\n    Mid = Frame(rootimgv, width=mfwidth, height=mfheight, bd=1, relief=SOLID)\n    Mid.pack_propagate(0)\n    Mid.pack(pady=20)\n    lbl_title = Label(Top, text="Python: Simple Image Viewer", width=mfwidth, font=("arial", 20))\n    lbl_title.pack(fill=X)\n    allfilesdir,allfilesname,allfilesfulldir=listfilesext(dir0,".pdf")\n    placebutton(allfilesdir,allfilesname,allfilesfulldir)\n    rootimgv.mainloop()\ndef choosepdfgui():\n    global Top,Mid,mfwidth,mfheight,Home1\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        userhomedir=subprocess.getoutput("echo %USERPROFILE%")\n    Home1=Toplevel()\n    width = 600\n    height = 300\n    screen_width = root.winfo_screenwidth()\n    screen_height = root.winfo_screenheight()\n    x = (screen_width/2) - (width/2)\n    y = (screen_height/2) - (height/2)\n    Home1.geometry("%dx%d+%d+%d" % (width, height, x, y))\n    Home1.resizable(0, 0)\n    #================================FRAMES=========================================\n    mfwidth=500\n    mfheight=200\n    Top = Frame(Home1, width=mfwidth, bd=1, relief=SOLID)\n    Top.pack(side=TOP)\n    Mid = Frame(Home1, width=mfwidth, height=mfheight, bd=1, relief=SOLID)\n    Mid.pack_propagate(0)\n    Mid.pack(pady=20)\n    lbl_title = Label(Top, text="Python: Simple Image Viewer", width=mfwidth, font=("arial", 20))\n    lbl_title.pack(fill=X)\n    allfilesdir,allfilesname,allfilesfulldir=listfilesext(dir0,".pdf")\n    placebutton(allfilesdir,allfilesname,allfilesfulldir,Top,Mid)\n#https://stackoverflow.com/questions/17466561/best-way-to-structure-a-tkinter-application\n#https://www.sourcecodester.com/tutorials/python/12128/python-simple-image-viewer.html\n#================================METHODS========================================\ndef changepage(pdfdir,pdfname,lastpage,ptype):\n    global Home1,Home,panel,panel1\n    if panel1:\n        panel1.destroy()\n    if panel:\n        panel.destroy()\n    if ptype=="prev":\n        choosepage=int(lastpage)-1\n    elif ptype=="next":\n        choosepage=int(lastpage)+1\n    ###print("lpcp="+str(choosepage))\n    DisplayImage(pdfdir,pdfname,choosepage,[])\n    return True\ndef choosepageguiinit(pdfdir,pdfname):\n    _thread.start_new_thread(partial(choosepagegui,pdfdir,pdfname),())\ndef choosepagegui(pdfdir,pdfname):\n    def show_entry_fields():\n        ###print("First Name: %s" % (e1.get()))\n        choosepage=int(e1.get())\n        DisplayImage(pdfdir,pdfname,choosepage,[])\n    ###print(pdfdir+" "+pdfname)\n    Home2=Toplevel()\n    Label(Home2, text="Page").grid(row=0)\n    e1 = Entry(Home2)\n    e1.grid(row=0, column=1)\n    Button(Home2, text=\'Show\', command=show_entry_fields).grid(row=3, column=0, sticky=W, pady=4)\ndef whitelistpagearea(page,x,y):\n    import cv2\n    return True\ndef progresspage(page):\n    return True\ndef progresspagewhitelist():\n    return True\ndef perccolor(imgdir):\n    #https://stackoverflow.com/questions/43167867/color-percentage-in-image-python-opencv-using-histogram\n    import numpy as np\n    import cv2\n    img = cv2.imread(imgdir)\n    brown = [145, 80, 40]  # RGB\n    diff = 20\n    boundaries = [([brown[2]-diff, brown[1]-diff, brown[0]-diff],\n                   [brown[2]+diff, brown[1]+diff, brown[0]+diff])]\n    # in order BGR as opencv represents images as numpy arrays in reverse order\n    for (lower, upper) in boundaries:\n        lower = np.array(lower, dtype=np.uint8)\n        upper = np.array(upper, dtype=np.uint8)\n        mask = cv2.inRange(img, lower, upper)\n        output = cv2.bitwise_and(img, img, mask=mask)\n\n        ratio_brown = cv2.countNonZero(mask)/(img.size/3)\n        ###print(\'brown pixel percentage:\', np.round(ratio_brown*100, 2))\n\n        cv2.imshow("images", np.hstack([img, output]))\n        cv2.waitKey(0)\n\n###bindkeyboardandmouse\n  ###http://effbot.org/tkinterbook/tkinter-events-and-bindings.htm\n  ##Example:http://www.java2s.com/Code/Python/Event/MouseeventsonaframeMouseclickedposition.htm\n  ##https://www.daniweb.com/programming/software-development/threads/364829/mouse-position-tkinter\n  ##class:https://stackoverflow.com/questions/3288047/how-do-i-get-mouse-position-relative-to-the-parent-widget-in-tkinter\n#https://www.reddit.com/r/learnpython/comments/gwrig/questions_about_getting_mouse_coordinates_in/\n#https://bytes.com/topic/python/answers/888796-how-get-x-coordinate-image\n#https://stackoverflow.com/questions/38428593/getting-the-absolute-position-of-cursor-in-tkinter\n#https://www.quora.com/In-Python-using-Tkinter-how-can-I-get-the-mouse-position-on-the-screen\n#print root.winfo_pointerxy()\nxpos1=""\nypos1=""\nxpos2=""\nypos2=""\ndef gettkinterxypos(eventorigin,convimgdir,wledimgdir,pdfdir,pdfname,lastpage,anglecorrection,imgw,imgh,showimgw,showimgh):\n    global pause,textclick\n    ###print(str(pause)+" "+str(textclick))\n    def callback():\n        global root\n        global textclick,pause,xpos1,ypos1,xpos2,ypos2\n        #global showimgw,showimgh\n        global newdir1,objno2,curattachdirpc\n        global Home\n        global xcorrection,ycorrection\n        #if pause==0:\n        #    x = eventorigin.x\n        #    y = eventorigin.y\n        #else:\n        #    pass\n        xcorrection=0\n        ycorrection=0\n        xandy=False\n        if pause==0 and textclick==0:\n            xpos1=eventorigin.x\n            ypos1=eventorigin.y\n            ###print(str(xpos1)+" "+str(ypos1))\n            textclick=1\n        elif pause==0 and textclick==1:\n            xpos2=eventorigin.x\n            ypos2=eventorigin.y\n            ###print(str(xpos2)+" "+str(ypos2))\n            if os.path.exists(wledimgdir):\n                global screenw,screenh\n                #imgw,imgh=imgsize(wledimgdir)\n                if screenw==1920 and screenh==1080:\n                    ycorrection=10\n                else:\n                    ycorrection=20\n                if anglecorrection==270:\n                    if ypos1>ypos2 and xpos2>xpos1:\n                        #xpos1ac=screenw-ypos1\n                        #xpos2ac=xpos1ac+(ypos1-ypos2)\n                        xpos1ac=imgw-ypos1\n                        xpos2ac=imgw-ypos2\n                        ypos1ac=xpos1\n                        ypos2ac=xpos2\n                        xcorrection=130\n                        xcorrection=60\n                        ycorrection=0\n                        xandy=True\n\n                    elif ypos2>ypos1 and xpos2>xpos1:\n                        #xpos1ac=screenw-ypos1\n                        #xpos2ac=xpos1ac+(ypos1-ypos2)\n                        xpos1ac=imgw-ypos2\n                        xpos2ac=imgw-ypos1\n                        ypos1ac=xpos1\n                        ypos2ac=xpos2\n                        xcorrection=130\n                        xcorrection=60\n                        ycorrection=0\n                    else:\n                        ###print("trya")\n                        return True\n                    actxp1=int(imgw/showimgw*xpos1ac)+xcorrection\n                    actyp1=int(imgh/showimgh*ypos1ac)+ycorrection\n                    actxp2=int(imgw/showimgw*xpos2ac)+xcorrection\n                    actyp2=int(imgh/showimgh*ypos2ac)+ycorrection\n                else:\n                    if screenh>screenw:\n                        ycorrection=0\n                    ###print(ycorrection)\n                    xpos1ac=xpos1\n                    xpos2ac=xpos2\n                    ypos1ac=ypos1\n                    ypos2ac=ypos2\n                    actxp1=int(imgw/showimgw*xpos1ac)\n                    actyp1=int(imgh/showimgh*ypos1ac)+ycorrection\n                    actxp2=int(imgw/showimgw*xpos2ac)\n                    actyp2=int(imgh/showimgh*ypos2ac)+ycorrection\n                ###print(actxp1,actxp2,actyp1,actyp2)\n            if (actxp2>actxp1 and actyp2>actyp1) or xandy:\n                SS=cutarea(pdfdir,pdfname,lastpage,actxp1,actyp1,actxp2,actyp2,convimgdir,anglecorrection)\n                ###print(SS)\n                objno2,curattachdirpc=appendnewpic(SS[0],SS[1],SS[2],SS[3],SS[4],"nearlatest")\n                imgdir=curattachdirpc+os.path.sep+SS[2]\n                if (linuxpc==0) and os.path.exists("/run/user/1000/gvfs/*/Internal"):\n                    subprocess.call("adb push -p "+imgdir+" "+fnnotesanddirint+newdir1+".notz/attach",shell=True)\n                    ##subprocess.call("adb shell su -c \'monkey -p com.fiistudio.fiinote -c android.intent.category.LAUNCHER 1\'", shell=True)\n                    ## \\"su -c \'killall com.fiistudio.fiinote\'\\"w\n                    #except :\n                    ##TT.config(text="try")\n                    ##monkey -p com.fiistudio.fiinote.editor.Fiinote -c android.intent.category.LAUNCHER 1\n                #TT.config(text="P")\n                #TT2.config(text=str(objno2))\n                loadimg=whitelistarea(pdfdir,pdfname,lastpage,actxp1,actyp1,actxp2,actyp2,wledimgdir)\n                DisplayImage(pdfdir,pdfname,lastpage,loadimg)\n            else:\n                #TT.config(text="Rep")\n                pass\n            textclick=0\n        else:\n            pass\n        print("objno2="+str(objno2))\n        if (objno2>=350):\n            newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n    callback()\n    return True\ndef cutarea(pdfdir,pdfname,lastpage,actxp1,actyp1,actxp2,actyp2,convimgdir,anglecorrection):\n    global curattachdirpc,newdir1,objno2\n    picname=strftime("%Y%m%d%H%M%S")+\'abcdefghijklmno.jpg\'\n    imgdir=curattachdirpc+os.path.sep+picname\n    ###print(convimgdir)\n    ###print(imgdir)\n    ###print(str(actyp1)+" "+str(actyp2)+","+str(actxp1)+":"+str(actxp2))\n    temp=cv2.imread(convimgdir)\n    img=temp[actyp1:actyp2,actxp1:actxp2]\n    cv2.imwrite(imgdir,img)\n    w,h=imgsize(imgdir)\n    ###print(str(w)+" "+str(h))\n    ###print(newdir1+" "+str(objno2))\n    return w,h,picname,newdir1,objno2\ndef whitelistarea(pdfdir,pdfname,lastpage,actxp1,actyp1,actxp2,actyp2,wledimgdir):\n    convimgdir=re.sub(r"wled","conv",wledimgdir)\n    image=cv2.imread(wledimgdir)\n    #imgh,imgw,channels=image.shape\n    #load2=np.zeros((imgh,imgw,4))\n    cv2.rectangle(image, (actxp1, actyp1), (actxp2, actyp2), white_color, -1)\n    #cv2.imwrite(wledimgdir, image)\n    #src=cv2.imread(wledimgdir)\n    src=image\n    tmp = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)\n    _,alpha = cv2.threshold(tmp,0,255,cv2.THRESH_BINARY)\n    b, g, r = cv2.split(src)\n    rgba = [b,g,r, alpha]\n    dst = cv2.merge(rgba,4)\n    cv2.imwrite(wledimgdir, dst)\n    ###print("donewlarea="+wledimgdir)\n    wledposfile=re.sub(r"wled","wledpos",wledimgdir)\n    wledposfile=re.sub(r"(.jpg|.png)","",wledposfile)\n    appendpos=str(actxp1)+","+str(actyp1)+","+str(actxp2)+","+str(actyp2)\n    ###print(appendpos)\n    appendtext(wledposfile,appendpos,"a")\n    return dst\n\ndef removelastlinefromfile(thefile):\n    #sys.argv[1]\n    file = open(thefile, "r+", encoding = "utf-8")\n    #Move the pointer (similar to a cursor in a text editor) to the end of the file.\n    file.seek(0, os.SEEK_END)\n    #This code means the following code skips the very last character in the file -\n    #i.e. in the case the last line is null we delete the last line\n    #and the penultimate one\n    pos = file.tell() - 1\n    #Read each character in the file one at a time from the penultimate\n    #character going backwards, searching for a newline character\n    #If we find a new line, exit the search\n    while pos > 0 and file.read(1) != "\\n":\n        pos -= 1\n        file.seek(pos, os.SEEK_SET)\n    #So long as we\'re not at the start of the file, delete all the characters ahead of this position\n    if pos > 0:\n        file.seek(pos, os.SEEK_SET)\n        file.truncate()\n    file.close()\n#https://mail.python.org/pipermail/python-list/2005-January/315395.html\ndef awk_it(instring,index,delimiter):\n  try:\n    return [instring,instring.split(delimiter)[index-1]][max(0,min(1,index))]\n  except:\n    return ""\n#https://docs.opencv.org/3.0-beta/doc/py_tutorials/py_core/py_basic_ops/py_basic_ops.html\n#https://stackoverflow.com/questions/14063070/overlay-a-smaller-image-on-a-larger-image-python-opencv\ndef undolatestwl(pdfdir,pdfname,convimgdir,wledimgdir,lastpage):\n    global Home\n    #imgtype="png"\n    #Home.destroy()\n    #wledimgdir=re.sub(r"conv","wled",convimgdir)\n    wledposfile=re.sub(r"conv","wledpos",convimgdir)\n    wledposfile=re.sub(r"(.jpg|.png)","",wledposfile)\n    with open(wledposfile, \'r\') as f:\n        try:\n            lines = f.read().splitlines()\n            last_line = lines[-1]\n            ###print("lastline="+last_line)\n        except:\n            last_line=""\n    if last_line!="" :\n        temp = cv2.imread(convimgdir)\n        ypos1=int(awk_it(last_line,2,","))\n        ypos2=int(awk_it(last_line,4,","))\n        xpos1=int(awk_it(last_line,1,","))\n        xpos2=int(awk_it(last_line,3,","))\n        img=temp[ypos1:ypos2+3,xpos1:xpos2+3]\n        target=cv2.imread(wledimgdir)\n        if ".png" in wledimgdir:\n            ###print("png")\n            ###print(str(xpos1),str(xpos2),str(ypos1),str(ypos2))\n            src=target\n            cv2.rectangle(src, (xpos1, ypos1), (xpos2+3, ypos2+3), black_color, -1)\n            tmp = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)\n            _,alpha = cv2.threshold(tmp,0,255,cv2.THRESH_BINARY)\n            b, g, r = cv2.split(src)\n            rgba = [b,g,r, alpha]\n            dst = cv2.merge(rgba,4)\n            cv2.imwrite(wledimgdir, dst)\n        if ".jpg" in wledimgdir:\n            target[ypos1:ypos2+3,xpos1:xpos2+3]=img\n        #imgwled=re.sub("wled","img",wledimgdir)\n        #newwled=re.sub("wled","newwled",wledimgdir)\n        #cv2.imwrite(imgwled,img)\n        #cv2.imwrite(newwled, target)\n            cv2.imwrite(wledimgdir, target)\n\n        file = open(wledposfile)\n        filetext=file.read()\n        ###print("readf="+str(filetext))\n        newwledpos=re.sub("\\n"+last_line,"",str(filetext))\n        ###print("nwwpos="+newwledpos)\n        appendtext(wledposfile,newwledpos,"w+")\n        #removelastlinefromfile(wledposfile)\n    DisplayImage(pdfdir,pdfname,lastpage,[])\n    return True\n    \nHome=""\nchoosepdfpagenext=""\nchoosepdfpageprev=""\nundowlarea=""\ncpageg=""\nrootimgv=""\npdfdir=""\npdfname=""\npdfdir0=""\npdfname0=""\nlastpage=""\nload=None\nimgh=None\nimgw=None\npanel=None\npanel1=None\ntouchpanel=None\nscreenw=None\nscreenh=None\nloadimg=None\nprevlastpage=None\nblack_color= (0, 0, 0, 255)\nwhite_color= (255, 255, 255, 255)\nred_color = (0, 0, 255, 255)\ngreen_color = (0, 255, 0, 255)\nblue_color = (255, 0, 0, 255)\nimport imutils\nfrom array import array\ndef DisplayImage(pdfdir,pdfname,choosepage,loadimg0,*args,**kwargs):\n    global root,hm\n    global Home1,Home,panel,panel1,touchpanel,pdfdir0,pdfname0,lastpage,convimgdir\n    global screenw,screenh,load\n    global imgh,imgw\n    global prevlastpage\n    from FN33andlib import conwindirtovwsldir,convertpdf2jpg2\n    #imgdir=convpdfdirpc+os.path.sep+"29.pdf"+os.path.sep+"conv0001.jpg"\n    #================================FRAMES=========================================\n    pdfdir0=pdfdir\n    pdfname0=pdfname\n    imgtype="png"\n    if Home1:\n        Home1.destroy()\n        Home1=""\n    if panel1:\n        panel1.destroy()\n        panel1=""\n    #if touchpanel:\n    #    touchpanel.destroy()\n    #    touchpabel=""\n    convpdfdirpcwithpdf=convpdfdirpc+os.path.sep+pdfname\n    if not choosepage:\n        if os.path.exists(convpdfdirpcwithpdf):\n            choosepage=curpage(pdfname,convpdfdirpcwithpdf)\n            if not choosepage:\n                choosepage=1\n        else:\n            choosepage=1\n    lastpage=choosepage\n    prevpage=lastpage-1\n    nextpage=lastpage+1\n    if prevpage>0:\n        previmgdir=convertpdf2jpg2(pdfdir,pdfname,120,prevpage,convpdfdirpcwithpdf,"")\n    nextimgdir=convertpdf2jpg2(pdfdir,pdfname,120,nextpage,convpdfdirpcwithpdf,"")\n\n    convimgdir=convertpdf2jpg2(pdfdir,pdfname,120,choosepage,convpdfdirpcwithpdf,"")\n    wledimgdir=re.sub(r"conv","wled",convimgdir)\n    wledimgdir=re.sub(r".jpg","."+imgtype,wledimgdir)\n    #imgdir=convimgdir\n    imgdir0=convimgdir\n\n    #try:\n    #    loadimg=loadimg0\n    #    load=loadimg\n    #    imgh, imgw, channels = load.shape\n    #except NameError:\n    #    load=cv2.imread(convimgdir)\n    #    imgh, imgw, channels = load.shape\n    #    ###print(\'a does not exist.\')\n    #except AttributeError:\n    #    load=cv2.imread(convimgdir)\n    #    imgh, imgw, channels = load.shape\n    #    ###print(\'a does not have a shape property.\')\n\n    #if not imgh:\n    if prevlastpage!=lastpage:\n        load=cv2.imread(convimgdir)\n        imgh, imgw, channels = load.shape\n    ###print(str(convimgdir),str(imgw))\n    if not os.path.exists(wledimgdir):\n        if imgtype=="jpg":\n            shutil.copy(convimgdir,wledimgdir)\n        if imgtype=="png":\n            #size = imgw, imgh, 4\n            #load1 = np.zeros(size, dtype=np.uint8)\n            load1=np.zeros((imgh,imgw,4))\n            load2=np.zeros((imgh,imgw,4))\n            cv2.rectangle(load1, (0, 0), (0, 0), white_color, 5)\n            cv2.rectangle(load2, (0, 0), (0, 0), white_color, 5)\n            res = load1[:] #copy the first layer into the resulting image\n            #copy only the pixels we were drawing on from the 2nd and 3rd layers\n            #(if you don\'t do this, the black background will also be copied)\n            cnd = load2[:, :, 3] > 0\n            res[cnd] = load2[cnd]\n            cv2.imwrite(wledimgdir, res)\n    if os.path.exists(wledimgdir):\n        #imgdir=wledimgdir\n        imgdir1=wledimgdir\n        ###print(imgdir1)\n        load1=cv2.imread(imgdir1)\n        if imgtype=="png":\n            src=load1\n            tmp = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)\n            _,alpha = cv2.threshold(tmp,0,255,cv2.THRESH_BINARY)\n            b, g, r = cv2.split(src)\n            rgba = [b,g,r, alpha]\n            load1 = cv2.merge(rgba,4)\n    ###print(imgdir1+" "+str(lastpage))\n\n    #global Home,panel,screenw,screenh\n    #global loadimg\n    if sys.platform in [\'linux\', \'linux2\'] :\n        screenw = Home.winfo_screenwidth()\n        screenh = Home.winfo_screenheight()\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        from win32api import GetSystemMetrics\n        screenw=GetSystemMetrics(0)\n        screenh=GetSystemMetrics(1)\n        hm.UnhookMouse()\n    \n    #load=PIL.Image.open(open(imgdir, \'rb\'))\n    #imgw, imgh = load.size\n    ###print(imgw,imgh)\n    global showimgw,showimgh\n    showimgw=int((screenh/imgh)*imgw)\n    showimgh=int(screenh)\n    if imgh>imgw and screenw>screenh and screenw==2160 and screenh==1440:\n        anglecorrection=270\n        if prevlastpage!=lastpage:\n            load=imutils.rotate_bound(load, anglecorrection)\n        load1=imutils.rotate_bound(load1, anglecorrection)\n        screenh=screenh-100\n        showimgwb=int((screenh/imgw)*imgh)\n        showimghb=int(screenh)\n        showimgw=showimghb\n        showimgh=showimgwb\n        x = (screenw/2) - (showimgwb/2)\n        y = (screenh/2) - (showimghb/2)\n    else:\n        anglecorrection=0\n        showimgwb=showimgw\n        showimghb=showimgh\n        x = (screenw/2) - (showimgwb/2)\n        y = (screenh/2) - (showimghb/2)\n    if screenh>screenw and imgh>imgw:\n        anglecorrection=0\n        #screenh=2160-100\n        #screenw=1440-100\n        screenh=screenh-100\n        screenw=screenw-100\n        showimgw=int(screenw)\n        showimgh=int((screenw/imgw)*imgh)\n        showimgwb=showimgw\n        showimghb=showimgh\n        x = (screenw/2) - (showimgwb/2)\n        y = (screenh/2) - (showimghb/2)\n        ###print(screenw,screenh)\n        ###print(showimgw,showimgh)\n\n    #load[load[:, :, 1:].all(axis=-1)] = 0\n    #load1[load1[:, :, 1:].all(axis=-1)] = 0\n    #dst = cv2.addWeighted(load, 1, load1, 1, 0)\n    if not Home:\n        ###print("not home")\n        Home=Toplevel()\n        Home.geometry("%dx%d+%d+%d" % (showimgwb, showimghb, x,y))\n        Home.resizable(1, 1)\n        pass\n    else:\n        ###print("home exists")\n        pass\n    #Home.geometry("%dx%d+%d+%d" % (showimgwb, showimghb, x,y))\n    #Home.resizable(1, 1)\n    Home.title(str(choosepage))\n    #render = PIL.ImageTk.PhotoImage(load)\n    # Convert the Image object into a TkPhoto object\n    if imgtype=="jpg":\n        im = PIL.Image.fromarray(load1)\n        load = im.resize((showimgwb, showimghb), PIL.Image.ANTIALIAS)\n        render = PIL.ImageTk.PhotoImage(image=load)\n        panel = Label(Home,border=0,image=render)\n        panel.image=render\n        panel.bind("<Button 1>",partial(gettkinterxypos,convimgdir=convimgdir,wledimgdir=wledimgdir,pdfdir=pdfdir,pdfname=pdfname,lastpage=lastpage,anglecorrection=anglecorrection,imgw=imgw,imgh=imgh,showimgw=showimgw,showimgh=showimgh))\n        #panel.pack(fill=BOTH, expand=YES)\n        panel.place(relx=0.0, rely=1.0, anchor=\'sw\')\n    if imgtype=="png":\n        if prevlastpage!=lastpage:\n            im = PIL.Image.fromarray(load)\n            load = im.resize((showimgwb, showimghb), PIL.Image.ANTIALIAS)\n        im1 = PIL.Image.fromarray(load1)\n        load1 = im1.resize((showimgwb, showimghb), PIL.Image.ANTIALIAS)\n        load2=load\n        load2.paste(load1,(0,0),load1)\n        render1 = PIL.ImageTk.PhotoImage(image=load2)\n        panel1 = Label(Home,border=0, image=render1)\n        panel1.image=render1\n        panel1.bind("<Button 1>",partial(gettkinterxypos,convimgdir=convimgdir,wledimgdir=wledimgdir,pdfdir=pdfdir,pdfname=pdfname,lastpage=lastpage,anglecorrection=anglecorrection,imgw=imgw,imgh=imgh,showimgw=showimgw,showimgh=showimgh))\n        #panel1.pack(fill=BOTH, expand=YES)\n        panel1.place(relx=0.0, rely=1.0, anchor=\'sw\')\n    #touchpanel=Label(Home,border=0)\n    #touchpanel.bind("<Button 1>",partial(gettkinterxypos,convimgdir=convimgdir,wledimgdir=wledimgdir,pdfdir=pdfdir,pdfname=pdfname,lastpage=lastpage,anglecorrection=anglecorrection,imgw=imgw,imgh=imgh,showimgw=showimgw,showimgh=showimgh))\n    ##touchpanel.pack(fill=BOTH, expand=YES)\n    #touchpanel.place(relx=0.0, rely=1.0, anchor=\'sw\')\n    \n    def callbackhome():\n        return True\n    def callbackhome1():\n        global choosepdfpagenext,choosepdfpageprev,undowlarea,cpageg,lastpage,convimgdir\n        if choosepdfpagenext:\n            choosepdfpagenext.destroy()\n        if choosepdfpageprev:\n            choosepdfpageprev.destroy()\n        if undowlarea:\n            undowlarea.destroy()\n        if cpageg:\n            cpageg.destroy()\n        choosepdfpagenext=Button(root, text="choosepdf", command=partial(changepage,pdfdir,pdfname,lastpage,"next"),height=1,width=3)\n        choosepdfpagenext.pack()\n        choosepdfpageprev=Button(root, text="choosepdf", command=partial(changepage,pdfdir,pdfname,lastpage,"prev"),height=1,width=3)\n        choosepdfpageprev.pack()\n        undowlarea=Button(root, text="undolwl", command=partial(undolatestwl,pdfdir,pdfname,convimgdir,wledimgdir,lastpage),height=1,width=3)\n        undowlarea.pack()\n        cpageg=Button(root, text="choosepage", command=partial(choosepageguiinit,pdfdir,pdfname),height=1,width=3)\n        cpageg.pack()\n    #root.after_idle(callbackhome)\n    root.after_idle(callbackhome1)\n    prevlastpage=None\n    return True\n\n#https://stackoverflow.com/questions/5436810/adding-zooming-in-and-out-with-a-tkinter-canvas-widget\nclass GUI:\n    def __init__(self, root):\n        # ... omitted rest of initialization code\n        self.canvas.config(scrollregion=self.canvas.bbox(ALL))\n        self.scale = 1.0\n        self.orig_img = PIL.Image.open(File)\n        self.img = None\n        self.img_id = None\n        # draw the initial image at 1x scale\n        self.redraw()\n        # ... rest of init, bind buttons, pack frame\n    def zoom(self,event):\n        if event.num == 4:\n            self.scale *= 2\n        elif event.num == 5:\n            self.scale *= 0.5\n        self.redraw(event.x, event.y)\n    def redraw(self, x=0, y=0):\n        if self.img_id:\n            self.canvas.delete(self.img_id)\n        iw, ih = self.orig_img.size\n        size = int(iw * self.scale), int(ih * self.scale)\n        self.img = PIL.ImageTk.PhotoImage(self.orig_img.resize(size))\n        self.img_id = self.canvas.create_image(x, y, image=self.img)\n        # tell the canvas to scale up/down the vector objects as well\n        self.canvas.scale(ALL, x, y, self.scale, self.scale)\n\n#https://stackoverflow.com/questions/3964681/find-all-files-in-a-directory-with-extension-txt-in-python\ndef listfilesext(dir,ext):\n    allfilesdir=[]\n    allfilesname=[]\n    allfilesfulldir=[]\n    for file in os.listdir(dir):\n        if file.endswith(ext):\n            #and os.path.isfile(os.path.join(dir, file))\n            #os.path.isdir("bob")\n            allfilesdir.append(dir)\n            allfilesname.append(file)\n            allfilesfulldir.append(os.path.join(dir, file))\n    ###print(allfilesfulldir)\n    return allfilesdir,allfilesname,allfilesfulldir\n#https://stackoverflow.com/questions/10927234/setting-the-position-on-a-button-in-python\n#https://stackoverflow.com/questions/10865116/python-tkinter-creating-buttons-in-for-loop-passing-command-arguments\ndef placebutton(allfilesdir,allfilesname,allfilesfulldir,Top,Mid):\n    x=len(allfilesfulldir)\n    value=int(x)\n    bwidth=500\n    bheight=25\n    for i in range(value):\n        ###print(allfilesdir[i])\n        ###print(allfilesname[i])\n        #b=Button(Mid,text=allfilesfulldir[i],command=lambda: DisplayImage(allfilesdir[i],allfilesname[i]))\n        b=Button(Mid,text=allfilesfulldir[i],command=partial(DisplayImage,allfilesdir[i],allfilesname[i],"",[]))\n        b.place(x=mfwidth/2-bwidth/2, y=i*30, width=bwidth, height=bheight)\ndef lastmodfile(num_files, directory):\n    import os,stat\n    import datetime as dt\n    from pprint import pprint\n    """gets a list of files sorted by modified time\n    keyword args:\n    num_files -- the n number of files you want to print\n    directory -- the starting root directory of the search"""\n    modified = []\n    accessed = []\n    rootdir = os.path.join(os.getcwd(), directory)\n    ###print("dir="+ directory)\n    for root, sub_folders, files in os.walk(rootdir):\n        for file in files:\n            try:\n                unix_modified_time = os.stat(os.path.join(root, file))[stat.ST_MTIME]\n                unix_accessed_time = os.stat(os.path.join(root, file))[stat.ST_ATIME]\n                human_modified_time = dt.datetime.fromtimestamp(unix_modified_time).strftime(\'%Y-%m-%d %H:%M:%S\')\n                human_accessed_time = dt.datetime.fromtimestamp(unix_accessed_time).strftime(\'%Y-%m-%d %H:%M:%S\')\n                filename = os.path.join(root, file)\n                modified.append((human_modified_time, filename))\n                accessed.append((human_accessed_time, filename))\n            except:\n                pass\n    modified.sort(key=lambda a: a[0], reverse=True)\n    accessed.sort(key=lambda a: a[0], reverse=True)\n    ###print(\'Modified\')\n    ###print(modified[0][1])\n    #print(\'Accessed\')\n    #pprint(accessed[:num_files])\n    return modified[0][1]\ndef curpage(pdfname,convpdfdirpc):\n    ###print("curcpdfpc="+convpdfdirpc)\n    if os.path.exists(convpdfdirpc):\n        lastimg=lastmodfile(1, convpdfdirpc)\n        ###print("li="+str(lastimg))\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            lastimg0=lastimg.rsplit("\\\\",1)[1]\n        if sys.platform in [\'linux\', \'linux2\']:\n            lastimg0=lastimg.rsplit("/",1)[1]\n        lastimg0=lastimg.rsplit("\\\\",1)[1]\n        lastpage=re.sub(r"(conv|wledpos|wled)(0)*","",lastimg0)\n        lastpage=re.sub(r"(.jpg|.png)","",lastpage)\n    if not os.path.exists(convpdfdirpc):\n        lastpage=1\n    ###print("lp="+str(lastpage))\n    return int(lastpage)\n\nif sys.platform in [\'linux\', \'linux2\']:\n    # Adapted from http://stackoverflow.com/questions/22367358/\n    class Listener:\n      def __init__(self):\n        self.disp = None\n        self.keys_down = set()\n      def keycode_to_key(self, keycode, state):\n        i = 0\n        #if state & X.ShiftMask:\n        #i += 1\n        #if state & X.Mod1Mask:\n          #i += 2\n        return self.disp.keycode_to_keysym(keycode, i)\n      def key_to_string(self, key):\n        keys = []\n        for name in dir(XK):\n          if name.startswith("XK_") and getattr(XK, name) == key:\n            keys.append(name.lstrip("XK_").replace("_L", "").replace("_R", ""))\n        if keys:\n          return " or ".join(keys)\n        return "[%d]" % key\n      def keycode_to_string(self, keycode, state):\n        return self.key_to_string(self.keycode_to_key(keycode, state))\n      def mouse_to_string(self, code):\n        if code == X.Button1:\n          return "Button1"\n        elif code == X.Button2:\n          return "Button2"\n        elif code == X.Button3:\n          return "Button3"\n        elif code == X.Button4:\n          return "Button4"\n        elif code == X.Button5:\n          return "Button5"\n        else:\n          return "{%d}" % code\n      def down(self, key):\n        self.keys_down.add(key)\n        self.print_keys()\n      def up(self, key):\n        if key in self.keys_down:\n          self.keys_down.remove(key)\n          self.print_keys()\n\n      def print_keys(self):\n        keys = str(list(self.keys_down))\n        #print(keys)\n        self.EventL()\n      def event_handler(self, reply):\n        data = reply.data\n        while data:\n          event, data = rq.EventField(None).parse_binary_value(data, self.disp.display, None, None)\n          if event.type == X.KeyPress:\n            self.down(self.keycode_to_string(event.detail, event.state))\n          elif event.type == X.KeyRelease:\n            self.up(self.keycode_to_string(event.detail, event.state))\n          elif event.type == X.ButtonPress:\n            self.down(self.mouse_to_string(event.detail))\n          elif event.type == X.ButtonRelease:\n            self.up(self.mouse_to_string(event.detail))\n      def run(self):\n        self.disp = Display()\n        XK.load_keysym_group(\'xf86\')\n        root = self.disp.screen().root\n        ctx = self.disp.record_create_context(0,\n                                          [record.AllClients],\n                                          [{\n                                            \'core_requests\': (0, 0),\n                                            \'core_replies\': (0, 0),\n                                            \'ext_requests\': (0, 0, 0, 0),\n                                            \'ext_replies\': (0, 0, 0, 0),\n                                            \'delivered_events\': (0, 0),\n                                            \'device_events\': (X.KeyReleaseMask, X.ButtonReleaseMask),\n                                            \'errors\': (0, 0),\n                                            \'client_started\': False,\n                                            \'client_died\': False,\n                                          }])\n        self.disp.record_enable_context(ctx, lambda reply: self.event_handler(reply))\n        self.disp.record_free_context(ctx)\n        while True:\n            event = root.display.next_event()\n      def EventL(self):\n        global Home\n        keys = str(list(self.keys_down))\n        #print(keys)\n        if keys == "[\'Shift\']" or keys == "[\'Button2\']":\n            Suspend1()\n        if pause==0 and not Home:\n            if keys == "[\'Button1\']":\n               mouselu("")\n\n#pip install --upgrade setuptools\n#pip install psutil pymouse pyautogui pillow pyscreenshot numpy scipy matplotlib opencv-python pypiwin32\n#win32gui pillow\n#pip install %USERPROFILE%\\Downloads\\PyHook3-1.6.1-cp35-none-win_amd64.whl\n#pip install %USERPROFILE%\\Downloads\\pyhook-1.6.1-cp37-cp37m-amd64.whl\n#pip install %USERPROFILE%\\Downloads\\pyhook-1.6.1-cp35-cp35m-win32.whl\n#pip install %USERPROFILE%\\Downloads\\pyhook-1.6.1-cp35-none-win_amd64.whl\n#Pillow-5.2.0-cp37-cp37m-win_amd64.whl\nif sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n    from tkinter import *\n    from tkinter import Tk\n    import tkinter as tk\n    import ctypes\n    from win32api import GetSystemMetrics\n    import win32com.client as comclt\n    import win32gui, win32con\n    #import pyHook\n    import pythoncom,PyHook3\n    import pyautogui\n    import psutil\n    #from pymouse import PyMouse\n    from PyHook3 import HookManager, GetKeyState, HookConstants\n    #m=PyMouse()\n    w=win32gui\n    wingui=w.GetWindowText(w.GetForegroundWindow())\n    wsh= comclt.Dispatch("WScript.Shell")\n    def eventmessage():\n        print (\'MessageName:\',event.MessageName )\n        print (\'Message:\',event.Message)\n        print (\'Time:\',event.Time)\n        print (\'Window:\',event.Window)\n        print (\'WindowName:\',event.WindowName)\n        print (\'Ascii:\', event.Ascii, chr(event.Ascii) )\n        print (\'Key:\', event.Key)\n        print (\'KeyID:\', event.KeyID)\n        print (\'ScanCode:\', event.ScanCode)\n        print (\'Extended:\', event.Extended)\n        print (\'Injected:\', event.Injected)\n        print (\'Alt\', event.Alt)\n        print (\'Transition\', event.Transition)\n        print (\'---\')\n    def OnKeyboardEventA(event):\n        global is_recording,pause\n        global Home,pdfdir0,pdfname0,lastpage\n        if event.KeyID == HookConstants.VKeyToID(\'VK_RSHIFT\'):\n            #print("Paused")\n            Suspend1()\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_LEFT\') and Home and pause==0:\n            ###print("pn0="+pdfname0)\n            #changepage(pdfdir0,pdfname0,lastpage,"prev")\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_RIGHT\') and Home and pause==0:\n            ###print("pn0="+pdfname0)\n            #changepage(pdfdir0,pdfname0,lastpage,"next")\n            return True\n        elif GetKeyState(HookConstants.VKeyToID(\'VK_CONTROL\')) and event.KeyID == HookConstants.VKeyToID(\'VK_ESCAPE\'):\n            sys.exit()\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_F6\'):\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_F7\'):\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_F8\'):\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_F9\'):\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_F10\'):\n            return True\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_F12\'):\n            return True\n        elif GetKeyState(HookConstants.VKeyToID(\'VK_CONTROL\')) and HookConstants.IDToName(event.KeyID) == \'P\' :\n            ###print("Pause Recording")\n            return True\n\n        elif event.KeyID == HookConstants.VKeyToID(\'VK_ESCAPE\'):\n            sys.exit()\n        else:\n            if is_recording==1:\n                newhndl = ctypes.windll.user32.GetForegroundWindow()\n                appname=get_app_name(newhndl)\n                ###print(appname)\n                title=win32gui.GetWindowText (win32gui.GetForegroundWindow())\n                ###print(title)\n                Hold=0\n                ###print("recording")\n                ###print(\'Key:\', event.Key)\n                #if (RegexMatch(activeprocess,"Acrobat|SumatraPDF|chrome|opera")):\n                if GetKeyState(HookConstants.VKeyToID(\'VK_CONTROL\')) and (self.Key == \'Oem_Plus\' or self.Key == \'Oem_Minus\' or HookConstants.IDToName(event.KeyID) == \'0\'):\n                    ###print("captured")\n                    #if RegExMatch(A_ThisHotkey,"\\^=|\\^-|\\^0"):\n                    #append(".+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.1.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.")\n                    return True\n                elif GetKeyState(HookConstants.VKeyToID(\'VK_LSHIFT\')) and GetKeyState(HookConstants.VKeyToID(\'VK_CONTROL\')) and HookConstants.IDToName(event.KeyID) == \'A\' :\n                    ###print("1")\n                    #elif RegExMatch(A_ThisHotkey,"\\+\\^a"):\n                    #append(".+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.2.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.")\n                    return True\n                    #elif RegExMatch(A_ThisHotkey,"\\+(Up|Down|Left|Right)"):\n                elif GetKeyState(HookConstants.VKeyToID(\'VK_LSHIFT\')) and (event.KeyID == HookConstants.VKeyToID(\'VK_UP\') or event.KeyID == HookConstants.VKeyToID(\'VK_DOWN\') or event.KeyID == HookConstants.VKeyToID(\'VK_LEFT\') or event.KeyID == HookConstants.VKeyToID(\'VK_RIGHT\')):\n                    ###print("2")\n                    #append(".+.+.+.+.+.+.+.+.+.3.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.+.")\n                    return True\n                else:\n\n                    return True\n            else:\n                return True\n\n    def onclicka(event):\n        global Home\n        X, Y=event.Position\n        if (event.MessageName==\'mouse left up\') and not Home:\n            #mouselu(event)\n            mouselu(event)\n            return True\n        elif (event.MessageName==\'mouse left down\'):\n            #mouselu(event)\n            return True\n        elif (event.MessageName==\'mouse move\'):\n            #print("move")\n            #print(X,Y)\n            return True\n        elif (event.MessageName==\'mouse wheel\'):\n            #print("wheel")\n            return True\n        else:\n            #print(event.MessageName)\n            return True\n\n    def windowEnumerationHandler(hwnd, top_windows):\n        top_windows.append((hwnd, win32gui.GetWindowText(hwnd)))\n    def focusprog(appname):\n            results = []\n            top_windows = []\n            win32gui.EnumWindows(windowEnumerationHandler, top_windows)\n            for i in top_windows:\n                if appname in i[1].lower():\n                    print (i)\n                    win32gui.ShowWindow(i[0],win32con.SW_MAXIMIZE)\n                    win32gui.SetForegroundWindow(i[0])\n                    j=os.getpid()\n                    ###print(j)\n                    break\n    def closeprog(appname):\n            results = []\n            top_windows = []\n            win32gui.EnumWindows(windowEnumerationHandler, top_windows)\n            for i in top_windows:\n                if appname in i[1].lower():\n                    print (i)\n                    win32gui.ShowWindow(i[0],win32con.SW_MAXIMIZE)\n                    win32gui.SetForegroundWindow(i[0])\n                    win32gui.PostMessage(handle,win32con.WM_CLOSE,0,0)\n                    j=os.getpid()\n                    ###print(j)\n                    break\n    def runfn():\n        PROCNAME = "FiiNote.exe"\n        for proc in psutil.process_iter():\n            if proc.name() == PROCNAME:\n                subprocess.Popen([fndir])\n                win32gui.EnumWindows(focusfn, None)\n                break\n            else:\n                subprocess.Popen([fndir])\n                win32gui.EnumWindows(focusfn, None)\n                break\n\n        pass\n    def focusfn(hwnd, lParam):\n        if win32gui.IsWindowVisible(hwnd):\n            if \'Notes\\\\\' in win32gui.GetWindowText(hwnd):\n                win32gui.ShowWindow(hwnd,win32con.SW_MINIMIZE)\n                win32gui.ShowWindow(hwnd,win32con.SW_MAXIMIZE)\n                win32gui.SetForegroundWindow(hwnd)\n                pass\n    def focusfn2(hwnd, lParam):\n        if win32gui.IsWindowVisible(hwnd):\n            if \'Untitled\' in win32gui.GetWindowText(hwnd):\n                win32gui.SetForegroundWindow(hwnd)\n                win32gui.PostMessage(hwnd,win32con.WM_CLOSE,0,0)\n    def spdfhandler(hwnd, lParam):\n        for proc in psutil.process_iter():\n            if proc.name() == "SumatraPDF.exe":\n                if win32gui.IsWindowVisible(hwnd):\n                    if \'SumatraPDF\' in win32gui.GetWindowText(hwnd):\n                        win32gui.ShowWindow(hwnd,win32con.SW_MINIMIZE)\n                        win32gui.ShowWindow(hwnd,win32con.SW_MAXIMIZE)\n                        win32gui.SetForegroundWindow(hwnd)\n                        break\n            else:\n                subprocess.Popen(readerdir)\n                break\n    def currenthwnd():\n        newhndl = ctypes.windll.user32.GetForegroundWindow()\n        appname=get_app_path(newhndl)\n        ###print(newhndl,appname)\n    def get_app_path(hwnd):\n        global exepath\n        """Get applicatin path given hwnd."""\n        try:\n            _, pid = win32process.GetWindowThreadProcessId(hwnd)\n            for p in c.query(\'SELECT ExecutablePath FROM Win32_Process WHERE ProcessId = %s\' % str(pid)):\n                exepath = p.ExecutablePath\n                break\n        except:\n            return None\n        else:\n            return exepath\n    def get_app_name(hwnd):\n        global exename\n        """Get applicatin filename given hwnd."""\n        try:\n            _, pid = win32process.GetWindowThreadProcessId(hwnd)\n            for p in c.query(\'SELECT Name FROM Win32_Process WHERE ProcessId = %s\' % str(pid)):\n                exename = p.Name\n                break\n        except:\n            return None\n        else:\n            return exename\n\n\nDefault()\nCN=checknotz(curnotelocpc)\nnewdir1=CN[0]\nobjno2=CN[1]\ncurnotzpc=CN[2]\ncurnotefpc=CN[3]\ncurattachdirpc=CN[4]\ncurnotzand=CN[5]\ncurattachdirand=CN[6]\n_thread.start_new_thread(task2, ())\nprint(newdir1)\nprint(objno2)\nprint(curattachdirpc)\nif __name__==\'__main__\':\n    if sys.platform in [\'linux\', \'linux2\']:\n        while 1:\n            Listener().run()\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        global hm\n        #https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyhook\n        #https://stackoverflow.com/questions/43417601/using-pyhook-to-detect-key-up-and-down\n        ##https://stackoverflow.com/questions/45113813/check-if-mouse-up-or-mouse-down-with-pyhook\n        #win32gui.EnumWindows(spdfhandler, None)\n        #runfn()\n        #win32gui.EnumWindows(focusfn, None)\n        #currenthwnd()\n        hm = PyHook3.HookManager()\n        hm.HookMouse()\n        hm.MouseAll = onclicka\n        #hm.MouseLeftDown = OnDown\n        #hm.MouseLeftUp = OnUp\n        hm.HookKeyboard()\n        hm.KeyDown = OnKeyboardEventA\n        pythoncom.PumpMessages()\n        hm.UnhookMouse()\n        ##hm.UnhookKeyboard()\n'