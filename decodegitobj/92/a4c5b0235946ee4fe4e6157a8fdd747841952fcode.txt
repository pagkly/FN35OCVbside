b'blob 11981\x00import os\nimport cv2\nimport cv2 as cv\nimport numpy as np\nfrom operator import itemgetter\ndir0=os.path.dirname(os.path.realpath(__file__))        \ndef everyletter0(imgdir):\n    #https://stackoverflow.com/questions/30506126/open-cv-error-215-scn-3-scn-4-in-function-cvtcolor\n    img = cv.imread(imgdir,0)\n    imgc = cv.imread(imgdir)\n    #imgc=cv2.copyMakeBorder(img,0,0,0,0,cv2.BORDER_REPLICATE)\n    # Taking a matrix of size 5 as the kernel\n    kernel = np.ones((2,1), np.uint8)\n    \n    #hsv = cv2.cvtColor(imgc, cv2.COLOR_BGR2HSV)\n    #lowerb = np.array([0,0,0])\n    #upperb = np.array([180, 255, 80])\n    #blackmask = cv2.inRange(hsv,lowerb,upperb)\n    #cv2.imshow(\'HSV\', hsv)\n    #cv2.imshow(\'MASK\', blackmask)\n    #cv2.waitKey(0)\n    #kernel = np.ones((1,1), np.uint8)\n    ret, thresh = cv2.threshold(img, 127, 255, cv.THRESH_BINARY)\n    img_erosion=cv2.erode(thresh, kernel, iterations=1)\n    #cv2.imshow(\'BW\', thresh)\n    cv2.imshow(\'IE\', img_erosion)\n    cv2.waitKey(0)\n \n    # The first parameter is the original image,\n    # kernel is the matrix with which image is \n    # convolved and third parameter is the number \n    # of iterations, which will determine how much \n    # you want to erode/dilate a given image.\n    im2, contours, hierarchy = cv2.findContours(img_erosion, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    #print(contours)\n    #cv2.drawContours(imgc, contours, -1, (0,255,0), 3)\n    listofcd=[]\n    for contour in contours:\n        [x,y,w,h] = cv2.boundingRect(contour)\n        listofcd.append([x,y,w,h])\n    #print(listofcd)\n    ##listofcd=sorted(listofcd, key=itemgetter(1,0))\n    #for c in listofcd:\n    #    for i in listofcd:\n    #        if c[0] in range(i[0],i[0]+5) and c[1] in range(c[1]-20,c[1]+10) and c!=i:\n    #            listofcd.remove(i)\n    #            #print(i)\n    countrect=0\n    for i in range(0,len(listofcd)):\n        [x,y,w,h]=listofcd[i]\n        if i+1!=len(listofcd):\n            [xafter,yafter,wafter,hafter]=listofcd[i+1]\n            if w<9 and h<9 and w>3 and h>3:\n                #and w in range(h-2,h+2):\n                a=0\n                for i in range(0,len(listofcd)):\n                    [xcheck,ycheck,wcheck,hcheck]=listofcd[i]\n                    #if [xcheck,ycheck,wcheck,hcheck] != [x,y,w,h] and not ycheck in range(y-100,y+50) and not xcheck in range(x+1,x+150):\n                    if [xcheck,ycheck,wcheck,hcheck] != [x,y,w,h]:\n                        if xcheck in range(x-1,x+10) and ycheck in range(y-5,y+10):\n                            a+=1\n                            #print(str(a))\n                            break\n                if a==0:\n                    countrect+=1\n                    cv2.rectangle(imgc, (x, y), (x+w, y+h), (0, 255, 0), 1)\n                if a>=1:\n                    pass\n    cv2.imshow(\'Contoured\', imgc)\n    cv2.imwrite(dir0+os.path.sep+"after.jpg",imgc)\n    #cv2.waitKey(0)\n    print(str(countrect))\ndef everyletter_connectedcomp(imgdir):\n    src = cv2.imread(imgdir, 0)\n    binary_map = (src > 0).astype(np.uint8)\n    connectivity = 4 # or whatever you prefer\n    output = cv2.connectedComponentsWithStats(binary_map, connectivity, cv2.CV_32S)\n    cv2.imshow(\'Contoured\', output)\n    cv2.waitKey(0)\ndef everyletter(imgdir,ocvtype):\n    imgori = cv2.imread(imgdir)\n    img=imgori.copy()\n    (imgh, imgw) = img.shape[:2]\n    image_size = imgh*imgw\n    mser = cv2.MSER_create()\n    mser.setMaxArea(int(image_size/2))\n    mser.setMinArea(10)\n\n    #dtext\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #Converting to GrayScale\n    _, bw = cv2.threshold(gray, 0.0, 255.0, cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n    cv2.imshow("",bw)\n    cv2.waitKey(0)\n\n    if imgh>imgw:\n        kernelcd = np.ones((5,20), np.uint8)\n        if "math" in ocvtype:\n            kernelcd = np.ones((5,30), np.uint8)\n    if imgw>imgh:\n        kernelcd = np.ones((5,20), np.uint8)\n    bwcd=cv2.erode(bw, kernelcd, iterations=1)\n    regions, rects = mser.detectRegions(bwcd)\n    imgcd=imgori.copy()\n    listcd=[]\n    for (x, y, w, h) in rects:\n        if w>10 and h>10:\n            listcd.append([x,y,w,h])\n            cv2.rectangle(imgcd, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n    #cv2.imshow(\'cd\', imgcd)\n    #cv2.waitKey(0)\n        \n    kernel = np.ones((3,1), np.uint8)\n    bw=cv2.erode(bw, kernel, iterations=1)\n    #ret, bw = cv2.connectedComponents(bw)\n    regions, rects = mser.detectRegions(bw)\n    # With the rects you can e.g. crop the letters\n    for (x, y, w, h) in rects:\n        if w<7 and h<7:\n            #cv2.rectangle(img, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n            pass\n        #cv2.rectangle(img, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n        #cv2.rectangle(img, (x-1, y-1), (x+w+1, y+h+1), color=(255, 255, 255), thickness=-1)\n        else:\n            cv2.rectangle(img, (x, y), (x+w, y+h), color=(255, 255, 255), thickness=-1)\n            pass\n    listcdoc=[]\n    def cdoc(mat):\n        mask=mat\n        im2, contours, hierarchy = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n        imgb=imgori.copy()\n        for contour in contours:\n            [x,y,w,h] = cv2.boundingRect(contour)\n            cd=[x,y,w,h]\n            print(cd)\n            if h<(50/100*imgh) and w>(1/100*imgw) and h>(1/100*imgh):\n                listcdoc.append([x,y,w,h])\n                cv2.rectangle(imgb, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n        #cv2.imshow(\'mb\', imgb)\n        #cv2.waitKey(0)\n    imgf=imgori.copy()\n    if imgh>imgw:\n        kernelcd = np.ones((5,5), np.uint8)\n    if imgw>imgh:\n        kernelcd = np.ones((5,20), np.uint8)\n    imgfe=cv2.erode(imgf, kernel, iterations=1)\n    #cv2.imshow(\'my\', imgfe)\n    #cv2.waitKey(0)\n    hsv = cv2.cvtColor(imgfe, cv2.COLOR_BGR2HSV)\n    #cv2.imshow(\'my\', hsv)\n    #cv2.waitKey(0)\n    #filteryellow\n    lowery = np.array([20,100,100])\n    uppery = np.array([30,255,255])\n    masky = cv2.inRange(hsv, lowery, uppery)\n    #cv2.imshow(\'my\', masky)\n    #filterred\n    lowerr = np.array([160,100,100])\n    upperr = np.array([179,255,255])\n    maskr = cv2.inRange(hsv, lowerr, upperr)\n    ret, thresh = cv2.threshold(maskr, 120.0, 255.0, cv2.THRESH_BINARY_INV)\n    kernelcd = np.ones((10,30), np.uint8)\n    maskr=cv2.erode(thresh, kernelcd, iterations=1)\n    cdoc(maskr)\n    #filtergreen\n    lowerg=np.array([33,80,40])\n    upperg=np.array([102,255,255])\n    maskg = cv2.inRange(hsv, lowerg, upperg)\n    #filterblue\n    lowerb = np.array([78,158,124])\n    upperb=np.array([138,255,255])\n    maskb = cv2.inRange(hsv,lowerb,upperb)\n    ret, thresh = cv2.threshold(maskb, 120.0, 255.0, cv2.THRESH_BINARY_INV)\n    kernelcd = np.ones((5,18), np.uint8)\n    maskb=cv2.erode(thresh, kernelcd, iterations=1)\n    cdoc(maskb)\n        \n    img1=img.copy()\n    gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n    ret, thresh = cv2.threshold(gray, 120.0, 255.0, cv2.THRESH_BINARY)\n    #cv2.imshow(\'BW\', thresh)\n    im2, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    listcdsign=[]\n    for contour in contours:\n        [x,y,w,h] = cv2.boundingRect(contour)\n        if w>3 or h>3:\n            listcdsign.append([x,y,w,h])\n            cv2.rectangle(img1, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n    print(listcdsign)\n    print(str(len(listcd)))\n    print(str(len(listcdsign)))\n    cv2.imshow("",img1)\n    cv2.waitKey(0)\n    if not "math" in ocvtype:\n        for i in listcdsign:\n            [xsign,ysign,wsign,hsign]=i\n            for c in listcd:\n                [xcheck,ycheck,wcheck,hcheck]=c\n                if xsign in range(xcheck,xcheck+wcheck) and ysign in range(ycheck,ycheck+hcheck):\n                    #print("remove")\n                    listcd.remove(c)\n                    print(c)\n                    listcd.append([xcheck,ycheck,(xsign+wsign)-xcheck,hcheck])\n                    listcd.append([(xsign+wsign),ycheck,wcheck-((xsign+wsign)-xcheck),hcheck])\n                    break\n    listcd=sorted(listcd, key=itemgetter(1,0))\n    for i in listcd:\n        [xsign,ysign,wsign,hsign]=i\n        for c in listcd:\n            [xcheck,ycheck,wcheck,hcheck]=c\n            if xcheck in range(xsign,xsign+wsign) and ycheck in range(ysign,ysign+hsign) and i!=c:\n                listcd.remove(c)\n            \n    #for i in listcdoc:\n    #    [xsign,ysign,wsign,hsign]=i\n    #    for c in listcd:\n    #        [xcheck,ycheck,wcheck,hcheck]=c\n    #        if xsign in range(xcheck,xcheck+wcheck) and ysign in range(ycheck,ycheck+hcheck):\n                #if (hcheck)/(hsign)>2:\n                #    listcd.remove(c)\n                #    print(c)\n                #    listcd.append([xcheck,ycheck,wcheck,(ysign+hsign)-ycheck])\n                #    listcd.append([xcheck,(ysign+hsign),wcheck,hcheck-((ysign+hsign)-ycheck)])\n                #else:\n                    #print("remove")\n     #               listcd.remove(c)\n     #               print(c)\n     #               listcd.append([xcheck,ycheck,(xsign+wsign)-xcheck,hcheck])\n     #               listcd.append([(xsign+wsign),ycheck,wcheck-((xsign+wsign)-xcheck),hcheck])\n     #               break\n    imgfinal=imgori.copy()\n    withcolour=True\n    if withcolour:\n        for cd in listcdoc:\n            [x,y,w,h] = cd\n            if w>20:\n                #cropthisimg\n                cv2.rectangle(imgfinal, (x, y), (x+w, y+h), color=(255, 255, 255), thickness=-1)\n                pass\n    for cd in listcd:\n        [x,y,w,h] = cd\n        if w>20:\n            #cropthisimg\n            cv2.rectangle(imgfinal, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n            pass\n    cv2.imwrite("savedmser2.jpg",imgfinal)\n    cv2.imshow(\'Contoured\', imgfinal)\n    \n    \ndef everyletter_matchtcomp(imgdir):\n    import cv2\n    import numpy as np\n    from matplotlib import pyplot as plt\n    large_image=imgdir\n    notefsimgdir=dir0+os.path.sep+"notefs.jpg"\n    notecmimgdir=dir0+os.path.sep+"notecm.jpg"\n    noteqsimgdir=dir0+os.path.sep+"noteqs.jpg"\n    img_rgb = cv2.imread(large_image)\n    img_gray = cv2.cvtColor(img_rgb, cv2.COLOR_BGR2GRAY)\n    clist=[]\n    #FS\n    template = cv2.imread(notefsimgdir,0)\n    w, h = template.shape[::-1]\n    res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)\n    threshold = 0.8\n    loc = np.where( res >= threshold)\n    for pt in zip(*loc[::-1]):\n        clist.append([pt[0],pt[1],pt[0] + w, pt[1] + h])\n        #cv2.rectangle(img_rgb, pt, (pt[0] + w, pt[1] + h), (0,0,255), 2)\n    #CM\n    template = cv2.imread(notecmimgdir,0)\n    w, h = template.shape[::-1]\n    res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)\n    threshold = 0.8\n    loc = np.where( res >= threshold)\n    for pt in zip(*loc[::-1]):\n        clist.append([pt[0],pt[1],pt[0] + w, pt[1] + h])\n        #cv2.rectangle(img_rgb, pt, (pt[0] + w, pt[1] + h), (0,0,255), 2)\n    #QS\n    template = cv2.imread(noteqsimgdir,0)\n    w, h = template.shape[::-1]\n    res = cv2.matchTemplate(img_gray,template,cv2.TM_CCOEFF_NORMED)\n    threshold = 0.8\n    loc = np.where( res >= threshold)\n    for pt in zip(*loc[::-1]):\n        clist.append([pt[0],pt[1],pt[0] + w, pt[1] + h])\n        #cv2.rectangle(img_rgb, pt, (pt[0] + w, pt[1] + h), (0,0,255), 2)\n    #print(clist)\n    for c in clist:\n        for i in clist:\n            if c[0] in range(i[0]-5,i[0]+5) and c!=i:\n                clist.remove(i)\n                print(i)\n    for c in clist:           \n        cv2.rectangle(img_rgb, (c[0],c[1]),(c[2],c[3]), (0,0,255), 2)\n\n    #cv2.imwrite(\'res.png\',img_rgb)\n    cv2.imshow(\'output\',img_rgb)\n    cv2.waitKey(0)\n    \n    \nimgdir=dir0+os.path.sep+"20180808185431abcdefghijklm74.jpg"\nimgdir="20180813194632abcdefghijklm72.jpg"\nimgdir2=dir0+os.path.sep+"savedmser.jpg"\nimgdir3="conv1000.jpg"\nprint(imgdir)\neveryletter(imgdir,"")\n#everyletter0(imgdir2)\n##detect contourarea<50\n##pick that coordinate\n## for f in smallcd: dr\n#cv2.drawContours(img, contours, -1, (0,255,0), 3)\n#if coordinate in range():\n#    x1+scx1,y1+scy1\n#    scx2,x2,scy2,y2\n'