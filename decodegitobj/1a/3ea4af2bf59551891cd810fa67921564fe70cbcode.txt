b'blob 28639\x00var globalNavMenu = {\n\n  // how long after the menu loses focus to wait, before closing it\n  MENU_CLOSE_TIMER_INTERVAL: 1000,\n\n  // the id of the timer responsible for closing the menu\n  menuCloseTimerId : null,\n\n  // the key code for the space key\n  KEY_SPACE: 32,\n\n  ACTIVE_SECTION_KEY: "globalNavMenu:activeSection",\n\n  /**\n   * Starts a timer that closes the menu after a short interval.\n   */\n  initiateMenuClose : function () {\n    globalNavMenu.menuCloseTimerId = setTimeout ( function() { globalNavMenu.toggleMenu(false); }, globalNavMenu.MENU_CLOSE_TIMER_INTERVAL );\n  },\n\n\n  /**\n   * Called when the menu loses focus.\n   *\n   * @param event An onmouseout event\n   */\n  menuAbandoned: function (event) {\n\n    // figure out where the mouse has moved to\n    var target = event.toElement || event.relatedTarget;\n\n    // if it hasn\'t moved anywhere within the confines of the menu or its invoking link,\n    // start the process of closing it\n    if ( target && target != $("global-nav-flyout") && !target.up("#global-nav-flyout") && target != $("global-nav") && !target.up("#global-nav") ) {\n      globalNavMenu.initiateMenuClose();\n    }\n  },\n\n\n  /**\n   * Called when the menu gains focus\n   */\n  menuEntered: function () {\n\n    // if the menu is scheduled to be closed, cancel the close\n    if ( globalNavMenu.menuCloseTimerId ) {\n      clearTimeout(globalNavMenu.menuCloseTimerId);\n      globalNavMenu.menuCloseTimerId = null;\n    }\n\n  },\n\n\n  /**\n   * Initialize the menu.\n   */\n  init : function( toolActivityEnabled )\n  {\n    // initialize the tool_service\n    if ( toolActivityEnabled )\n    {\n      window.tool_service.register ( "globalnavmenu", globalNavMenu.activityListener );\n    }\n\n    globalNavMenu.attachEventHandlers();\n\n    if (window.matchMedia("(max-width: 1024px)").matches) {\n      globalNavMenu.mobileMenuMods();\n    }\n\n    $j(window).resize(function() {\n      if($j(window).width() < 1025) {\n        globalNavMenu.mobileMenuMods();\n      } else {\n        globalNavMenu.reverseMobileMenuMods();\n      }\n    });\n  },\n\n  attachEventHandlers : function ()\n  {\n    // Since the global nav menu should open only as tall as the current size of the browser window\n    // (so that users do not have to scroll to access the left-hand-side tools when there are lots of \n    // them), close the global nav menu when the user resizes the browser window. Make an exception for mobile\n    // browsers (ok, just Safari for now) since one cannot intentionally resize a window (though resize \n    // events do fire indirectly as a consequence of user actions such as orientation change) in a mobile (iOS)\n    // device.\n    if ( !Prototype.Browser.MobileSafari )\n    {\n      Event.observe( window, "resize", function() { globalNavMenu.toggleMenu( false ); } );\n    }\n\n    Event.observe( window, "beforeunload", function() { globalNavMenu.toggleMenu( false ); } );\n\n    // for ie only, we invoke the menu when the link is focused, because that\'s the only way\n    // to get it to open with the accesskey -- IE fires a focus event, not a click event,\n    // when the menu\'s access key is pressed\n    if ( Prototype.Browser.IE ) {\n      $("global-nav-link").observe( "focus", globalNavMenu.onNavLinkClick );\n      $("global-nav-link").observe( "click", globalNavMenu.preventDefault );\n    }\n    else {\n      $("global-nav-link").observe( "click", globalNavMenu.onNavLinkClick );\n    }\n\n    // watch for focus entering/exiting the menu or the menu header\n    $("global-nav-link").observe( "mouseout", globalNavMenu.menuAbandoned );\n    $("global-nav-link").observe( "mouseover", globalNavMenu.menuEntered );\n    $("global-nav-flyout").observe( "mouseout", globalNavMenu.menuAbandoned );\n    $("global-nav-flyout").observe( "mouseover", globalNavMenu.menuEntered );\n    $("global-nav-flyout").observe( "click", window.welcomeOverlay.closeOverlay ); \n\n    // attach event handlers to the bottom buttons \n    $$(".bottom-buttons a").each( function ( bottomButton ) {\n\n      // keyboard navigation for the bottom buttons\n      bottomButton.observe( "keydown", function(event) {\n      \n        var key = event.keyCode;\n\n        switch (key) {\n\n          // down takes you to the next button over\n          case Event.KEY_DOWN:\n            var nextButton = this.up("li").next();\n            if (nextButton) { \n              nextButton.down("a").focus();\n            }\n            event.stop();\n            break;\n\n          // up takes you to the previous button, or the previous section if we\'re already \n          // at the leftmost extent of the button area\n          case Event.KEY_UP:\n\n            // if this is the first button, jump back up the last section\n            if ( this == $$(".bottom-buttons a:first").first() )  {\n              \n              var lastSection = $$(".accordion-wrapper div.accordion_toggle:last").first();\n              if ( lastSection ) {\n                lastSection.focus();\n              }\n            } \n\n            // otherwise, move to the previous button\n            else {              \n              this.up(0).previous(\'li\', 0).down(\'a\', 0).focus();\n            }\n\n            event.stop();\n\n            break;   \n            \n          case Event.KEY_TAB:\n\n            // if this is the last button, close the menu\n            if ( this == $$(".bottom-buttons a:last").first() )  {\n              globalNavMenu.keyboardCloseMenu();\n              event.stop();\n            }\n            \n            break;\n            \n        }\n\n      });\n\n    });\n    \n\n\n    // keyboard navigation for the menu\n    $("global-nav-flyout").observe( "keydown", function(event) {\n\n      var key = event.keyCode;\n\n      if (key === Event.KEY_ESC ) {\n        // escape closes the menu\n          globalNavMenu.keyboardCloseMenu();\n      }\n\n    });\n    \n    $("topframe.logout.label").observe( "click", function(event){\n      ClientCache.clear();\n    });\n  },\n\n attachEventHandlersInsideFlyout : function ()\n {\n  // watch for menu rail shortcut clicks\n  $$("#global-list-tools a").each( function( shortcut )  {\n    if ( !shortcut.onclick ) {\n      shortcut.observe( "click", globalNavMenu.onShortcutClick );\n    }\n  });\n\n  // attach event handlers to section headers\n  $$(".accordion_toggle").each( function( sectionHeader ) {\n\n    // open/close the section when its header is clicked\n    sectionHeader.observe( "click", globalNavMenu.onSectionClick );\n\n    // watch for keyboard events on the section headers\n    sectionHeader.observe( "keydown", function (event) {\n\n      var contentArea = this.down();\n      \n      var sectionId = contentArea.readAttribute( "data-section-id" );\n      var sectionUri = contentArea.readAttribute( "data-section-uri" );\n\n      var sectionContent = $(sectionId+\'-content\');\n      var sectionTitle = $(sectionId+\'-title\');\n      \n      // TODO is there a more generic way to do this\n      var key = event.keyCode;\n      \n      switch (key) {\n        \n        // open the section\n        case Event.KEY_RETURN:\n        case Event.KEY_RIGHT:\n        case globalNavMenu.KEY_SPACE:\n          \n          if ( !sectionContent.visible() ) {\n            globalNavMenu.openSection( sectionContent, sectionUri );\n          }\n          \n          globalNavMenu.focusFirstSectionLink(sectionContent);\n          \n          event.stop();\n          break;\n          \n        // move focus to the next section header\n        case Event.KEY_DOWN:\n\n          var nextToggle = sectionTitle.next(".accordion_toggle");\n\n          // if there\'s another section below us\n          if ( nextToggle ) {\n            nextToggle.focus();\n          }\n\n          // otherwise, we\'re at the bottom of the section area\n          else {\n            $(\'topframe.home.label\').focus();\n          }\n\n          event.stop();\n\n          break;\n          \n        // focus the previous section header\n        case Event.KEY_UP:\n          var previousToggle = sectionTitle.previous(".accordion_toggle");\n\n          if ( previousToggle ) {\n            previousToggle.focus();\n          }\n\n          event.stop();\n\n          break;\n          \n        case Event.KEY_LEFT:\n          \n          // if the section is open, close it\n          if ( sectionContent.visible() ) {\n            globalNavMenu.closeSection( sectionContent );\n          }\n\n          // otherwise, focus the first section in the rail\n          else {\n            globalNavMenu.focusFirstShortcut();\n          }\n\n          event.stop();\n\n          break;\n          \n      }\n\n    });\n                \n  });\n\n},\n  /**\n   * Hide/show the menu.\n   *\n   * @param show Whether to hide or show the menu.\n   */\n  toggleMenu: function ( show, preview )\n  {\n    \n    var menu = $("global-nav-flyout");\n    var menuLink = $("global-nav-link");\n    var menuImage = $("global-toggle-img");\n\n    var isPreview = preview && "true" === preview;\n    \n    // if the caller didn\'t express a preference, toggle the menu display \n    if ( show === undefined )\n    {\n      show = !menu.visible();\n    }\n    \n    if ( show && !menu.visible() ) {\n      menuLink.addClassName("active");\n      menu.setAttribute( \'aria-expanded\', \'true\');\n      menu.show();\n\n      menuImage.setAttribute( \'src\', getCdnURL( \'/images/ci/mybb/arrowUp-topnav.png\' ) );\n      menuImage.setAttribute( \'alt\', page.bundle.getString( "globalnav.menu.collapse" ) );\n\n      if ( !isPreview )\n      {\n        UserDataDWRFacade.getStringTempScope( globalNavMenu.ACTIVE_SECTION_KEY, globalNavMenu.handleActiveSection );\n        globalNavMenu.resizeMenu();\n      }\n      \n      // this is an awful hack. it\'s here because (a) the event that open the menu goes on to steal any focus we try to apply\n      // when the menu opens; and (b) we can\'t stop the event because it\'s used to trigger the display of the welcome overlay.\n      // bah.\n      setTimeout(globalNavMenu.focusFirstShortcut, 200);\n      \n    }\n\n    else if ( menu.visible() )\n    {\n      if ( $(\'global-more-tools\') && $(\'global-more-tools\').visible() )\n      {\n        $(\'global-more-tools\').hide();\n      }\n\n      menuLink.removeClassName("active");\n      menu.setAttribute( \'aria-expanded\', \'false\');\n      menu.hide();\n\n      menuImage.setAttribute( \'src\', getCdnURL( \'/images/ci/mybb/arrowDown-topnav.png\' ) );\n      menuImage.setAttribute( \'alt\',page.bundle.getString( "globalnav.menu.expand" ) );\n    }\n\n  },\n\n  /**\n   * Called when the menu link is clicked.\n   */\n  onNavLinkClick : function( event ) \n  { \n    if( !$("flyoutMenuContent") )\n    {\n      new Ajax.Request( "/webapps/portal/execute/globalNavFlyout?cmd=view",\n                        {  method: \'get\',\n                           asynchronous: false,         \n                           onSuccess: function(transport) {\n                             var result = transport.responseText;\n                             if ( result ) \n                             {\n                               $("global-nav-flyout").insert( {top:result} );\n                               window.tool_service.getActivityData();\n                               globalNavMenu.attachEventHandlersInsideFlyout();\n                             }\n                           }\n                        });\n    }\n\n    var preview = $("global-nav").readAttribute("data-preview") ;\n\n    // no need to check if there\'s a user in the context when in preview\n    if ( "true" === preview )\n    {\n      globalNavMenu.toggleMenu ( !$("global-nav-flyout").visible(), preview );\n    }\n    else\n    {\n      UserDWRFacade.isUserFoundInContext(function( isUserFoundInContext ) \n      {\n        if (isUserFoundInContext) \n        {\n          globalNavMenu.toggleMenu ( !$("global-nav-flyout").visible(), preview );\n        } \n        else \n        {\n          // the user is not found in the context when a logout was triggered in another tab; \n          // reloading the current location will trigger a re-login flow preserving \n          // the current frameset tab group as the final destination, also we want to force \n          // a trip to the server rather than using the browser\'s cache\n          window.location.reload(true);\n        }\n      });\n    }\n\n    // note: we would like to stop propagation of this event -- it causes us focus issues -- but we\n    // can\'t, because it\'s needed for the welcome menu overlay\n    \n    // need to prevent page jumping behavior on preview pages\n    // tried javascript:void(0), href="globalNavMenu.onNavLinkClick()" but they either don\'t work or mess up menu closer\n    // on some browsers. event propagation is needed on real menu. hence hack.\n    if ( "true" === preview )\n    {\n      Event.stop( event );\n    }\n    else if ( event.preventDefault )\n    {\n      event.preventDefault();\n    }\n\n    if (window.matchMedia("(max-width: 736px)").matches) {\n      globalNavMenu.mobileGlobalNavHandling();\n    }\n  },\n\n  \n  resizeMenu : function()\n  {\n    var winHeight = document.viewport.getHeight();\n\n    var nav = $(\'global-nav-flyout\');\n    var navOffset = nav.viewportOffset().top;\n\n    // new height of the entire global nav - min( 600px, the height of the viewport - offset )\n    var newHeight = 600;\n    if ( newHeight > winHeight - navOffset )\n    {\n      newHeight = winHeight - navOffset;\n    }\n    nav.setStyle( { height: newHeight +\'px\' } );\n\n    // the height of all of the toggles + the bottomButtons\n    var totalToggleHeight = $(\'bottomButtons\' ).getHeight();\n    $$(\'#vertical_container > .accordion_toggle\').each(function(e){\n      if ( newHeight > totalToggleHeight + e.getHeight() )\n      {\n        totalToggleHeight += e.getHeight();\n      }\n    });\n\n    // the height of the accordion content sections (this affects the height of the global nav)\n    // set the accordions to fit in the remaining space\n    var accordionContentHeight = newHeight - totalToggleHeight + "px";\n    $$(\'#vertical_container > .accordion_content\').invoke(\'setStyle\', { height: accordionContentHeight });\n\n    // resize the sideNav\n    globalNavMenu.resizeRail();\n  },\n\n  resizeRail : function()\n  {\n    // if window has been resized with non empty more tools box, we need to redraw the box according to new viewport size\n    // so move all shortcuts out back to shortcut list first to start over\n    if ( $$(\'#global-more-tools > li\').size() > 0 )\n    {\n      $$(\'#global-more-tools > li\').each( function( shortcut )\n      {\n        $(\'global-more-link\').insert( { before : shortcut } );\n      });\n    }\n\n    var shortcuts = $$(\'#global-list-tools > li\');\n    // more link is always hidden\n    if ( shortcuts && shortcuts.length > 1 )\n    {\n      var globalHeight = $(\'global-nav-flyout\').getHeight();\n      var listHeight = $(\'global-list-tools\').getHeight();\n\n      //if the sidenav is larger than the menu\n      if( listHeight > globalHeight)\n      {\n        //resize the sidenav\n        $(\'global-nav-tools\').setStyle( { height : globalHeight +\'px\'});\n        $(\'global-more-link\').show();\n\n        // start from the second to last list item (this avoids the More link, which is the last item in the list)\n        // if the tools menu is larger than the global nav, insert the items that overflow into a separate list\n        // a while loop? are you kidding? somebody save me from myself.\n\n        var i = shortcuts.size()-2;\n        while ( listHeight > globalHeight && i >= 0 )\n        {\n          // move one shortcut to more box then remeasure sidenav height\n          $( \'global-more-tools\' ).insert( { top: shortcuts[i] } );\n          listHeight = $(\'global-list-tools\').getHeight();\n          i--;\n        }\n      }\n\n      if( $$(\'#global-more-tools > li\').size() === 0 )\n      {\n        $(\'global-more-link\').hide();\n      }\n    }\n  },\n\n  drawMoreBox : function()\n  {\n    // need to show it first to get heights\n    var more = $(\'global-more-tools\');\n    more.show();\n\n    var items = $$(\'#global-more-tools > li\').size();\n    var gridSize = Math.sqrt(items);\n    gridSize = Math.ceil(gridSize);\n\n    var item = $$(\'#global-more-tools li\')[0];\n    var itemHeight = item.getHeight() + item.style.paddingTop + item.style.paddingBottom;\n    gridSize *= itemHeight;\n\n    more.setStyle({height: gridSize +\'px\', width: gridSize +\'px\'});\n  },\n\n  onMoreClick : function( event )\n  {\n    var e = event || window.event;\n    var eventElement = Event.element( e );\n\n    if ( eventElement.up( \'.more-link\' ) )\n    {\n      var moreToolsBox = $(\'global-more-tools\');\n      if ( !moreToolsBox.visible() )\n      {\n        globalNavMenu.drawMoreBox();\n      }\n      else\n      {\n        moreToolsBox.hide();\n      }\n    }\n\n    eventElement.up().toggleClassName( \'active\' );\n\n    return false;\n  },\n\n  onShortcutClick : function( event )\n  {\n\n    var e = event || window.event;\n    Event.stop( e );\n\n    globalNavMenu.toggleMenu ( false );\n    top.welcomeOverlay.closeOverlay();\n    location = this.href;\n    return false;\n\n  },\n\n  onSectionClick : function( event )\n  {\n    var e = event || window.event;\n    Event.stop( e );\n\n    var contentArea = this.down();\n\n    var sectionId = contentArea.readAttribute( "data-section-id" );\n    var sectionUri = contentArea.readAttribute( "data-section-uri" );\n\n    var sectionContentDiv = $(sectionId+\'-content\');\n\n    if ( sectionContentDiv.visible() )\n    {\n      globalNavMenu.closeSection ( sectionContentDiv );\n    }\n    else\n    {\n      globalNavMenu.openSection ( sectionContentDiv, sectionUri );\n    }\n    globalNavMenu.saveActiveSection();\n    return false;\n  },\n\n  closeSection: function ( sectionContentDiv )\n  {\n    var allowCaching = "true" === sectionContentDiv.readAttribute( "data-allow-caching" );\n\n    if ( sectionContentDiv.visible() )\n    {\n      // no caching allowed - wipe out contents\n      if ( !allowCaching )\n      {\n        sectionContentDiv.innerHTML = "";\n      }\n\n      sectionContentDiv.setAttribute( \'aria-expanded\', \'false\' );\n      sectionContentDiv.setAttribute( \'aria-hidden\', \'true\' );\n\n      sectionContentDiv.hide();\n      \n    }\n  },\n\n  openSection: function ( sectionContentDiv, sectionUri )\n  {\n    $$(\'.accordion_content\').each( function( s ){\n      globalNavMenu.closeSection( s );\n    });\n\n\n    var allowCaching = "true" === sectionContentDiv.readAttribute( "data-allow-caching" );\n\n    sectionContentDiv.setAttribute( \'aria-expanded\', \'true\' );\n    sectionContentDiv.setAttribute( \'aria-hidden\', \'false\' );\n\n    \n    if ( !allowCaching || sectionContentDiv.empty() )\n    {\n      sectionContentDiv.addClassName("section-loading");\n      sectionContentDiv.show();\n\n      new Ajax.Request( sectionUri,\n                        {  method: \'get\',\n                           asynchronous: true,\n                           \n                           onSuccess: function(transport) {\n                             var result = transport.responseText;\n                             if ( result ) {\n                               sectionContentDiv.insert( { top: result } );\n                               globalNavMenu.attachSectionContentEventHandlers (sectionContentDiv);\n                               globalNavMenu.focusFirstSectionLink(sectionContentDiv);\n                             }\n\n                             sectionContentDiv.removeClassName("section-loading");\n                           }\n                        });\n    }\n        \n    else\n    {\n      sectionContentDiv.show();\n    }\n  },\n\n  \n  attachSectionContentEventHandlers: function(sectionContent) {\n  \n    // TBD I wonder whether we should be doing this at the menu level; or, rather, whether\n    // we should be doing it more generically\n    sectionContent.select("a").each ( function (anchor) {\n      \n      anchor.observe( "keydown", function(event)  {\n        \n        var key = event.keyCode;\n  \n        var accordionContentContainer = this.up(".accordion_content");\n  \n        if (key === Event.KEY_LEFT ) {\n            var sectionId = accordionContentContainer.readAttribute("data-section-id");\n  \n            // close the accordion section and put focus on the toggle\n            globalNavMenu.closeSection( $(sectionId + "-content") );\n            accordionContentContainer.previous().focus();\n            event.stop();\n        }\n        \n      });\n      \n    });\n    \n  },\n  \n  handleActiveSection : function( sectionId )\n  {\n    var sectionContentDiv = $(sectionId+"-content");\n    if ( sectionId.blank() || !sectionContentDiv )\n    {\n      sectionContentDiv = $$("div.accordion_content").first();\n    }\n\n    var sectionUri = sectionContentDiv.readAttribute("data-section-uri");\n\n    globalNavMenu.openSection( sectionContentDiv, sectionUri );\n  },\n\n  saveActiveSection : function()\n  {\n    var activeSectionId = null;\n    $$(\'.accordion_content\').each( function( s ){\n      if ( s.visible() )\n      {\n        activeSectionId = s.readAttribute("data-section-id");\n        return;\n      }\n    });\n\n    if ( activeSectionId )\n    {\n      UserDataDWRFacade.setStringTempScope( globalNavMenu.ACTIVE_SECTION_KEY, activeSectionId );\n    }\n    else\n    {\n      UserDataDWRFacade.removeStringTempScope( globalNavMenu.ACTIVE_SECTION_KEY );\n    }\n  },\n\n  updateTotalCount : function () {\n\n    var total = window.tool_service.getActivityCounts().values().inject( 0, function ( acc, count ) {\n      return acc + count;\n    });\n\n    var globalAvatar = $("global-avatar");\n\n    // display the total, or hide the badge, depending on whether we have any activity\n    if ( total > 0 )  {\n\n      var badgeTotalElement = $("badgeTotal");\n      var badgeCountElement = $("badgeTotalCount");\n\n      // update the badge\n      var badgeValue = window.tool_service.formatCount(total, window.tool_service.MAX_COUNT);\n      badgeCountElement.innerHTML = badgeValue;\n      badgeTotalElement.setStyle( { visibility : \'visible\'} );\n\n    }\n\n    else  {\n\n      $("badgeTotal").setStyle( { visibility : \'hidden\'} );\n\n    }\n\n  },\n\n\n  activityListener : {\n\n    activityCountsUpdated : function () {\n\n      if ( window.tool_service.getActivityCounts() ) {\n\n        window.tool_service.getActivityCounts().each ( function ( pair ) {\n\n\n          // if the tool has any activity, display its badge\n          if  ( pair.value > 0 ) {\n            globalNavMenu.showToolActivityValue( pair.key, pair.value );\n          }\n\n          // ... otherwise hide it\n          else {\n            globalNavMenu.removeToolActivityValue( pair.key );\n          }\n\n        });\n\n        globalNavMenu.updateTotalCount();\n\n      }\n\n      else {\n        $("badgeTotal").setStyle( { visibility : \'hidden\'} );\n      }\n\n    },\n\n    activityCountUpdated : function ( toolId ) {\n\n      var badgeValue = window.tool_service.getActivityCountForTool(toolId);\n\n      if ( badgeValue && badgeValue > 0 ) {\n        globalNavMenu.showToolActivityValue( toolId, badgeValue );\n      }\n\n      else {\n        globalNavMenu.removeToolActivityValue( toolId );\n      }\n\n      globalNavMenu.updateTotalCount();\n\n    }\n\n  },\n\n  // used by course section : course_menu_section.jsp\n  goToUrl: function( targetUrl )\n  {\n\n    // hide the menu\n    globalNavMenu.toggleMenu( false );\n\n    // replace the entire page\n    window.top.location.href = targetUrl;\n    return false;\n  },\n\n\n  /**\n   * Inserts the tool activity value in the badge element.\n   *\n   * @param toolId         The tool whose activity count we\'re updating\n   * @param activityCount  The activity count\n   */\n  showToolActivityValue: function( toolId, activityCount ) {\n\n    var badge = $(toolId + "::badge");\n\n    // update the badge\n    if ( badge ) {\n\n      var badgeValue = window.tool_service.formatCount(activityCount, window.tool_service.MAX_TOOL_COUNT);\n      badge.innerHTML = badgeValue;\n      badge.show();\n\n      // update hidden screen reader label to include activity data      \n      var shortcut = $(toolId + "_AXLabel");\n      shortcut.innerHTML = shortcut.getAttribute("data-tool-title") + " - " + page.bundle.getString("tool.activity.description");\n    }\n\n  },\n\n  /**\n   * Removes tool actvity values from the UI.\n   *\n   * @param The tool whose activity count we\'re updating.\n   */\n  removeToolActivityValue: function( toolId ) {\n\n    var badge = $(toolId + "::badge");\n\n    if ( badge ) {\n      badge.innerHTML = ""; // necessary to prevent JAWS/IE from announcing the value, even when it\'s hidden: known issue with JAWS and hidden <spans> inside <a> tags\n      badge.hide();\n      \n      // wipe out screen reader label\n      var shortcut = $(toolId + "_AXLabel");\n      shortcut.innerHTML = "";\n    }\n\n  },\n  \n\n  focusFirstShortcut: function() {\n\n    var firstShortcut = $$(".mybb-tools a:first").first();\n\n    if ( firstShortcut ) {\n      try \n      {\n        firstShortcut.focus();\n      } \n      catch (e)\n      {\n        // Ignore - in IE you cannot set focus on an element that isn\'t visible and this may not be visible right now.\n        // TODO: investigate why we are trying to focus on a not-visible element.\n      }\n    }\n\n  },\n\n\n  focusFirstSectionLink: function ( container ) {\n    \n    // next try to focus on the first non-hidden link\n    var links = container.select ("a[class!=\'hideoff\']" );\n    \n    if ( links && links.length > 0 ) {\n      $( links[ 0 ] ).focus();\n    }\n    \n  },\n  \n  \n  keyboardCloseMenu: function() {\n\n    // temporarily suppress the on-focus-open behavior of IE, because we don\'t want the menu to pop\n    // back open as soon as it\'s closed\n    if ( Prototype.Browser.IE ) {\n      $("global-nav-link").stopObserving( "focus", globalNavMenu.onNavLinkClick );\n    }\n    \n    globalNavMenu.toggleMenu(false);\n    $("global-nav-link").focus();\n\n    // re-instate on-focus-open\n    if ( Prototype.Browser.IE ) {\n      window.setTimeout ( function() { $("global-nav-link").observe( "focus", globalNavMenu.onNavLinkClick ); }, 50 );\n    }\n    \n  },\n  \n  preventDefault: function() \n  {\n    event.returnValue = false;\n    if ($("global-nav-flyout").visible())\n    {\n      $("global-nav-link").blur();\n    }\n  },\n\n\n  //jquery for mobile menu modifications.  Currently only called when display is under 1025px\n\n  mobileMenuMods : function () \n  {\n    //pull down new learn mobile nav\n    $j(".global-nav-bar-wrap-mobile-nav").find(".hamburger").on("click", function(){\n      $j("#globalNavPageNavArea").toggleClass("main-nav-open");\n      $j(this).toggleClass("is-active"); \n      $j(".appTabs td").show();\n    });\n\n    if ($j("body").hasClass("mybb-shell")) {\n      $j(".appTabs td:first-of-type").addClass("active");\n    }\n\n\n    //slide sidebar of goals and assesments similar to course menu\n    if ($j("#goals-tool-list") || $j(".portfolioLeftPage")) {\n      $j("#globalNavPageContentArea").on("click", "#goals-tool-list",  function () {\n          if (this.hasClassName("tools-list-open")) {\n          this.removeClassName("tools-list-open");\n        } else {\n          this.addClassName("tools-list-open");\n        }\n      });\n\n      $j("#globalNavPageContentArea").on("click", ".portfolioLeftPage",  function () {\n          if (this.hasClassName("tools-list-open")) {\n          this.removeClassName("tools-list-open");\n        } else {\n          this.addClassName("tools-list-open");\n        }\n      });\n    }\n\n    var paneTabs = $j("#paneTabs").detach();\n    $j(".appTabs td.active").append(paneTabs);\n\n    var mybbnav = $j("#global-nav").detach();\n    $j(mybbnav).insertAfter("#appTabList td:last-of-type");\n  },\n\n  reverseMobileMenuMods : function()\n  {\n    //rollback mobile menu changes fired at below 1025px, replaces moved elements and removes some click handelers\n    if  ($j(".appTabs").find("#global-nav").length) {\n\n      $j(".global-nav-bar-wrap-mobile-nav").find(".hamburger").off("click", function(){\n        $j("#globalNavPageNavArea").toggleClass("main-nav-open");\n        $j(this).toggleClass("is-active");\n        $j(".appTabs td").show();\n      });\n\n          //slide sidebar of goals and assesments similar to course menu\n      if ($j("#goals-tool-list") || $j(".portfolioLeftPage")) {\n        $j("#globalNavPageContentArea").off("click", "#goals-tool-list",  function () {\n            if (this.hasClassName("tools-list-open")) {\n            this.removeClassName("tools-list-open");\n          } else {\n            this.addClassName("tools-list-open");\n          }\n        });\n\n        $j("#globalNavPageContentArea").off("click", ".portfolioLeftPage",  function () {\n            if (this.hasClassName("tools-list-open")) {\n            this.removeClassName("tools-list-open");\n          } else {\n            this.addClassName("tools-list-open");\n          }\n        });\n      }\n\n      var paneTabs = $j("#paneTabs").detach();\n      $j(".paneTabs").append(paneTabs);\n\n      var mybbnav = $j("#global-nav").detach();\n      $j(mybbnav).insertAfter(".global-nav-bar.logout");\n\n    }\n  },\n\n  mobileGlobalNavHandling : function() \n  {\n    $j(".appTabs td").hide();\n  },\n  \n};\n'