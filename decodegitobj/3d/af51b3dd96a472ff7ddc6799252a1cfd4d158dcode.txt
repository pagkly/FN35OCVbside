b'blob 39372\x00var courseMenu = {};\n\ncourseMenu.Util = {};\n\ncourseMenu.Util.getTocItemTemplate = function( type, isHidden, isEmpty, menuGeneratorUrl )\n{\n    var template = \'\';\n    var url = ( menuGeneratorUrl ) ? menuGeneratorUrl : \'/webapps/blackboard/execute/getCourseMenuContextMenu\';\n    var closeStr = page.bundle.getString("closeStr");\n    var moreOptionsStr = page.bundle.getString("moreOptionsStr");\n    var reorderSpan = \'<span class="reorder editmode"><span><img src="\' + getCdnURL( "/images/ci/icons/generic_updown.gif" ) + \'" alt="" /></span></span>\';\n    var contextMenuTemplate =\n      "<span class=\'contextMenuContainer\' bb:menuGeneratorURL=\'" + url + "\' bb:contextParameters=\'course_id=<&= courseId &>&toc_id=<&= id &>\'>" +\n      "<a class=\'cmimg editmode\' href=\'#contextMenu\' title=\'" + moreOptionsStr + "\'><img src=\'" + getCdnURL( "/images/ci/icons/cm_arrow.gif" ) + "\' alt=\'" + moreOptionsStr + "\'></a> " +\n      "<div id=\'menudiv\' class=\'cmdiv\' style=\'display:none;\'> "+\n       "<ul><li class=\'contextmenubar_top\'><a title=\'" + closeStr + "\' href=\'#close\'><img alt=\'" + closeStr + "\' src=\'" + getCdnURL( "/images/ci/ng/close_mini.gif" ) + "\'></a></li></ul></div></span>";\n\n    if ( type == \'DIVIDER\' )\n    {\n      template = "<li class=\'divider\' id=\'paletteItem:<&= id &>\'>"+reorderSpan+"<hr>";\n    }\n    else if ( type == \'SUBHEADER\' )\n    {\n      template = "<li class=\'subhead\' id=\'paletteItem:<&= id &>\'>"+reorderSpan+"<h3><span><&= name &></span></h3>";\n    }\n    else\n    {\n      var liClass = (isHidden || isEmpty) ? \'clearfix invisible editmode\' : \'clearfix\';\n      template = "<li id=\'paletteItem:<&= id &>\' class=\'"+ liClass +"\'>"+reorderSpan;\n       if (type == \'URL\')\n       {\n         template += "<a onClick=\\"this.href=\'<&= href &>\';\\" href=\'<&= url &>\' target=\'<&= target &>\' id=\'label:<&= id &>\'><span title=\'<&= name &>\'><&= name &></span>";\n       }\n       else\n       {\n         template += "<a href=\'<&= href &>\' target=\'<&= target &>\' id=\'label:<&= id &>\'><span title=\'<&= name &>\'><&= name &></span>";\n       }\n\n      if ( isHidden )\n      {\n        var hiddenStr = page.bundle.getString("hiddenStr");\n        template += "<span class=\'cmLink-hidden\' title=\'" + hiddenStr + "\'><img src=\'" + getCdnURL( "/images/spacer.gif" ) + "\' alt=\'" + hiddenStr + "\'/></span>";\n      }\n      if ( isEmpty )\n      {\n        var emptyStr = page.bundle.getString("emptyStr");\n        template += "<span class=\'cmLink-empty\' title=\'" + emptyStr + "\'><img src=\'" + getCdnURL( "/images/spacer.gif" ) + "\' alt=\'" + emptyStr + "\'/></span>";\n      }\n      template += "</a>";\n    }\n    return template + contextMenuTemplate;\n};\n\n/**\n * Controls the dynamic course menu behaviour.\n */\ncourseMenu.CourseMenu = Class.create();\ncourseMenu.CourseMenu.prototype =\n{\n  initialize: function( menuActionUrl, menuGeneratorUrl )\n  {\n    //checking if course is within Ultra iframe so i can add classes that will apply ipad specific UI css needed to fix iframe bugs\n    if (page.util.parentWindowIsUltraApp()) {\n     document.body.addClassName(\'isUltra\');\n    }\n\n    if (window.matchMedia("(max-width: 1024px)").matches) {\n      instructorSettingsMobileMenu();\n      mobileCourseMenuMods();\n    }\n\n    $j(window).resize(function() {\n        if($j(window).width() < 1025) {\n          instructorSettingsMobileMenu();\n          mobileCourseMenuMods();\n        } else {\n          reverseMobileCourseMenuMods();\n        }\n    });\n    \n    this.menuActionUrl = \'/webapps/blackboard/execute/doCourseMenuAction\';\n    if( menuActionUrl )\n    {\n      this.menuActionUrl= menuActionUrl;\n    }\n\n    this.menuGeneratorUrl = \'/webapps/blackboard/execute/getCourseMenuContextMenu\';\n    if( menuGeneratorUrl )\n    {\n      this.menuGeneratorUrl = menuGeneratorUrl;\n    }\n    var addButton = $(\'addCmItem\'); // open the flyout form relative to this element\n    this.editMode = false;\n    if ( addButton )\n    {\n        this.editMode = true;\n      var addNewMenuItemFunc = this._addNewMenuItem.bind( this );\n      var afterModifyItemFunc = this._afterModifyItem.bind( this );\n\n      if( $(\'pickerLink\') )\n      {\n        Event.observe( \'pickerLink\', \'click\', this._showCourseLinkPicker.bindAsEventListener( this ) );\n      }\n\n      if( $(\'modifyCourseLinkPickerLink\') )\n      {\n        Event.observe( \'modifyCourseLinkPickerLink\', \'click\', this._showModifyCourseLinkPicker.bindAsEventListener( this ) );\n      }\n\n        var addButtonLink = $(addButton.getElementsByTagName(\'a\')[0]);\n\n    // Initialize flyout forms\n    new flyoutform.FlyoutForm({  linkId:\'addContentAreaButton\',\n                  formDivId:\'addContentAreaForm\',\n                  openRelativeItem:addButton,\n                  customPostSubmitHandler:addNewMenuItemFunc,\n                  onCloseFocusItem:addButtonLink });\n\n    // Initialize flyout forms\n    if ( $s(\'addBlankPageButton\') )\n    {\n      new flyoutform.FlyoutForm({  linkId:\'addBlankPageButton\',\n                    formDivId:\'addBlankPageForm\',\n                    openRelativeItem:addButton,\n                    customPostSubmitHandler:addNewMenuItemFunc,\n                    onCloseFocusItem:addButtonLink });\n    }\n\n    new flyoutform.FlyoutForm({  linkId:\'addToolLinkButton\',\n                  formDivId:\'addToolLinkForm\',\n                  openRelativeItem:addButton,\n                  customPostSubmitHandler:addNewMenuItemFunc,\n                  onCloseFocusItem:addButtonLink });\n\n    if( $(\'addToolLinkButton\') )\n    {\n      Event.observe( \'addToolLinkButton\', \'click\', function()\n      {\n        setTimeout( function()\n        {\n          var toolSelect = $(\'toolSelect\');\n          if ( toolSelect )\n          {\n            // dynamically load the tool select if not already done\n              if ( toolSelect.length === 0)\n            {\n                CourseMenuDWRFacade.getCourseTools( window.course_id, function( tools )\n              {\n                dwr.util.addOptions( "toolSelect", tools);\n              });\n            }\n            toolSelect.selectedIndex = 0;\n          }\n        }, 100); // wait for the flyout to open before loading\n      });\n    }\n\n    if ( $s(\'addCourseLinkButton\' ) )\n    {\n      new flyoutform.FlyoutForm({  linkId:\'addCourseLinkButton\',\n                    formDivId:\'addCourseLinkForm\',\n                    openRelativeItem:addButton,\n                    customPostSubmitHandler:addNewMenuItemFunc,\n                    onCloseFocusItem:addButtonLink });\n    }\n    if ( $s(\'addExternalLinkButton\' ) )\n    {\n      new flyoutform.FlyoutForm({  linkId:\'addExternalLinkButton\',\n                    formDivId:\'addExternalLinkForm\',\n                    openRelativeItem:addButton,\n                    customPostSubmitHandler:addNewMenuItemFunc,\n                    onCloseFocusItem:addButtonLink });\n    }\n    if ( $s(\'addModulePageButton\' ) )\n    {\n      new flyoutform.FlyoutForm({  linkId:\'addModulePageButton\',\n                    formDivId:\'addModulePageForm\',\n                    openRelativeItem:addButton,\n                    customPostSubmitHandler:addNewMenuItemFunc,\n                    onCloseFocusItem:addButtonLink });\n    }\n\n    new flyoutform.FlyoutForm({  linkId:\'addSubHeaderButton\',\n                  formDivId:\'addSubheaderForm\',\n                  openRelativeItem:addButton,\n                  customPostSubmitHandler:addNewMenuItemFunc,\n                  onCloseFocusItem:addButtonLink });\n\n    new flyoutform.FlyoutForm({  formDivId:\'addDividerForm\',\n                  customPostSubmitHandler:addNewMenuItemFunc,\n                  onCloseFocusItem:addButtonLink });\n\n    // when adding dividers, no need show form, just submit it\n    if( $(\'addDividerButton\') )\n    {\n      Event.observe( \'addDividerButton\', \'click\', function()\n        {\n          flyoutform.flyoutForms.addDividerForm.submit();\n        });\n      }\n\n    // opening of modify... flyout forms is handled via context menu rather than button\n    new flyoutform.FlyoutForm({  formDivId:\'modifyCourseLinkForm\',\n                  resetFormOnOpen:false,\n                  customPostSubmitHandler:null});\n\n    new flyoutform.FlyoutForm({  formDivId:\'modifyExternalLinkForm\',\n                  resetFormOnOpen:false,\n                  customPostSubmitHandler:this._afterModifyExternalLinkItem.bind( this ) });\n\n    }\n  // Hack for Safari for links in a new window\n    if ( window.inNewWindow )\n    {\n      this.inNewWindow = true;\n      $A(document.getElementsByTagName(\'a\')).each( function( item )\n      {\n        // This is never going to happen because the frame removal project removed all instances of target="content"\n        if ( item.target == \'content\' )\n        {\n          Event.observe(item, "click", this._targetParentWindow.bindAsEventListener( this, item ));\n        }\n      }.bind(this));\n    }\n    else\n    {\n      this.inNewWindow = false;\n    }\n\n  this.courseMapLink = $(\'courseMapButton\');\n  if ( this.courseMapLink )\n  {\n    Event.observe( this.courseMapLink, \'click\', this._showCourseMenuInWindow.bindAsEventListener( this ));\n  }\n\n    this.quickViewLink = $(\'quickViewLink\');\n    this.quickViewContainer = $(\'courseMenuPalette_contents\');\n    if ( this.quickViewLink )\n    {\n      Event.observe( this.quickViewLink, \'click\', this._showQuickView.bindAsEventListener( this ) );\n    }\n\n  this.expandAllLink = $(\'expandAllLink\');\n  this.collapseAllLink = $(\'collapseAllLink\');\n  if ( this.expandAllLink && this.collapseAllLink )\n  {\n\tEvent.observe( this.expandAllLink, \'click\', this._detailViewExpandAll.bindAsEventListener( this ) );\n\tEvent.observe( this.collapseAllLink, \'click\', this._detailViewCollapseAll.bindAsEventListener( this ) );\n    var courseMenuDivs = $(\'courseMenuPalette\').getElementsByTagName(\'div\');\n    var courseMenuContents = null;\n    for ( var i = 0; i < courseMenuDivs.length; i++ )\n    {\n      if ( page.util.hasClassName( courseMenuDivs[i], \'navPaletteContent\') )\n      {\n        courseMenuContents = $(courseMenuDivs[i]);\n      }\n    }\n    this.detailViewContainer = new Element("div", { id: \'courseMenu_folderView\',style: \'display: none;\' }).addClassName(\'treeContainer\');\n    courseMenuContents.appendChild(this.detailViewContainer);\n    this.tree = null;\n    $(this.collapseAllLink.getElementsByTagName(\'a\')[0]).addClassName(\'options\');\n    this._showDetailView();\n  }\n\n  this.refreshLink = $(\'refreshMenuLink\');\n  if ( this.refreshLink )\n  {\n    Event.observe( this.refreshLink, \'click\', this._refreshMenu.bindAsEventListener(this) );\n  }\n\n  this.quickEnrollLink = $(\'quickEnrollLink\');\n  if ( this.quickEnrollLink)\n  {\n    Event.observe( this.quickEnrollLink, \'click\', this._quickEnrollToggle.bindAsEventListener(this) );\n  }\n\n  this.quickGuestEnrollLink = $(\'quickGuestEnrollLink\');\n  if ( this.quickGuestEnrollLink)\n  {\n    Event.observe( this.quickGuestEnrollLink, \'click\', this._guestEnrollToggle.bindAsEventListener(this) );\n  }\n\n  var renameSubHeaderInputBox = $("renameSubHeaderInputBox");\n  if ( renameSubHeaderInputBox )\n  {\n    Event.observe( renameSubHeaderInputBox, "keydown", this.onKeyDown.bindAsEventListener( this ) );\n  }\n\n  var renameSubHeaderForm = $(\'renameSubHeaderForm\');\n  if ( renameSubHeaderForm )\n  {\n      renameSubHeaderForm.remove();\n      document.body.appendChild( renameSubHeaderForm );\n    }\n\n  this.initPaletteState();\n  this._updateSubheaders();\n  },\n\n  /**\n   * Update the appearance of subheader names in the accessible drag and drop window\n   * for course menu toc reordering to "Subheader: [subheader_name]".\n   * And, of course, this applies in course menu edit mode only.\n   */\n  _updateSubheaders: function( )\n  {\n    if( this.editMode )\n    {\n      var firstTocItem = $( \'courseMenuPalette_contents\' ).down( \'li\' );\n      var hideReorderBtn = !firstTocItem.readAttribute( \'id\' );// prototype bug with IE7\n      // create a map of option values to options\n      var optionMap = {};\n      dragdrop.ListReordering.addDivs();\n\n      var sel = $(\'courseMenuPalette_pageListReorderControlSelect\');\n      $A(sel.options).each( function( o )\n      {\n        optionMap[o.value] = o;\n      });\n      dragdrop.ListReordering.removeDivs();\n      var lst = $(\'courseMenuPalette_contents\');\n      $A(lst.getElementsByTagName("li")).each( function( listItem )\n      {\n        if ( $(listItem).hasClassName(\'subhead\') )\n        {\n          // isolate id (after last colon)\n          var id = listItem.id;\n          id = id.substr( id.lastIndexOf(\':\') + 1 );\n          var option = optionMap[id];\n          // prepend "Subheader: " to option label\n          $(option).update( page.bundle.getString("subheaderColonStr", option.innerHTML) );\n        }\n      });\n      if( hideReorderBtn )\n      {\n        $( \'courseMenuPalette_reorderControlLink\' ).up( \'li\' ).hide();\n      }\n    }\n  },\n\n  _targetParentWindow: function( event, item )\n  {\n    Event.stop( event );\n    window.opener.top.content.location = item.href;\n  },\n\n  /**\n   * Enters initial prompt workflow for top-level coures toc removal.\n   */\n  deleteItem: function( toc_id )\n  {\n    var viewUrl = this.appendMenuActionUrl( \'cmd=deleteContentArea&course_id=\'+course_id+\'&toc_id=\'+toc_id );\n    this.DeleteItemBox = new lightbox.Lightbox(\n      {\n        focusOnClose : $( \'paletteItem:\' + toc_id ),\n        showCloseLink : false,\n        closeOnBodyClick : false,\n        dimensions :\n        {\n          w : 400,\n          h : 280\n        },\n        ajax :\n        {\n          url : viewUrl\n        }\n      } );\n    this.DeleteItemBox.open();\n  },\n  \n  /**\n   * Secondary confirmation for deletion including report of children if any exist.\n   */\n  deleteItemConfirmation: function( toc_id )\n  {\n    var viewUrl = this.appendMenuActionUrl( \'cmd=deleteContentAreaConfirmation&course_id=\'+course_id+\'&toc_id=\'+toc_id );\n    courseMenu.DeleteItemBox = new lightbox.Lightbox(\n      {\n        focusOnClose : $( \'paletteItem:\' + toc_id ),\n        showCloseLink : false,\n        closeOnBodyClick : false,\n        dimensions :\n        {\n          w : 400,\n          h : 280\n        },\n        ajax :\n        {\n          url : viewUrl\n        }\n      } );\n    courseMenu.DeleteItemBox.open();\n    return false;  \n  },\n\n  /**\n   * Closes confirmation lightboxes.  Successive open of lightboxes caused the de factor lightbox closure\n   * to exhibit failing behavior.\n   */\n  closeConfirmation: function()\n  {\n    if (courseMenu.DeleteItemBox)\n      courseMenu.DeleteItemBox.close();\n    else\n      lightbox.closeCurrentLightbox();\n  },\n  \n  /**\n   * Deletes a course menu item for the given item (toc) id\n   *   Prompts the user for confirmation before deleting\n   *  Calls the server to remove the Toc\n   *  The current doc location is sent as a retUrl param to allow reloading the current\n   *    page after deleting the item.\n   */\n   removeToc: function( toc_id )\n   {\n     var retUrl = escape(document.location.href);\n     new Ajax.Request(this.appendMenuActionUrl( \'cmd=removeToc&course_id=\'+course_id+\'&toc_id=\'+toc_id+ \'&retUrl=\' + retUrl + \'&\' + courseMenu.nonceKey + \'=\' + courseMenu.nonceValue ), \n     {\n      //the onLoaded function has been added to close the DeleteItemBox once the request has been submitted, so that user does not click the Delete button again.\t \n       onLoaded: function()\n       {   \n          courseMenu.CourseMenu.prototype.closeConfirmation();\n       },\n       onSuccess: function(transport, json) \n       {\n         var result = transport.responseText.evalJSON( true );\n         if ( result.success == "true" )\n         {\n           window.location = result.refreshUrl;\n         }\n         else\n         {\n            new page.InlineConfirmation("error", result.errorMessage, false );\n         }\n       }\n       } );\n   },\n\n   /**\n    * Hides toc item without additional confirmation steps.\n    * Workflow steps handle confirmation via lightboxes.\n    */\n   hideItem: function( toc_id )\n  {\n    var url = this.appendMenuActionUrl( "cmd=hideTocItem&course_id="+course_id+"&toc_id="+toc_id+"&retUrl="+escape(document.location.href) );\n    window.location.href = url;\n  },\n\n  toggleItemAvailability: function( toc_id, isEntryPoint )\n  {\n    var changeEntryPont = true;\n    if ( isEntryPoint )\n    {\n      var entryPointChangeConfirmStr = page.bundle.getString("entryPointChangeConfirmStr");\n      changeEntryPont = confirm ( entryPointChangeConfirmStr );\n    }\n    if(  changeEntryPont )\n    {\n      var url = this.appendMenuActionUrl( "cmd=toggleTocAvailability&course_id="+course_id+"&toc_id="+toc_id+"&retUrl="+escape(document.location.href) );\n      window.location.href = url;\n    }\n  },\n\n  modifyCourseLink: function( toc_id )\n  {\n    var courseLinkId = \'paletteItem:\' + toc_id;\n    var url = this.appendMenuActionUrl( \'cmd=getCourseLinkTitle&course_id=\'+window.course_id+\'&toc_id=\'+toc_id );\n    new Ajax.Request( url, {\n    onSuccess: function(transport, json) {\n      var result = transport.responseText.evalJSON( true );\n      if ( result.success == "true" )\n      {\n        flyoutform.flyoutForms.modifyCourseLinkForm.open( $(courseLinkId).down(\'a\') );\n        $s(\'modifiedLinkLocation\').value = result.linkLocation;\n        $s(\'modifyCourseLinkFormTocId\').value = toc_id;\n        $s(\'modifiedLinkId\').value = result.linkedItemId;\n        $s(\'modifiedLinkType\').value = result.linkedItemType;\n      }\n     else\n     {\n       new page.InlineConfirmation("error", result.errorMessage, false );\n     }\n    }\n  });\n  },\n\n  modifyExternalLink: function( toc_id )\n  {\n    var externalLinkId = \'paletteItem:\' + toc_id;\n    var url = this.appendMenuActionUrl( \'cmd=getExternalLinkUrl&course_id=\'+window.course_id+\'&toc_id=\'+toc_id );\n    new Ajax.Request( url, {\n    onSuccess: function(transport, json) {\n      var result = transport.responseText.evalJSON( true );\n      if ( result.success == "true" )\n      {\n        flyoutform.flyoutForms.modifyExternalLinkForm.open( $(externalLinkId).down(\'a\') );\n        $s(\'modifyExternalLinkFormTocId\').value = toc_id;\n        $s(\'externalLinkUrlInputId\').value = result.linkUrl;\n      }\n     else\n     {\n       new page.InlineConfirmation("error", result.errorMessage, false );\n     }\n    }\n  });\n  },\n\n  toggleItemLaunchInd: function( toc_id )\n  {\n    var tocId = \'paletteItem:\' + toc_id;\n    var cmItem = $(\'toggleTocLaunchIndex:\' + toc_id);\n    var url = this.appendMenuActionUrl( \'cmd=toggleTocLaunchIndex&course_id=\'+window.course_id+\'&toc_id=\'+toc_id );\n    new Ajax.Request( url, {\n    onSuccess: function(transport, json) {\n      var result = transport.responseText.evalJSON( true );\n      if ( result.success == "true" )\n      {\n        var tocLink = $(tocId).down(\'a\');\n        tocLink.target = result.windowType;\n        tocLink.href = result.href;\n        cmItem.innerHTML = result.menuItem;\n        if ( result.warning )\n        {\n          new page.InlineConfirmation("warning", result.warning, false );\n        }\n      }\n     else\n     {\n       new page.InlineConfirmation("error", result.errorMessage, false );\n     }\n    }\n  });\n  },\n\n  submitRequestAsPost: function( action, toc_id )\n  {\n    // generate a form on the fly\n    var url = this.appendMenuActionUrl( "cmd=" + action + "&course_id=" + window.course_id + "&toc_id=" + toc_id + "&retUrl=" + escape( document.location.href ) );\n    var form = new Element( \'form\', { action: url, method: \'POST\', style: \'display:none;\' } );\n    document.body.appendChild( form );\n    var nonceInput = new Element( \'input\', { type: \'hidden\', name: courseMenu.nonceKey, value: courseMenu.nonceValue } );\n    form.appendChild( nonceInput );\n    form.submit();\n  },\n\n  toggleItemGuestAccess: function( toc_id )\n  {\n    this.submitRequestAsPost( \'modifyGuestAccessibility\', toc_id );\n  },\n\n  toggleItemObserverAccess: function( toc_id )\n  {\n    this.submitRequestAsPost( \'modifyObserverAccessibility\', toc_id );\n  },\n\n  renameItem: function( toc_id, targetType )\n  {\n   var subHeaderId = \'paletteItem:\' + toc_id;\n   var val;\n   this.renameTocId = toc_id;\n   if(targetType)\n   {\n     this.renameTargetType = targetType;\n     val = $(subHeaderId).down(\'h3\').down(\'span\').innerHTML;\n     $(\'renameSubHeaderInputBox\').value = val;\n     Position.clone($(subHeaderId).down(\'h3\').down(\'span\'),$("renameSubHeaderForm"),{ setLeft: true, setTop: true, setWidth: false, setHeight: false } );\n   }\n   else\n   {\n     this.renameTargetType = \'\';\n     val = $(subHeaderId).down(\'a\',0).down(\'span\',0).innerHTML;\n     $(\'renameSubHeaderInputBox\').value = val;\n     Position.clone($(subHeaderId).down(\'a\',0).down(\'span\',0),$("renameSubHeaderForm"),{ setLeft: true, setTop: true, setWidth: false, setHeight: false } );\n   }\n   $("renameSubHeaderForm").setStyle({display : \'block\'});\n   if (!this.modalOverlay)\n   {\n     this.modalOverlay = new ModalOverlay( $("renameSubHeaderForm") );\n   }\n   this.modalOverlay.setDisplay( true );\n   $("renameSubHeaderInputBox").focus();\n   $("renameSubHeaderInputBox").select();\n  },\n\n  onKeyDown: function( event )\n  {\n  if (event.keyCode == Event.KEY_ESC)\n  {\n      Event.stop( event );\n      this.cancelRename();\n  }\n\n  else if(event.keyCode == Event.KEY_RETURN){\n    Event.stop( event );\n    this.saveRenamedSubHeaderItem();\n  }\n  },\n\n  cancelRename: function()\n  {\n    this.modalOverlay.setDisplay( false );\n    $("renameSubHeaderForm").setStyle({display : \'none\'});\n  },\n\n  saveRenamedSubHeaderItem: function()\n  {\n    var toc_id = this.renameTocId;\n    var new_name = $("renameSubHeaderInputBox").value;\n\n    if(!new_name.blank())\n    {\n      var subHeaderId = \'paletteItem:\' + toc_id;\n      var url = this.appendMenuActionUrl( \'cmd=renameSubHeader&course_id=\'+window.course_id+\'&toc_id=\'+toc_id+\'&new_name=\'+encodeURIComponent(new_name) );\n      new Ajax.Request( url, {\n        onSuccess: function(transport, json) {\n        var result = transport.responseText.evalJSON( true );\n        if ( result.success == "true" )\n        {\n          var newValue = $(\'renameSubHeaderInputBox\').value;\n          $(\'renameSubHeaderInputBox\').value = \'\';\n          $("renameSubHeaderForm").setStyle({display : \'none\'});\n          var dispElem;\n          if(this.renameTargetType == "subheader")\n          {\n            dispElem = $(subHeaderId).down(\'h3\').down(\'span\');\n            dispElem.title = newValue;\n            dispElem.innerHTML = newValue;\n          }\n          else\n          {\n            var link = $(subHeaderId).down(\'a\',0);\n            dispElem = link.down(\'span\',0);\n            dispElem.title = newValue;\n            dispElem.innerHTML = newValue;\n            if ( link.href.include(\'courseTocLabel=\') )\n            {\n              // Also rewrite the url of the link to insert the new name in it\n              link.href = link.href.sub( /courseTocLabel=([^&]+)/, \'courseTocLabel=\' + encodeURIComponent( newValue ) );\n            }\n          }\n        }\n       else\n       {\n         $("renameSubHeaderForm").setStyle({display : \'none\'});\n         new page.InlineConfirmation("error", result.errorMessage, false );\n       }\n         this.modalOverlay.setDisplay( false );\n      }.bind(this)\n    });\n    }\n    else\n    {\n      this.cancelRename();\n    }\n  },\n\n  _afterModifyItem: function ( result)\n  {\n    $(\'observerEnabledId\').removeAttribute("checked");\n  $(\'guestEnabledId\').removeAttribute("checked");\n  },\n\n  _afterModifyExternalLinkItem: function ( result)\n  {\n    var tocId = \'paletteItem:\' + result.tocId;\n    var tocLink = $(tocId).down(\'a\');\n    tocLink.setAttribute( "href",result.linkUrl );\n    if ( result.forceNewWindow == "true" )\n    {\n      tocLink.setAttribute( "target", "_blank" );\n      new page.InlineConfirmation("warning", result.forceNewWindowWarning, false );\n    }\n  },\n\n  _addNewMenuItem: function( result )\n  {\n    var newItem = result.returnData;\n\n    var inWizard = page.util.hasClassName( document.body, \'wizardBody\' );\n\n    // If it\'s a CONTENT_ITEM type and it has a URL, and we\'re not in the course creation\n    // wizard, redirect to that view URL.\n    if( newItem.type == \'CONTENT_ITEM\' && !inWizard && newItem.href && newItem.href != \'#\' )\n    {\n      document.location.href = newItem.href;\n      return;\n    }\n    // If it\'s in the course creation wizard, disable the link.\n    else if ( inWizard )\n    {\n      newItem.href = "#";\n      newItem.target = "";\n    }\n\n    var template = courseMenu.Util.getTocItemTemplate( newItem.type, newItem.enabled == \'false\', newItem.empty == \'true\', this.menuGeneratorUrl );\n    // create the appropriate html for the menu item using a template and the returned data,\n    // then add it to the bottom of the coursemenu\n    var syntax = /(^|.|\\r|\\n)(<\\&=\\s*(\\w+)\\s*\\&>)/; //matches symbols like \'<&= field &>\'\n    var t = new Template( template, syntax );\n    var d = t.evaluate( newItem );\n    $(\'courseMenuPalette_contents\').insert({bottom: d});\n\n    // add a select option for the item to the accessibleToolSelect\n    dragdrop.ListReordering.addDivs();\n    var sel = $(\'courseMenuPalette_pageListReorderControlSelect\');\n    var itemName = newItem.name;\n    if ( newItem.type == \'SUBHEADER\' )\n    {\n      itemName = page.bundle.getString("subheaderColonStr", itemName);\n    }\n\n    sel.options[sel.length] = new Option( itemName, newItem.id );\n    dragdrop.ListReordering.removeDivs();\n\n    // re-init DND by disabling and enabling it so new item is dragable\n    var dnd = dragdrop.controllers.find( function( dndController )\n    {\n      return ( dndController.itemContainer && dndController.itemContainer.id == \'courseMenuPalette_contents\');\n    }.bind(this));\n    dnd.disableDragAndDrop();\n    dnd.enableDragAndDrop();\n    dnd.calculateItemOrder();\n    //show the course menu reorder button\n    $( \'courseMenuPalette_reorderControlLink\' ).up( \'li\' ).show();\n    // add behavior to context menu of new item\n    var items = $(\'courseMenuPalette_contents\').childNodes;\n    var lastItem = items[items.length-1];\n    var contextMenu = $(lastItem).down( ".contextMenuContainer" );\n    if ( contextMenu )\n    {\n      new page.ContextMenu( contextMenu );\n    }\n    var id = lastItem.id;\n    id = id.replace("paletteItem","label");\n\n    // Focus on the new menu item after the DOM is ready\n    (function()\n    {\n        if ( $(id) != null )\n        {\n            $(id).focus();\n        }\n    }.defer());\n  },\n\n  _showCourseMenuInWindow: function( event )\n  {\n    if ( event )\n    {\n      Event.stop( event );\n    }\n    var lpix = screen.width - 800;\n    window.remote = window.open(\'/webapps/blackboard/content/courseMenu.jsp?course_id=\'+window.course_id+\'&newWindow=true&openInParentWindow=true\', \'newwin\', \'width=220,height=440,resizable=yes,scrollbars=yes,status=no,top=20,left=\'+lpix);\n    if ( window.remote )\n    {\n      window.remote.focus();\n      if ( !window.remote.opener )\n      {\n        window.remote.opener = self;\n      }\n      window.top.name = \'bbWin\';\n    }\n  },\n\n  _showCourseLinkPicker: function( )\n  {\n    var lpix = screen.width - 800;\n    window.remote = window.open(\'/webapps/blackboard/execute/course/courseMapPicker?displayMode=courseLinkPicker&course_id=\'+window.course_id, \'picker_browse\', \'width=250,height=350,resizable=yes,scrollbars=yes,status=yes,top=20,left=\'+lpix);\n    if ( window.remote )\n    {\n      window.remote.focus();\n      if ( !window.remote.opener )\n    {\n        window.remote.opener = self;\n      }\n      window.remote.opener.inputItemPathToSet = $(\'linkLocation\');\n      window.remote.opener.inputItemPKToSet = $(\'linkId\');\n      window.remote.opener.inputItemTypeToSet = $(\'linkType\');\n      window.remote.opener.callBack = this._linkPickerCallback.bind( this );\n      window.top.name = \'bbWin\';\n    }\n  },\n\n  _showModifyCourseLinkPicker: function( )\n  {\n    var lpix = screen.width - 800;\n    window.remote = window.open(\'/webapps/blackboard/execute/course/courseMapPicker?displayMode=courseLinkPicker&course_id=\'+window.course_id, \'picker_browse\', \'width=250,height=350,resizable=yes,scrollbars=yes,status=yes,top=20,left=\'+lpix);\n    if ( window.remote )\n    {\n      window.remote.focus();\n      if ( !window.remote.opener )\n    {\n        window.remote.opener = self;\n      }\n      window.remote.opener.inputItemPathToSet = $(\'modifiedLinkLocation\');\n      window.remote.opener.inputItemPKToSet = $(\'modifiedLinkId\');\n      window.remote.opener.inputItemTypeToSet = $(\'modifiedLinkType\');\n      window.remote.opener.callBack = this._ModifyLinkPickerCallback.bind( this );\n      window.top.name = \'bbWin\';\n    }\n  },\n\n  _ModifyLinkPickerCallback: function( )\n  {\n    flyoutform.flyoutForms.modifyCourseLinkForm.updateSubmitButtonEnable();\n  },\n\n  _linkPickerCallback: function( )\n  {\n    var link_name = $("linkLocation").value.split(\'/\').pop();\n    var linkNameField = $("addCourseLinkName");\n    var origName = linkNameField.value;\n    if (origName.trim() == \'\')\n    {\n      linkNameField.value = link_name;\n    }\n    flyoutform.flyoutForms.addCourseLinkForm.updateSubmitButtonEnable();\n  },\n\n  _showDetailView: function( event )\n  {\n    if ( event )\n    {\n      Event.stop( event );\n    }\n    \n    CourseMenuDWRFacade.setMenuDisplayMode( window.course_id, true);\n\n    if ( this.quickViewLink )\n    {\n      this.quickViewLink.removeClassName(\'active\');\n    }\n\n    // set the curently active palette contents container so expand/collapse on palette will work\n    page.PaletteController.setActivePaletteContentsContainer( "courseMenuPalette", this.detailViewContainer );\n\n    var keyboardDndLink = $(\'courseMenuPalette_reorderControlLink\');\n    if ( keyboardDndLink )\n    {\n      keyboardDndLink.up().hide();\n    }\n    var addItemLink = $(\'addCmItem\');\n    if ( addItemLink )\n    {\n      addItemLink.hide();\n    }\n    this.quickViewContainer.hide();\n    this.detailViewContainer.show();\n\n    if ( !this.tree || this.editMode )\n    {\n      var displayMode = "courseMenu";\n      if ( this.inNewWindow )\n      {\n        displayMode = "courseMenu_newWindow";\n      }\n      this.tree = new dynamictree.Tree( this.detailViewContainer, null, \'/webapps/blackboard/execute/course/menuFolderViewGenerator\', \'course_id=\'+window.course_id+\'&displayMode=\'+displayMode+\'&editMode=\'+this.editMode+\'&openInParentWindow=true\', true );\n    }\n\n  },\n\n  _detailViewExpandAll: function( event )\n  {\n    Event.stop( event );\n    if ( this.tree )\n    {\n      this.tree.expandAll();\n    }\n  },\n\n  _detailViewCollapseAll: function( event )\n  {\n    Event.stop( event );\n    if ( this.tree )\n    {\n      this.tree.collapseAll();\n    }\n  },\n\n  _showQuickView: function( event )\n  {\n    if ( event )\n    {\n      Event.stop( event );\n    }\n\n    this.quickViewLink.addClassName(\'active\');\n\n    // set the curently active palette contents container so expand/collapse on palette will work\n    page.PaletteController.setActivePaletteContentsContainer( "courseMenuPalette", this.quickViewContainer );\n\n    var keyboardDndLink = $(\'courseMenuPalette_reorderControlLink\');\n    if ( keyboardDndLink )\n    {\n      keyboardDndLink.up().show();\n    }\n    var addItemLink = $(\'addCmItem\');\n    if ( addItemLink )\n    {\n      addItemLink.show();\n    }\n    this.quickViewContainer.show();\n    this.detailViewContainer.hide();\n\n    CourseMenuDWRFacade.setMenuDisplayMode( window.course_id, false);\n  },\n\n  _refreshMenu: function( event )\n  {\n    Event.stop( event );\n    var loc = window.location + \'\';\n    var hashLoc = loc.indexOf("#");\n    if ( hashLoc >= 0 )\n    {\n      loc = loc.substring(0, hashLoc);\n    }\n    if ( loc.indexOf(\'refreshCourseMenu\') < 0 )\n    {\n      loc = this.appendQueryString( loc, \'refreshCourseMenu=true\' );\n    }\n    window.location = loc;\n  },\n\n  _guestEnrollToggle: function( event )\n  {\n    Event.stop( event );\n    window.location = \'/webapps/blackboard/execute/enrollCourse?context=INMENU&course_id=\'+window.course_id;\n  },\n\n  _quickEnrollToggle: function( event )\n  {\n    Event.stop( event );\n    var nonceIdValue = nonceUtil.getNonceIdValue(/* no formId since there is not form for the quick enroll drop down*/);\n\n    if ( this.quickEnrollLink.hasClassName("enrolled") )\n    {\n      if ( confirm( window.confirmQuickUnenrollMsg ) )\n      {\n       // using a get request to modify the role is not the best practice, if we refactor make this a new Ajax.request post, since this modifying the data\n        var returnUrl = document.location.href;\n        window.location = this.appendMenuActionUrl( \'cmd=quickEnrollToggle&course_id=\'+window.course_id+\'&retUrl=\'+escape(returnUrl) + \'&blackboard.platform.security.NonceUtil.nonce=\' + nonceIdValue );\n      }\n    }\n    else\n    {\n      var roleId = event.target.parentNode.id;\n      if ( roleId.indexOf("paletteItem") > -1 )\n      {\n        roleId = roleId.substring(12);\n        var name = ( typeof event.target.parentNode.childNodes[0].value == "undefined" )? event.target.parentNode.childNodes[1].value : event.target.parentNode.childNodes[0].value;\n        if ( confirm( page.bundle.getString( "confirmQuickEnrollStr", name ) ) )\n        {\n         // using a get request to modify the role is not the best practice, if we refactor make this a new Ajax.request post, since this modifying the data\n          window.location = this.appendMenuActionUrl( \'cmd=quickEnrollToggle&course_id=\'+window.course_id+\'&targetRole=\'+roleId+\'&retUrl=\'+escape(document.location.href) + \'&blackboard.platform.security.NonceUtil.nonce=\' + nonceIdValue );\n        }\n      }\n      else\n      {\n        if ( confirm( window.confirmQuickEnrollMsg ) )\n        {\n          // using a get request to modify the role is not the best practice, if we refactor make this a new Ajax.request post, since this modifying the data\n\n          window.location = this.appendMenuActionUrl( \'cmd=quickEnrollToggle&course_id=\'+window.course_id+\'&targetRole=P\'+\'&retUrl=\'+escape(document.location.href) + \'&blackboard.platform.security.NonceUtil.nonce=\' + nonceIdValue );\n        }\n      }\n    }\n  },\n\n  appendMenuActionUrl : function( paramsToAppend )\n  {\n    return this.appendQueryString( this.menuActionUrl, paramsToAppend + \'&\' + courseMenu.nonceKey + \'=\' + courseMenu.nonceValue );\n  },\n\n  appendQueryString : function( baseUrl, paramsToAppend )\n  {\n    var paramSeparator = baseUrl.indexOf( \'?\' ) != -1 ? \'&\' : \'?\';\n    return baseUrl + paramSeparator + paramsToAppend;\n  },\n\n  initPaletteState: function()\n  {\n    var activeCourseMenuContentsContainer = page.PaletteController.getPaletteControllerObjById( "courseMenuPalette" ).getActiveContentsContainer();\n    UserDataDWRFacade.getStringTempScope( activeCourseMenuContentsContainer.id + window.course_id, this.getCourseMenuPaletteStateResponse.bind( this ) );\n    UserDataDWRFacade.getStringTempScope( \'myGroups_contents\' + window.course_id, this.getMyGroupsPaletteStateResponse.bind( this ) );\n    UserDataDWRFacade.getStringTempScope( \'controlPanelPalette_contents\' + window.course_id, this.getControlPanelPaletteStateResponse.bind( this ) );\n    UserDataDWRFacade.getStringTempScope( \'pickerPalette_contents\' + window.course_id, this.getPickerPaletteStateResponse.bind( this ) );\n  },\n\n  /**\n   * By default, palettes are expanded.  However, the "Files" palette\'s default\n   * behavior is to be collapsed.\n   *\n   * This function ensures when the course menu loads, the "Files" palette default collapsed behavior\n   * is enforced.\n   */\n  getPickerPaletteStateResponse : function ( paletteState  )\n  {\n    if ($(\'pickerPalette\') === null)\n    {\n      // No File Manager palette found.\n      return;\n    }\n\n    if (paletteState !== \'block\')\n    {\n      // File palette was closed on the prior page, ensure Files palette is closed when this page is loaded.\n      page.PaletteController.collapsePalette(\'pickerPalette\', true);\n    }\n  },\n\n  getCourseMenuPaletteStateResponse : function ( paletteState  )\n  {\n    this.getPaletteStateResponse( paletteState, \'courseMenuPalette\' );\n  },\n\n  getMyGroupsPaletteStateResponse : function ( paletteState  )\n  {\n    this.getPaletteStateResponse( paletteState, \'myGroups\' );\n  },\n\n  getControlPanelPaletteStateResponse : function ( paletteState  )\n  {\n    this.getPaletteStateResponse( paletteState, \'controlPanelPalette\' );\n  },\n\n  getPaletteStateResponse : function ( paletteState, id )\n  {\n    if ( !$(id) ) //If the palette doesn\'t exist on the page, don\'t do anything\n    {\n      return;\n    }\n\n    var paletteItem = $(page.PaletteController.getDefaultContentsContainerId(id));\n\n    // if the course menu palette, get the currently active contents container\n    if( id == \'courseMenuPalette\' )\n    {\n      // get the active palette content container element (List VS Folder view)\n      paletteItem = this.quickViewContainer;\n      if( this.expandAllLink && this.collapseAllLink )\n      {\n        paletteItem = this.detailViewContainer;\n    }\n    }\n\n    var originalPaletteState = paletteItem.style.display;\n    if( originalPaletteState != \'none\' && originalPaletteState != \'block\' )\n    {\n      originalPaletteState = \'block\';\n    }\n    var cachedPaletteState = \'block\';\n    if ( paletteState.length > 0 )\n    {\n      if ( paletteState == \'none\' || paletteState == \'block\' )\n      {\n        cachedPaletteState = paletteState;\n      }\n       else\n      {\n         cachedPaletteState = \'block\';\n    }\n    }\n\n    if ( originalPaletteState != cachedPaletteState )\n    {\n      //because we want the menu to be in the cached state,\n      //we pass in the opposite so that expandCollapse changes the menu state.\n      // pass true for 2nd param to supress persisting state on init\n      page.PaletteController.toggleExpandCollapsePalette(id, true);\n    }\n  }\n\n};\n\ncourseMenu.searchWidget = {\n  goOnClick : function()\n  {\n    if ( $(\'toolsSearchBox\').value )\n    {\n      window.location = $(\'searchGo\').href + "&" + $(\'toolsSearchBox\').name + "=" + $(\'toolsSearchBox\').value;\n    }\n    else\n    {\n      alert( page.bundle.getString("enterSearchKeyStr") );\n    }\n    return false;\n  },\n\n  onKeydown : function( event )\n  {\n    var e = event || window.event;\n    var key = e.keyCode || e.which;\n    if ( key == Event.KEY_RETURN )\n    {\n      this.goOnClick();\n    }\n  }\n};\n\nfunction collapsePalettesForGroupSpace(groupId)\n{\n  // Expand the group in the my groups palette that was clicked\n  // the my groups palette may not exist on the doc yet if current user isn\'t part of a group\n  var myGroupsPalette = $(\'myGroups_contents\');\n  if( myGroupsPalette )\n  {\n    // NOTE - do NOT explicitly close all other palettes - while it may have been a requirement\n    // at one point in time it appears as though it has come back several times as a bug.\n    page.PaletteController.expandPalette(\'myGroups\');\n\n    var groupmenulink = (\'mygroups.\' + groupId + \'_groupExpanderLink\');\n    var itemExpanderObj = page.ItemExpander.itemExpanderMap[groupmenulink];\n    if( itemExpanderObj )\n    {\n      itemExpanderObj.expandCollapse(false);\n    }\n  }\n}\n\nfunction instructorSettingsMobileMenu()\n{\n  if (window.matchMedia("(max-width: 1024px)").matches) {\n    if ($j(".mobile-course-instructor-settings-button")) {\n      $j(".mobile-course-instructor-settings-button").on(\'click\', function(){\n        $j(".breadcrumb-controls").toggleClass("instrctor-controls-open");\n      });\n    }\n  }\n}\n\nfunction mobileCourseMenuMods()\n{\n  var puller = $j("#puller").detach();\n  $j(puller).insertAfter("#breadcrumbs");\n\n  $j(".breadcrumbs").find("ol").find(".placeholder").on("click", function() {\n    $j(".breadcrumbs").find("ol").toggleClass("breadcrumb-mobile-menu-open");\n  });\n}\n\nfunction reverseMobileCourseMenuMods()\n{\n  if (! $j("#menuWrap").find("#puller").length) {\n      var puller = $j("#puller").detach();\n      $j("#menuWrap").append(puller);\n  }\n}'