b'blob 107594\x00var assessment =\n{};\nassessment.submitDrawerUrl = "";\nassessment.questionVisibility = true;\nassessment.blockToLeaveVisible = \'null\';\nassessment.savingRightNow = false; // Used to avoid auto-saving concurrently with User initiated saves\nassessment.submittingRightNow = false; // set to true when we\'re submitting the assessment as a whole - used to block\n                                        // other submits\nassessment.userReallyWantsToSubmit = false;\nassessment.isInUse = false;\nassessment.safetyNetDelay = 60; // Number of seconds to wait before telling the user that it is taking too long.\nassessment.alreadySavedSafetyNetId = null;\nassessment.saveSequence = 0;\nassessment.takePageId = 0; // Set from the server based on time when page is loaded\nassessment.isOneByOne = false;\nassessment.questionStatus =\n{};\nassessment.questionStatus.NOT_MODIFIED = 0;\nassessment.questionStatus.MODIFIED = 1;\nassessment.questionStatus.SAVE_ATTEMPTED = 2;\nassessment.questionStatus.FAILED_SAVE = 3;\nassessment.failedSaveCount = 0;\nassessment.SAVE_ATTEMPTS_BETWEEN_NOTIFICATION = 3; // After this many failed-save attempts, alert the user so they can try to take action. (see assessment.autoSaveInterval for seconds between attempt)\nassessment.STATUS_BAR_OFFSET = 53; // in px\nassessment.STATUS_BAR_OFFSET_IN_STUDENT_PREVIEW = 7; // in px\n/**\n * ************************ methods related to pool and test canvas per question add/edit/ copy/\n * remove*******************\n */\n\nfunction findAssessmentForm()\n{\n  var assessmentForm = null;\n\n  var documentForms = document.getElementsByTagName( \'form\' );\n  assessmentForm = $A( documentForms ).find( function( documentForm )\n  {\n    var theAction = $( documentForm ).readAttribute( "action" );\n    return theAction ? theAction.indexOf( "webapps/assessment/" ) != -1 : false;\n  } );\n\n  return assessmentForm;\n}\n\nfunction submit( method, theForm )\n{\n  if ( !validateForm() )\n  {\n    return false;\n  }\n\n  if ( !theForm )\n  {\n    // no form specified so try to find it\n    theForm = findAssessmentForm();\n  }\n\n  if ( method == "createNew" )\n  {\n    theForm.elements.assessmentId.value = null;\n  }\n\n  theForm.elements.method.value = method;\n  theForm.submit();\n  return false;\n}\n\nfunction getFormByInputElement( elementName )\n{\n  var element = document.getElementsByName( elementName )[ 0 ];\n  return element.form;\n}\n\n// TODO: Rewrite this file to put all these methods into a namespace like assessment.XXX\nfunction modifyAssessment()\n{\n  submit( \'modifyAssessment\' );\n}\n\nfunction setQuestionId( questionId )\n{\n  getFormByInputElement( "questionId" ).questionId.value = questionId;\n}\n\nfunction modifyContentSettings( val )\n{\n  // properties|feedback|presentation|metadata\n  submit( val );\n}\n\nassessment.addQuestionBefore = function( sectionId, qId )\n{\n  // automatically check the checkbox, when the context menu action is intiated\n  var theForm = getFormByInputElement( "relativeId" );\n  assessment.checkTheCheckBox( qId );\n  theForm.sectionId.value = sectionId;\n  theForm.relativeId.value = qId;\n  submit( \'addQuestionBefore\', theForm );\n};\n\nassessment.addQuestionAfter = function( sectionId, qId )\n{\n  // automatically check the checkbox, when the context menu action is intiated\n  assessment.checkTheCheckBox( qId );\n  var theForm = getFormByInputElement( "relativeId" );\n  theForm.sectionId.value = sectionId;\n  theForm.relativeId.value = qId;\n  submit( \'addQuestionAfter\', theForm );\n};\n\nassessment.fitOnScreen = function( baseElem, elem, left, ypos )\n{\n  var bodyHeight = $( document.body ).getHeight();\n  var viewportScrollOffset = document.viewport.getScrollOffsets();\n  var topOfScreen = viewportScrollOffset[1];\n  var height = elem.getHeight();\n  var menuAbove = false;\n  var menuOver = false;\n  if ( ( height + ypos - topOfScreen ) > bodyHeight )\n  {\n    menuAbove = true;\n    ypos = ypos - height; // position above the element with the bottom of the flyout where the top would otherwise have been.\n  }\n  // Don\'t start off the top of the screen\n  if ( ypos < topOfScreen)\n  {\n    menuOver = true;\n    ypos = topOfScreen;\n  }\n  if ( ypos < 0 )\n  {\n    menuOver = true;\n    ypos = 0;\n  }\n\n  var bodyWidth = document.viewport.getWidth();\n  var width = elem.getWidth();\n  var leftOfScreen = viewportScrollOffset[0];\n  if ( (left + width - leftOfScreen ) > bodyWidth)\n  {\n    left = leftOfScreen + bodyWidth - width;\n  }\n  // Do not worry about checking left < leftOfScreen - if it is then force the user to scroll their window\n  if (left < 0)\n  {\n    left = 0;\n  }\n\n  if (menuAbove)\n  {\n    baseElem.addClassName(\'menuAbove\');\n    baseElem.removeClassName(\'menuBelow\');\n  }\n  else\n  {\n    baseElem.removeClassName(\'menuAbove\');\n    baseElem.addClassName(\'menuBelow\');\n  }\n\n  if (menuOver)\n  {\n    baseElem.addClassName(\'menuOver\');\n  }\n  else\n  {\n    baseElem.removeClassName(\'menuOver\');\n  }\n\n\n  if ( height > bodyHeight )\n  {\n    // If too big to fit on the screen, set it to the height of the screen and allow scrollbars inside\n    elem.setStyle(\n    {\n        height : bodyHeight + "px",\n        overflowY : "auto",\n        left : left + "px",\n        top : ypos + "px"\n    } );\n  }\n  else\n  {\n    elem.setStyle(\n    {\n      height: "auto",\n      left : left + "px",\n      top : ypos + "px"\n    } );\n  }\n};\n\nassessment.initAddBeforeAfterFlyout = function(before, qId, position, qTitle)\n{\n  assessment.questionFlyout = new assessment.addQuestionFlyout( {before: before, qId: qId, position: position, qTitle: qTitle});\n};\nassessment.addQuestionFlyout = Class.create();\nassessment.addQuestionFlyout.prototype =\n{\n   initialize : function ( params )\n   {\n     this._params = Object.extend(\n                                  {\n                                      before : null,\n                                      qId : null,\n                                      position : 0,\n                                      qTitle : null\n                                  }, params );\n\n     var formDiv = $(\'addBeforeAfter\');\n     var label = formDiv.select(\'.quickAddPalHeader\')[0];\n     if (this._params.before)\n     {\n       label.innerHTML = page.bundle.getString(\'add.question.before.title\', this._params.qTitle);\n       this.baseElem = $(\'addBeforeLink_\'+this._params.qId);\n     }\n     else\n     {\n       label.innerHTML = page.bundle.getString(\'add.question.after.title\', this._params.qTitle);\n       this.baseElem = $(\'addAfterLink_\'+this._params.qId);\n     }\n     this.baseElem.addClassName(\'forceVisible\');\n     // Start by positioning under the link\n     var offset = Position.cumulativeOffset(this.baseElem);\n     formDiv.setStyle(\n     {\n       display : "block",\n       width: "auto",\n       height: "auto"\n     });\n     var width = formDiv.getWidth();\n     var left = offset[0];\n     var baseWidth = Element.getWidth(this.baseElem);\n     left = left + (baseWidth/2) - (width/2);\n     var ypos = offset[1] + (Element.getHeight(this.baseElem)/2);\n     assessment.fitOnScreen(this.baseElem, formDiv, left, ypos);\n\n     var links = formDiv.getElementsByTagName( \'a\' );\n     $A(links).each( function( elem )\n     {\n       var bbhref = elem.getAttribute("bb:href");\n       if (bbhref)\n         {\n         elem.href = bbhref + this._params.position + ")";\n         }\n     }.bind(this) );\n     links[ 0 ].focus();\n     this.closeListener = this.closeOnClickEvent.bindAsEventListener(this);\n     this.closeEventListener = this.closeEvent.bindAsEventListener(this);\n     Event.observe( links[0], \'keydown\', this.onKeyDownFirstLink.bindAsEventListener(this));\n     Event.observe( links[links.length-1], \'keydown\', this.onKeyDownLastLink.bindAsEventListener(this));\n     Event.observe( formDiv, \'keydown\', this.onKeyDown.bindAsEventListener(this) );\n     Event.observe( document.body, \'click\', this.closeListener );\n     Event.observe( this.baseElem, \'click\', this.closeEventListener );\n   },\n\n   onKeyDown : function(event)\n   {\n     var key = event.keyCode || event.which;\n     switch ( key )\n     {\n       case Event.KEY_ESC:\n         this.closeQuestionFlyout(true);\n         Event.stop( event );\n         break;\n       default :\n         break;\n     }\n   },\n\n   onKeyDownFirstLink : function(event)\n   {\n     this.onKeyDownFirstLastLink(event, true);\n   },\n\n   onKeyDownLastLink : function(event)\n   {\n     this.onKeyDownFirstLastLink(event, false);\n   },\n\n   onKeyDownFirstLastLink : function(event, first)\n   {\n     var key = event.keyCode || event.which;\n     switch ( key )\n     {\n       case Event.KEY_TAB:\n         if ((first && event.shiftKey) || (!first && !event.shiftKey))\n         {\n          this.closeQuestionFlyout(true);\n          Event.stop( event );\n         }\n         break;\n       default :\n         break;\n     }\n   },\n\n   closeEvent : function (event)\n   {\n     this.closeQuestionFlyout(false);\n     Event.stop(event);\n   },\n\n   closeOnClickEvent : function (event)\n   {\n     this.closeQuestionFlyout(false);\n   },\n\n   closeQuestionFlyout : function(setFocusOnBase)\n   {\n     $( "addBeforeAfter" ).style.display = "none";\n     this.baseElem.removeClassName(\'forceVisible\');\n     Event.stopObserving(this.baseElem, \'click\', this.closeEventListener);\n     Event.stopObserving(document.body, \'click\', this.closeListener);\n     if (setFocusOnBase)\n     {\n       this.baseElem.focus();\n     }\n   }\n};\n\nfunction addNGQuestion( sectionId, qtype, position )\n{\n  var theForm = getFormByInputElement( "questionType" );\n  theForm.questionType.value = qtype;\n  theForm.sectionId.value = sectionId;\n  theForm.position.value = position;\n  submit( \'addQuestion\', theForm );\n}\n\nassessment.modifyAssessmentInfo = function()\n{\n  submit( \'modifyAssessmentInfo\' );\n}\n\nassessment.modifyDeployOptions = function()\n{\n  submit( \'modifyDeployOptions\' );\n}\n\nassessment.modifyHelper = function( questionId, method, isLinked )\n{\n  // automatically check the checkbox, when the context menu action is intiated\n  assessment.checkTheCheckBox( questionId );\n  var theForm = getFormByInputElement( "questionId" );\n  setQuestionId( questionId );\n  getFormByInputElement( "isLinkedQuestion" ).isLinkedQuestion.value = isLinked;\n  submit( method, theForm );\n};\n\nassessment.modifyQuestion = function( questionId )\n{\n  assessment.modifyHelper( questionId, \'modifyQuestion\', \'false\' );\n};\n\nfunction modifyRandomBlock( questionId )\n{\n  assessment.modifyHelper( questionId, \'modifyRandomBlock\', \'false\' );\n}\n\nfunction modifyLinkQuestion( questionId, blockId )\n{\n  getFormByInputElement( "referencingQuestionId" ).referencingQuestionId.value = blockId;\n  assessment.modifyHelper( questionId, \'modifyQuestion\', \'true\' );\n}\n\nfunction copyQuestion( sectionId, questionId )\n{\n  // automatically check the checkbox, when the context menu action is intiated\n  assessment.checkTheCheckBox( questionId );\n  var theForm = getFormByInputElement( "sectionId" );\n  theForm.sectionId.value = sectionId;\n  setQuestionId( questionId );\n  submit( \'copyQuestion\', theForm );\n}\n\nfunction copyLinkQuestion( sectionId, questionId, qbId )\n{\n  // automatically check the checkbox, when the context menu action is intiated\n  assessment.checkTheCheckBox( questionId );\n  var theForm = getFormByInputElement( "questionId" );\n  theForm.sectionId.value = sectionId;\n  theForm.questionBlockId.value = qbId;\n  setQuestionId( questionId );\n  submit( \'copyLinkQuestion\', theForm );\n}\n\nfunction remove( id, type )\n{\n  if ( assessment.isInUse )\n  {\n    var suffix = ( assessment.type == \'Survey\' ? \'.survey\' : \'\' );\n    if ( !type )\n    {\n      assessment.removeEntity( id, page.bundle.getString( "confirm.delete_question.regrade" + suffix ) );\n    }\n    else if ( type == \'question_link\' )\n    {\n      assessment.removeEntity( id, page.bundle.getString( "confirm.remove_question_link.regrade" + suffix ) );\n    }\n    else\n    {\n      assessment.removeEntity( id, page.bundle.getString( "confirm.delete_item.regrade" + suffix ) );\n    }\n  }\n  else\n  {\n    assessment.removeEntity( id, page.bundle.getString( "confirm.delete_item" ) );\n  }\n}\n\nassessment.pushPool = function( poolId )\n{\n  submit( \'pushPool\' );\n}\n\nassessment.removeEntity = function( id, message )\n{\n  if ( window.confirm( message ) )\n  {\n    // automatically check the checkbox, when the context menu action is intiated\n    assessment.checkTheCheckBox( id );\n    var theForm = getFormByInputElement( "questionId" );\n    setQuestionId( id );\n    submit( \'remove\', theForm );\n  }\n};\n\nfunction reposition( id, position )\n{\n  setQuestionId( id );\n  var theForm = getFormByInputElement( "questionId" );\n  theForm.position.value = position;\n  submit( \'reposition\', theForm );\n}\n\nassessment.submitModifyQuestion = function()\n{\n  submit( \'modifyQuestion\' );\n};\n\nassessment.cancelWarning = function()\n{\n  var theForm = getFormByInputElement( "methodEx" );\n  theForm.elements.methodEx.value = \'modifyAssessment\';\n  theForm.submit();\n  return false;\n};\n\nfunction isCheckbox( element )\n{\n  return ( element && element.type && element.type == "checkbox" );\n}\n\n/** ***************** methods related to bulk update logic on the test/pool canvas******************** */\nassessment.removeAll = function( container, showCount )\n{\n  var questionBlockElements = $$( \'input.questionBlock\' );\n  var i, parentBlockNotSelected = false, questionBlockVals = {};\n  for ( i = 0; i<questionBlockElements.length; i++ )\n  {\n    if ( isCheckbox( questionBlockElements[i] ) )\n    {\n      // if there are question sets, store the state of the set-level check box\n      questionBlockVals[ "questionIds" + questionBlockElements[i].value ] = questionBlockElements[i].checked;\n    }\n  }\n  var count = 0;\n  var inputs = list.checkboxes.get( container );\n  for ( var i = 0; i < inputs.length; i++ )\n  {\n    if ( isCheckbox( inputs[ i ] ) && inputs[ i ].checked )\n    {\n      // LRN-72093 do not count questions selected from sets, since removing them without deleting the entire set\n      // is possible only when there are no student attempts and in that case removal is handled by removeQuestionsFromBlock\n      if ( !inputs[i].id.startsWith( "questionBlockList" ) )\n      {\n        count++;\n      }\n      else\n      {\n        if ( !questionBlockVals[ inputs[i].name ] )\n        {\n        \tparentBlockNotSelected = true;\n        }\n      }\n    }\n  }\n  if ( parentBlockNotSelected &&  assessment.isInUse )\n  {\n    alert( page.bundle.getString( "set.cannot.delete.in_use" ) );\n  }\n  else if ( showCount ? window.confirm( page.bundle.getString( "confirm.delete_items_count", count ) ) : window\n      .confirm( page.bundle.getString( "confirm.delete_items" ) ) )\n  {\n    submit( \'removeBulk\' );\n  }\n};\n\nassessment.removeAllPublished = function( message )\n{\n  if ( window.confirm( message ) )\n  {\n    submit( \'removeBulk\' );\n  }\n};\n\nassessment.updatePointsForAll = function()\n{\n  var element = document.getElementsByName( "points_bulk" );\n  if ( assessment.validatePoints( element ) &&\n       ( !assessment.isInUse || confirm( page.bundle.getString( "confirm.points_change.regrade_warning" ) ) ) )\n  {\n    submit( \'updatePointsBulk\' );\n  }\n  return false;\n};\n\nassessment.updatePointsInput = function( event )\n{\n\n  var elements = document.getElementsByName( "points_bulk" );\n  var element = Event.findElement( event );\n  var pointsValue = element.value;\n\n  if ( elements )\n  {\n    elements[ 0 ].value = pointsValue;\n    elements[ 1 ].value = pointsValue;\n  }\n\n};\n\n/** ************************* common js methods for assessments********************************************* */\n\n/** validate Input Field value * */\nassessment.validateMiniFlyoutInputValue = function( element )\n{\n  var value = null;\n  if ( $( element ) )\n  {\n    value = $( element ).value;\n  }\n  if ( !value )\n  {\n    return page.bundle.getString( "update.input.value" );\n  }\n\n  if ( !isNumeric( value, false ) )\n  {\n    return page.bundle.getString( "update.input.valid.value" );\n  }\n  return "";\n};\n\nassessment.validatePoints = function( element )\n{\n  if ( element )\n  {\n    var pointsTextBoxTop = element[ 0 ];\n    var pointsTextBoxBot = element[ 1 ];\n    var pointsValue = pointsTextBoxTop.value;\n\n    //Does not matter if we pass in the value of top/bottom text box, as the values mirror each other in the GUI.\n    return assessment.validateNumericInput( pointsTextBoxTop, pointsTextBoxBot, pointsValue, page.bundle.getString( "update.points.value" ),\n                                            page.bundle.getString( "update.points.valid.value" ), true );\n  }\n  return true;\n};\n\nassessment.validateNumericInput = function( textBoxTop, textBoxBot, value, blankMsg, badMsg, isFloat )\n{\n  var checkForFloats = false;\n  var numFormat = LOCALE_SETTINGS.getString( \'float.format\' );\n  var isValidNum = false;\n  var re, trimmedVal;\n\n  trimmedVal = value.trim();\n  if ( isFloat != \'null\' )\n  {\n    checkForFloats = true;\n  }\n  if ( !value )\n  {\n    alert( blankMsg );\n    textBoxTop.focus();\n    return false;\n  }\n  var numVal = null;\n  if ( !checkForFloats )\n  {\n    numVal = parseInt( value, 10 );\n    isValidNum = ( !isNaN( numVal ) && numVal >= 0 );\n  }\n  else if ( typeof ( numFormat ) != \'undefined\' )\n  { // hand parse for l10n\n    re = new RegExp( numFormat );\n    isValidNum = ( trimmedVal.search( re ) === 0 );\n  }\n  else\n  {\n    // try to use platform native (non-localized)\n    numVal = parseFloat( trimmedVal );\n    isValidNum = !isNaN( numVal );\n    if ( isValidNum && numVal.toString().length != trimmedVal.length )\n    {\n      /* Allow strings with trailing zeros to pass */\n      re = /^[\\.0]+$/;\n      isValidNum = re.test( trimmedVal.substring( numVal.toString().length ) );\n    }\n  }\n  if ( !isValidNum )\n  {\n    alert( badMsg );\n    textBoxTop.value = "";\n    textBoxBot.value = "";\n    textBoxTop.focus();\n    return false;\n  }\n  return true;\n};\n\nfunction back()\n{\n  submit( \'back\' );\n}\n\nfunction persistDisplayPreference( element, value )\n{\n  UserDataDWRFacade.setStringTempScope( element, value );\n}\n\nassessment.refreshParent = function( url )\n{\n  if ( window.opener )\n  {\n    if (window.opener.top.frames.content && window.opener.top.frames.content.id == \'content\')\n    {\n      //Firefox and IE\n      if ( window.opener.top.frames.content.location && window.opener.top.frames.content.location.href )\n      {\n        window.opener.top.frames.content.location.href = url;\n      }\n      else\n      {\n        //Chrome and RespondUS\n        window.opener.top.frames.location.href = url;\n      }\n    }\n    else\n    {\n      window.opener.location.href = url;\n    }\n    if ( window.opener.progressWindow )\n    {\n      window.opener.progressWindow.close();\n    }\n    window.close();\n  }\n  else\n  {\n    // We expected to be in a new window, but aren\'t. Perhaps this was a link from an announcement?\n    window.location = url;\n  }\n};\n\nassessment.checkTheCheckBox = function( elementId )\n{\n  if ( $s( \'content_listContainer_questionIds\' + elementId ) )\n  {\n    $s( \'content_listContainer_questionIds\' + elementId ).checked = true;\n  }\n\n};\n\nassessment.unCheckTheCheckBox = function( elementId )\n{\n  if ( $s( \'content_listContainer_questionIds\' + elementId ) )\n  {\n    $s( \'content_listContainer_questionIds\' + elementId ).checked = false;\n  }\n};\n\nvar startX; // set x offset of bar in pixels\nvar startY;\nvar padding; // status bar y offset so it appears right below the insructions block\nvar verticalpos = "fromtop"; // enter "fromtop" or "frombottom"\n\nfunction setPadding( pad )\n{\n  padding = pad;\n}\n\nfunction iecompattest()\n{\n  return ( document.compatMode && document.compatMode != "BackCompat" ) ? document.documentElement : document.body;\n}\n\nfunction resetInstructionHeight()\n{\n  padding = ( $(\'student-preview-ribbon\') && $(\'student-preview-ribbon\').visible()\n                ? assessment.STATUS_BAR_OFFSET_IN_STUDENT_PREVIEW\n                : assessment.STATUS_BAR_OFFSET ); \n  startY = document.getElementById( "instructionBlock" ).offsetTop +\n           document.getElementById( "instructionBlock" ).clientHeight + padding;\n  startX = document.getElementById( "instructionBlock" ).offsetLeft;\n\n  document.getElementById( "dataCollectionContainer" ).style.position = "relative";\n\n  var tbh = document.getElementById( "topbar" ).clientHeight;\n  document.getElementById( "containerdiv" ).style.paddingBottom = ( 32 + tbh ) + "px";\n  if ( document.getElementById( "topbar" ).offsetTop !== 0 )\n  {\n    document.getElementById( "dataCollectionContainer" ).style.top = tbh + "px";\n  }\n\n}\n\nfunction staticbar()\n{\n  var ns = ( navigator.appName.indexOf( "Netscape" ) != -1 ) || window.opera;\n  var d = document;\n\n  function ml( id )\n  {\n    var el = d.getElementById( id );\n    el.style.visibility = "visible";\n    if ( d.layers )\n    {\n      el.style = el;\n    }\n    el.sP = function( x, y, r )\n    {\n      this.style.left = x + "px";\n      //extraOffsetTopSpace sets the Y offset adjustment of the question status bar.\n      var extraOffsetTopSpace = -90;\n      if ($(\'globalNavPageNavArea\')) \n      {\n        //if the div globalNavPageNavArea does not exist in case of ultra is disabled, the question status bar needs be pushed down accordingly.\n        extraOffsetTopSpace = extraOffsetTopSpace + document.getElementById( "globalNavPageNavArea" ).clientHeight;\n      }\n      var elementBottom = document.getElementById( "instructionBlock" ).getBoundingClientRect().bottom;\n      if(elementBottom >= 0 && elementBottom <= window.innerHeight)\n      {\n       this.style.top = elementBottom + 1 + "px";\n      }\n      else\n      {\n        this.style.top="0px"; \n      }\n      if ( r > -1 )\n      {\n        this.style.right = r + "px";\n      };\n      // set the assessmentPortlet\'s width to the width of the instructionBlock width (including padding and margin).\n      document.getElementById("topbar").style.width = $(\'instructionBlock\').measure(\'border-box-width\') + \'px\';\n    };\n    el.y = startY;\n    return el;\n  }\n\n  window.stayTopLeft = function()\n  {\n    var right = -1;\n\tvar ftlobjX = 0;\n\tvar ftlobjY = 0;\n\tvar pY = ns ? window.pageYOffset : iecompattest().scrollTop;\n    if ( pY < startY )\n    {\n      ftlobjY = startY - pY;\n      document.getElementById( "dataCollectionContainer" ).style.top = document.getElementById( "topbar" ).clientHeight +\n                                                                       8 + "px";\n    }\n    else\n    {\n      ftlobjY = 0;\n    }\n    ftlobjX = document.getElementById( "instructionBlock" ).offsetLeft;\n    if ( page.util.isRTL() )\n    {\n      right = document.documentElement.clientWidth -\n              ( ftlObj.x + document.getElementById( "instructionBlock" ).offsetWidth );\n    }\n    window.ftlObj.sP( ftlobjX, ftlobjY, right );\n\n    setTimeout( "stayTopLeft()", 20 );\n  };\n  resetInstructionHeight();\n  Event.observe( window, \'resize\', resetInstructionHeight );\n  window.ftlObj = ml( "topbar" );\n  window.stayTopLeft();\n}\n\nvar AIM =\n{\n\n    frame : function( c )\n    {\n\n      var n = \'f\' + Math.floor( Math.random() * 99999 );\n      var d = document.createElement( \'DIV\' );\n      d.innerHTML = \'<iframe style="display:none" src="about:blank" id="\' + n + \'" name="\' + n +\n                    \'" onload="AIM.loaded(\\\'\' + n + \'\\\')"></iframe>\';\n      document.body.appendChild( d );\n\n      var i = document.getElementById( n );\n      if ( c && typeof ( c.onComplete ) == \'function\' )\n      {\n        i.onComplete = c.onComplete;\n      }\n\n      return n;\n    },\n\n    form : function( f, name )\n    {\n      f.setAttribute( \'target\', name );\n    },\n\n    submit : function( f, c )\n    {\n      AIM.form( f, AIM.frame( c ) );\n      if ( c && typeof ( c.onStart ) == \'function\' )\n      {\n        return c.onStart();\n      }\n      else\n      {\n        return true;\n      }\n    },\n\n    loaded : function( id )\n    {\n      var i = document.getElementById( id );\n      var d;\n      if ( i.contentDocument )\n      {\n        d = i.contentDocument;\n      }\n      else if ( i.contentWindow )\n      {\n        d = i.contentWindow.document;\n      }\n      else\n      {\n        d = window.frames[ id ].document;\n      }\n      if ( d.location.href == "about:blank" )\n      {\n        return;\n      }\n\n      if ( typeof ( i.onComplete ) == \'function\' )\n      {\n        i.onComplete( d.body.innerHTML );\n      }\n    }\n\n};\n\nfunction resetContaindivHeight()\n{\n  // adjust containdiv height\n  // TODO: I don\'t see a reason for any of this code anymore...\n  // if (document.getElementById(\'statusBlock\').style.display=="" ||\n  // document.getElementById(\'statusBlock\').style.display=="inline") {\n  // var statusHeight = document.getElementById(\'topbar\').offsetHeight-22; // 22 is padding - be better to dynamically\n  // determine this value.\n  // var containerHeight = document.getElementById(\'containerdiv\').offsetHeight;\n  // var newHeight = containerHeight+statusHeight;\n  // document.getElementById(\'containerdiv\').style.minHeight=newHeight+\'px\';\n  // }\n}\n\nfunction hideElement( element )\n{\n  var msgspan = element;\n  var msgimg = element + "img";\n  // TODO: I don\'t see a reason for any of this code anymore...\n  // if (msgspan=="statusBlock") {\n  // var statusHeight = document.getElementById(\'topbar\').offsetHeight;\n  // var containerHeight = document.getElementById(\'containerdiv\').offsetHeight;\n  // var newHeight = containerHeight-statusHeight-22; // 22 is padding - be better to dynamically determine this value.\n  // document.getElementById(\'containerdiv\').style.minHeight=newHeight+\'px\';\n  // }\n  document.getElementById( msgspan ).style.display = "none";\n  document.images[ msgimg ].src = "/images/ci/ng/more_options_dark.gif";\n  var alt = page.bundle.getString( \'expandCollapse.expand.section.nocolon\' );\n  document.images[ msgimg ].title = alt;\n  document.images[ msgimg ].alt = alt;\n}\n\nfunction showElement( element )\n{\n  var msgspan = element;\n  var msgimg = element + "img";\n  document.getElementById( msgspan ).style.display = "inline";\n  document.images[ msgimg ].src = "/images/ci/ng/less_options.gif";\n  var alt = page.bundle.getString( \'expandCollapse.collapse.section.nocolon\' );\n  document.images[ msgimg ].title = alt;\n  document.images[ msgimg ].alt = alt;\n  if ( msgspan == "statusBlock" )\n  {\n    resetContaindivHeight();\n  }\n}\n\n/*\n * sticky : whether to persist the display preference; true if null/undefined\n */\nfunction toggleElement( element, sticky )\n{\n  if( undefined === sticky || null === sticky )\n  {\n    sticky = true;\n  }\n\n  var curStyle = document.getElementById( element ).style.display;\n  if ( curStyle == "" || curStyle == "inline" )\n  {\n    hideElement( element );\n    if( sticky )\n    {\n      persistDisplayPreference( element, \'none\' );\n    }\n  }\n  else\n  {\n    showElement( element );\n    if( sticky )\n    {\n      persistDisplayPreference( element, \'inline\' );\n    }\n  }\n  resetInstructionHeight();\n}\n\nif ( !window.takeAssessment )\n{\n  var takeAssessment =\n  {};\n\n  takeAssessment.testInformationMap = {};\n  takeAssessment.initiateTestInformation = function( qtiAssessmentPlusAttemptId )\n  {\n    var showInformationLabel = page.bundle.getString( "take.show.test.information" );\n    var hideInformationLabel = page.bundle.getString( "take.hide.test.information" );\n\n    // we don\'t use stickiness in page.ItemExpander because we have to update statusBlock once the test information gets updated with the cached stickiness value\n    takeAssessment.testInformationMap[qtiAssessmentPlusAttemptId] = new page.ItemExpander( \'instructionsExpander\' + qtiAssessmentPlusAttemptId, \'instructionsContainer\' + qtiAssessmentPlusAttemptId, showInformationLabel, hideInformationLabel, null, null, null, null, null, false );\n    takeAssessment.testInformationMap[qtiAssessmentPlusAttemptId].qtiAssessmentPlusAttemptId = qtiAssessmentPlusAttemptId;\n\n    // obtain the cached expand/collapse value for the user\n    var current_course_id = ( (typeof course_id != "undefined") && course_id !== null ) ? course_id : "";\n    UserDataDWRFacade.getStringTempScope( \'instructionsExpander\' + qtiAssessmentPlusAttemptId + current_course_id, takeAssessment.applyCachedExpColState.bind( takeAssessment.testInformationMap[qtiAssessmentPlusAttemptId] ) );\n\n    takeAssessment.registerInstructionsExpanderOnClickEventListener( qtiAssessmentPlusAttemptId );\n  };\n\n  takeAssessment.registerInstructionsExpanderOnClickEventListener = function( qtiAssessmentPlusAttemptId )\n  {\n    Event.stopObserving( \'instructionsExpander\' + qtiAssessmentPlusAttemptId, "click" );\n    Event.observe( \'instructionsExpander\' + qtiAssessmentPlusAttemptId, "click", takeAssessment.onClickInstructionsExpander.bindAsEventListener( takeAssessment.testInformationMap[qtiAssessmentPlusAttemptId] ) );\n  };\n\n  takeAssessment.applyCachedExpColState = function ( response )\n  {\n    var originalExpanded = this.expanded;\n\n    // default when there is no cached value would be \'expanded\'\n    var cachedExpanded = true;\n    if ( response.length > 0 )\n    {\n      if ( response == \'true\' )\n      {\n        cachedExpanded = true;\n      }\n      else\n      {\n        cachedExpanded = false;\n      }\n    }\n    if ( originalExpanded != cachedExpanded )\n    {\n      this.expandCollapse(originalExpanded);\n    }\n    takeAssessment.repositionStatusBlock();\n  };\n\n  takeAssessment.onClickInstructionsExpander = function( event )\n  {\n    Event.stop( event );\n\n    this.onToggleClick();\n    takeAssessment.repositionStatusBlock();\n\n    // save the expand/collapse state for the test information section to the course user settings cache\n    var current_course_id = ( (typeof course_id != "undefined") && course_id !== null ) ? course_id : "";\n    UserDataDWRFacade.setStringTempScope( \'instructionsExpander\' + this.qtiAssessmentPlusAttemptId + current_course_id, this.expanded );\n  };\n\n  takeAssessment.repositionStatusBlock = function()\n  {\n    // reposition statusBlock appropriately by using its button toggle\n    toggleElement( \'statusBlock\', false );\n    toggleElement( \'statusBlock\', false );\n  };\n}\n\n/**\n * ******************************************* methods related to lightbox preview in pool/test\n * canvas*******************\n */\n\nassessment.previewLightbox = null;\nassessment.copyLinkLightbox = null;\n\nassessment.showLightBox = function( event, baseContainer, numparents, previewUrl )\n{\n  var e = event || window.event; // IE does not capture the event\n  if ( e && e.type == \'click\' )\n  {\n    Event.stop( e );\n  }\n  if ( !assessment.previewLightbox )\n  {\n    assessment.previewLightbox = new lightbox.Lightbox(\n    {\n        contents : \'\',\n        defaultDimensions :\n        {\n            w : 500,\n            h : 375\n        },\n        useDefaultDimensionsAsMinimumSize : true,\n        verticalBorder : 125,\n        horizontalBorder : 125\n    } );\n  }\n  assessment.previewLightbox.cfg.ajax =\n  {\n      url : previewUrl,\n      loadExternalScripts : true\n  };\n  assessment.previewLightbox.cfg.content = null;\n  assessment.previewLightbox.open();\n};\n\nassessment.showCopyLinkLightBox = function( url )\n{\n  var params = url.toQueryParams();\n  if ( !assessment.copyLinkLightbox )\n  {\n    assessment.copyLinkLightbox = new lightbox.Lightbox(\n    {\n        contents : \'\',\n        defaultDimensions :\n        {\n            w : 150,\n            h : 200\n        },\n        useDefaultDimensionsAsMinimumSize : true,\n        verticalBorder : 50,\n        horizontalBorder : 50\n    } );\n  }\n  assessment.copyLinkLightbox.cfg.ajax =\n  {\n    url : \'/webapps/assessment/do/authoring/questionSearch?method=copyLink&discoverUrl=\' + encodeURIComponent( url ) +\n          \'&course_id=\' + params.course_id\n  };\n  assessment.copyLinkLightbox.cfg.content = null;\n  assessment.copyLinkLightbox.cfg.closeOnBodyClick = false;\n  assessment.copyLinkLightbox.open();\n};\n\nassessment.showDiscover = function( url, title, width, height )\n{\n  assessment.submitDrawerUrl = url;\n  var screenX = Math.floor( ( screen.width ) / 2 ) - Math.floor( width / 2 );\n  var screenY = Math.floor( ( screen.height ) / 2 ) - Math.floor( height / 2 ) - 20;\n  var top = screenY;\n  var left = screenX;\n  var features = "\'" + \'toolbar=no,scrollbars=yes,status=yes,resizable=yes,top=\' + top + \',left=\' + left + \',screenX=\' +\n                 screenX + \',screenY=\' + screenY + \',width=\' + width + \',height=\' + height + "\'";\n  var discover = window.open( url, title, features );\n  if ( window.focus )\n  {\n    if ( discover )\n    {\n      discover.focus();\n    }\n    else\n    {\n      alert( page.bundle.getString( "pop.up.blocker.enabled" ) );\n    }\n  }\n};\n\nassessment.discoverOptions = function( url, title, width, height, hideCopyLink, position )\n{\n  if (position)\n  {\n    // If position is defined then we want to discover inline, not in a popup.\n    document.location = url + \'&position=\' + position;\n    return;\n  }\n  if ( !hideCopyLink )\n  {\n    // check if the UserPreference is set in session\n    UserDataDWRFacade.getStringPermScope( "AssessmentUtils.DISCOVER_MODE_IS_LINKING", function( copyLinkSet )\n    {\n      if ( copyLinkSet == \'\' )\n      {\n        assessment.showCopyLinkLightBox( url );\n      }\n      else\n      {\n        assessment.showDiscover( url, title, width, height );\n      }\n    } );\n  }\n  else\n  {\n    assessment.showDiscover( url, title, width, height );\n  }\n};\n\nassessment.onCloseCopyLinkLightbox = function( url )\n{\n  var copyLinkId = $( \'copylink_link\' );\n  var copyCopyId = $( \'copylink_copy\' );\n  var copyLinkValueSet = false;\n  if ( copyLinkId && copyCopyId )\n  {\n    copyLinkValueSet = copyLinkId.checked || copyCopyId.checked;\n  }\n  if ( !copyLinkValueSet )\n  {\n    if ( window.confirm( page.bundle.getString( "confirm.set_copy_link" ) ) )\n    {\n      assessment.copyLinkLightbox.cfg.onClose = null;\n      assessment.copyLinkLightbox.close();\n      assessment.discoverOptions( url, \'discover\', \'900\', \'675\', true );\n    }\n  }\n  else\n  {\n    assessment.copyLinkLightbox.cfg.onClose = null;\n    assessment.copyLinkLightbox.close();\n    assessment.discoverOptions( url, \'discover\', \'900\', \'675\', true );\n  }\n};\n\n/** ************************** methods related to question block on the test canvas************************************ */\n\nassessment.createQuestionBlock = function()\n{\n\n};\n\nfunction addQuestionToBlock( questionId, assessmentType, assessmentId, courseId )\n{\n  var url = "/webapps/assessment/do/authoring/modifyQuestionBlock?method=addQuestionsToQuestionBlock" + "&questionId=" +\n            questionId + "&assessmentType=" + assessmentType + "&assessmentId=" + assessmentId + "&course_id=" +\n            courseId;\n\n  assessment.discoverOptions( url, \'discover\', \'900\', \'675\', true );\n}\n/** ******************** methods related to inline pool points flyout************************** */\n\nassessment.poolFlyout = null;\n\nassessment.initPoolFlyout = function( title )\n{\n  if ( !assessment.poolFlyout )\n  {\n    assessment.poolFlyout = new miniFlyout.MiniFlyout(\n                                                       {\n                                                           title : title,\n                                                           miniFlyoutTemplate : "<label class=\'hideoff\' for=\'#{inputFieldName}_id\'>#{title}</label> <input id=\'#{inputFieldName}_id\'type=\'text\'  style=\'width: 2em;\' size=\'3\' value=\'0\'  name=\'#{inputFieldName}\'/> <a href=\'#\' title=\'#{closeButtonName}\'  bb_flyout_title=\'Cancel\' class=\'genericButtonImg button-3-img\'><img  alt=\'#{closeButtonName}\' src=\'/images/ci/ng/remove_li.png\'/></a> <a href=\'#\' title=\'#{submitButtonName}\' bb_flyout_title=\'Submit\' class=\'genericButtonImg button-3-img\'><img  alt=\'#{submitButtonName}\' src=\'/images/ci/ng/checkmark_li.png\'/></a>",\n                                                           inputFieldName : "inline_points",\n                                                           errorMessage : page.bundle.getString( "points.failure" ),\n                                                           miniFlyoutDivClass : "liveArea liveArea-slim",\n                                                           onSubmitValidate : "return assessment.validateMiniFlyoutInputValue(\'inline_points_id\')"\n                                                       } );\n  }\n  miniFlyout.closeCurrentMiniFlyout();\n};\nassessment.showPoolFlyout = function( event, title, assessmentId, id, courseId )\n{\n  var e = event || window.event; // IE does not capture the event\n  var aLink = Event.element( e );\n  if ( e && e.type == \'click\' )\n  {\n    Event.stop( e );\n  }\n  assessment.initPoolFlyout( title );\n  assessment.poolFlyout.cfg.openLink = aLink;\n  assessment.poolFlyout.cfg.containerId = aLink.parentNode.parentNode;\n  assessment.poolFlyout.cfg.inputFieldDefaultSource = "ipoints_" + id;\n  assessment.poolFlyout.cfg.inputFieldName = "inline_points";\n  assessment.poolFlyout.cfg.onSubmit = "return assessment.saveQuestionPoints(\'" + assessmentId + "\',\'" + id + "\',\'" +\n                                       courseId + "\',false, false, assessment.poolFlyout.cfg.containerId);";\n  assessment.poolFlyout.open();\n};\n\n/** ************************************************* methods related to test canvas selection by type****************** */\n\nassessment.selectByType = function( container )\n{\n  var selected = document.getElementsByName( \'selectbyQuestionType\' )[ 0 ];// either use 0 or 1, since both are updated\n                                                                            // to the same\n  var checkboxes = list.checkboxes.get( container );\n  for ( var i = 0; i < checkboxes.length; ++i )\n  {\n    checkboxes[ i ].checked = false;\n  }\n  var className = selected.options[ selected.selectedIndex ].value;\n  checkboxes.each( function( e )\n  {\n    if ( e.className.trim() == className.trim() )\n    {\n      e.checked = true;\n    }\n  } );\n  $( \'selectbyQuestionType_idTop\' ).options[ selected.selectedIndex ].selected = true;\n  $( \'selectbyQuestionType_idBot\' ).options[ selected.selectedIndex ].selected = true;\n};\n\nassessment.toggleQuestionBlockDiv = function( rawId )\n{\n  var ul = $( \'questionBlockDiv\' + rawId );\n  var a = $( \'questionBlockDivLink\' + rawId ).getElementsByTagName( \'a\' )[ 0 ];\n  Effect.toggle( ul, \'blind\',\n  {\n    duration : 0.3\n  } );\n  if ( ul.style.display == "none" )\n  {\n    a.className = "itemHead itemHeadOpen";\n  }\n  else if ( ul.style.display == "block" || ul.style.display == "" )\n  {\n    a.className = "itemHead";\n  }\n  return false;\n};\n\n/** ************************ methods related to discover drawer functionality******************************************* */\n\nassessment.inBasicDiscoverMode = function()\n{\n  if ( document.copyQuestionsForm.method.value == \'save\' )\n  {\n    return true;\n  }\n  return false;\n};\n\nassessment.cancelDrawer = function()\n{\n  var myDrawer = drawer.model.getCurrentInstance();\n  myDrawer.discard();\n  document.copyQuestionsForm.elements.methodEx.value = \'cancel\';\n  document.copyQuestionsForm.submit();\n  if ( window.opener )\n  {\n    // close question discovery popup\n    window.close();\n  }\n  return false;\n};\n\nassessment.cancelRandomBlock = function()\n{\n  document.copyQuestionsForm.methodEx.value = \'cancel\';\n  document.copyQuestionsForm.submit();\n  if ( window.opener !== null )\n  {\n    // close question discovery popup\n    window.close();\n  }\n  return false;\n};\n\nfunction findAndDisableInputElements( el )\n{\n  if ( el === null )\n  {\n    return;\n  }\n  var elems = el.getElementsByTagName( \'input\' );\n  for ( var i = 0; i < elems.length; i++ )\n  {\n    el.addClassName( \'disabled\' );\n    el.disabled = true;\n  }\n}\n\n/** **************** Ajax method related to Test/pool canvas************************************************** */\n\nfunction postAndUpdateCanvas( form )\n{\n  var method = form.method.value;\n  var assessmentId = form.assessmentId.value;\n  var courseId = form.course_id.value;\n  var nonceId = nonceUtil.getNonceId( \'bb-question-discover\' );\n  var questionId = "";\n  if ( form.questionId )\n  {\n    questionId = form.questionId.value;\n  }\n  var url = "/webapps/assessment/do/authoring/copyQuestions?method=" + method + "&assessmentId=" + assessmentId +\n            "&course_id=" + courseId + "&sectionId=" + form.sectionId.value + "&assessmentType=" +\n            form.assessmentType.value + "&itemIds=" + form.itemIds.value + "&overridePoints=" +\n            form.overridePoints.value + "&questionId=" + questionId + "&ajaxMode=true" +\n            "&blackboard.platform.security.NonceUtil.nonce=" + nonceId.value;\n  if ( form.searchCriterion !== null )\n  {\n    url = url + "&searchCriterion=" + encodeURIComponent( form.searchCriterion.value );\n  }\n\n  findAndDisableInputElements( $( \'cartSubmit\' ) );\n  var params = url.toQueryParams();\n  url = url.split( "?" )[ 0 ];\n  new Ajax.Request(\n                    url,\n                    {\n                        method : \'post\',\n                        parameters : params,\n                        onCreate : function()\n                        {\n                          document.body.style.cursor = \'progress\';\n                        },\n                        onComplete : function( transport, json )\n                        {\n                          window.opener.location = "/webapps/assessment/do/authoring/modifyAssessment?method=modifyAssessment&assessmentId=" +\n                                                   assessmentId + "&course_id=" + courseId;\n                          if ( json !== null )\n                          {\n                            // capture any error message and display\n                            if ( json.errorMessage )\n                            {\n                              // exception message looks ugly for the end-user, hence use a more user-friendly message\n                              // to indicate the ajax refresh failed\n                              new page.InlineConfirmation( "error", json.errorMessage, false );\n                            }\n                            else if ( json.successMessage )\n                            {\n                              // WIP\n                              // var startingEl = window.parent.document.getElementById(\'blockstart_\' + questionId);\n                              // new page.NestedInlineFadeAwayConfirmation("success", json.successMessage, false,\n                              // startingEl, false );\n                            }\n                          }\n                          setTimeout( \'window.close()\', 1500 );\n                        },\n                        onFailure : function( transport, json )\n                        {\n                          new page.InlineConfirmation( "error", "Failure post discover pop-up", false );\n                        }\n                    } );\n}\n\nassessment.submitRandomBlock = function()\n{\n  if ( $( \'listContainer_datatable\' ) )\n  {\n    var searchCriterion = activeFilter.getSearchCriteriaInstance( false ).getSearchCriteriaAsXml();\n    document.copyQuestionsForm.searchCriterion.value = searchCriterion;\n    if ( window.opener )\n    {\n      postAndUpdateCanvas( document.copyQuestionsForm );\n    }\n    else\n    {\n      document.copyQuestionsForm.submit();\n    }\n  }\n  else\n  {\n    alert( page.bundle.getString( "cannot.submit.with.no.matching.questions" ) );\n  }\n  return false;\n};\n\n/** **************** Ajax method related to Test/pool canvas************************************************** */\n\nassessment.submitDrawer = function()\n{\n  var myDrawer = drawer.model.getCurrentInstance();\n  var selectedItems = myDrawer.getItems( true );\n  var i;\n  var allIds = "";\n  for ( i = 0; i < selectedItems.length; i++ )\n  {\n    var qId = selectedItems[ i ].itemId;\n    var mode = selectedItems[ i ].mode;\n    allIds += qId + ":" + mode + ",";\n  }\n  document.copyQuestionsForm.itemIds.value = allIds;\n  myDrawer.discard();\n\n  if ( window.opener )\n  {\n    postAndUpdateCanvas( document.copyQuestionsForm );\n  }\n  else\n  {\n    document.copyQuestionsForm.submit();\n  }\n  return false;\n};\n\n/** **************** Ajax method related to Test/pool canvas************************************************** */\n\nassessment.OnCompleteUpdateCanvas = function( questionId, req, showNestedReceipt )\n{\n\n  var json = req.responseText.evalJSON( true );\n  var pointsEl = $s( \'ipoints_\' + questionId );\n  var totalQuestionsCountEl = $s( \'totalNoQuestions\' + questionId );\n  var currentQuestionCountEl = $s( \'questionCount\' + questionId );\n  var totalBlockPointsEl = $s( \'totalPoints_\' + questionId );\n  var totalTestPointsEl = $s( \'totalTestPoints\' );\n  var totalQuestionsEl = $s( \'totalQuestions\' );\n  var startingEl = $s( \'blockstart_\' + questionId );\n\n  if ( !json.errorMessage && pointsEl && json.points )\n  {\n    // update per question points\n    pointsEl.childNodes[ 0 ].nodeValue = json.points;\n  }\n  if ( !json.errorMessage && totalQuestionsCountEl && json.totalQuestionsCount )\n  {\n    // update per question points\n    totalQuestionsCountEl.childNodes[ 0 ].nodeValue = json.totalQuestionsCount;\n  }\n  if ( !json.errorMessage && currentQuestionCountEl && json.currentQuestionsCount )\n  {\n    // update per question points\n    currentQuestionCountEl.childNodes[ 0 ].nodeValue = json.currentQuestionsCount;\n  }\n  if ( !json.errorMessage && totalBlockPointsEl && json.totalBlockPoints )\n  {\n    // update the total points\n    totalBlockPointsEl.childNodes[ 0 ].nodeValue = json.totalBlockPoints;\n  }\n  if ( !json.errorMessage && totalQuestionsEl && json.totalQuestions )\n  {\n    // update the total questions\n    totalQuestionsEl.innerHTML = json.totalQuestions;\n  }\n  if ( !json.errorMessage && totalTestPointsEl && json.totalTestPoints )\n  {\n    // update total Test points, not for survey or pool\n    totalTestPointsEl.innerHTML = json.totalTestPoints;\n  }\n  if ( showNestedReceipt )\n  {\n    if ( json.securityErrorMsg )\n    {\n      new page.NestedInlineConfirmation( "error", json.securityErrorMsg, true, startingEl, true );\n    }\n    else if ( json.successMessage )\n    {\n      if ( json.successMessage.indexOf( \'regrading_queued_status\' ) > 0 )\n      {\n        // If we are displaying a confirmation including regrading status then DO NOT fade it away - let it stay and get\n        // updated.\n        new page.NestedInlineConfirmation( "success", json.successMessage, false, startingEl, true, null, null, false,\n                                           false, null, 0, null, \'nested_save_receipt_\' + questionId );\n      }\n      else\n      {\n        new page.NestedInlineFadeAwayConfirmation( "success", json.successMessage, false, startingEl, false );\n      }\n    }\n  }\n  assessment.result = json.errorMessage;\n  assessment.setQuestionNumbers();\n};\n\nassessment.removeQuestionsFromBlock = function( listId, questionBlockId, courseId, assessmentId )\n{\n  var allcheckBoxes = list.checkboxes.get( listId );\n  var checkedCount = 0;\n  var ids = "";\n  for ( var i = 0; i < allcheckBoxes.length; i++ )\n  {\n    var separator = ( i == ( allcheckBoxes.length - 1 ) ) ? "" : \',\';\n    if ( allcheckBoxes[ i ].checked )\n    {\n      checkedCount++;\n      ids = ids + allcheckBoxes[ i ].value + separator;\n    }\n  }\n  if ( window.confirm( page.bundle.getString( "confirm.delete_items_count", checkedCount ) ) )\n  {\n\n    // ajax request\n    var nonceId = nonceUtil.getNonceId( \'bb-assessment-canvas\' );\n    var startingEl = document.getElementById( \'blockstart_\' + questionBlockId );\n\n    var url = "/webapps/assessment/do/authoring/modifyQuestionBlock?method=removeQuestionsFromQuestionBlock" +\n              "&block_id=" + questionBlockId + "&course_id=" + courseId + "&assessment_id=" + assessmentId +\n              "&questionIds=" + ids + "&blackboard.platform.security.NonceUtil.nonce=" + nonceId.value;\n\n    var params = url.toQueryParams();\n    url = url.split( "?" )[ 0 ];\n    new Ajax.Request( url,\n    {\n        method : \'post\',\n        parameters : params,\n        onCreate : function()\n        {\n          document.body.style.cursor = \'progress\';\n        },\n        onComplete : function( req )\n        {\n          var json = req.responseText.evalJSON( true );\n          document.body.style.cursor = \'default\';\n          nonceId.value = json.nonceId;\n          inventoryList.ajaxPostOnClick( null, listId );\n          if ( json.errorMessage )\n          {\n            new page.NestedInlineConfirmation( "error", json.errorMessage, false, startingEl, false );\n          }\n        },\n        onSuccess : function( req )\n        {\n          assessment.OnCompleteUpdateCanvas( questionBlockId, req, true );\n\n        },\n        onFailure : function( req )\n        {\n          assessment.OnCompleteUpdateCanvas( questionBlockId, req, true );\n        }\n    } );\n  }\n};\n\nassessment.result = "";\nassessment.saveQuestionCount = function( assessmentId, blockId, courseId, forRandomBlock )\n{\n  var countEl = document.getElementsByName( \'question_count\' )[ 0 ];\n  var originalCountEl = document.getElementById( \'questionCount\' + blockId );\n  var originalCount = originalCountEl.childNodes[ 0 ].nodeValue;\n  var newCount = countEl.value;\n  if ( newCount == originalCount )\n  {\n    return "";\n  }\n  var nonceId = nonceUtil.getNonceId( \'bb-assessment-canvas\' );\n  var startingEl = document.getElementById( \'blockstart_\' + blockId );\n\n  var url = "/webapps/assessment/do/authoring/modify" + ( forRandomBlock ? "Random" : "Question" ) +\n            "Block?method=saveQuestionCount" + "&block_id=" + blockId + "&course_id=" + courseId + "&new_count=" +\n            newCount + "&assessment_id=" + assessmentId + "&blackboard.platform.security.NonceUtil.nonce=" +\n            nonceId.value;\n\n  new Ajax.Request( url,\n  {\n      method : \'post\',\n      asynchronous : false,\n      onCreate : function()\n      {\n        document.body.style.cursor = \'progress\';\n      },\n      onComplete : function( req )\n      {\n        var json = req.responseText.evalJSON( true );\n        document.body.style.cursor = \'default\';\n        // set the new nonceId back\n        nonceId.value = json.nonceId;\n      },\n      onSuccess : function( req )\n      {\n        assessment.OnCompleteUpdateCanvas( blockId, req, true );\n      },\n      onFailure : function( req )\n      {\n        assessment.OnCompleteUpdateCanvas( blockId, req, true );\n      }\n  } );\n  return assessment.result;\n};\n\nassessment.updateExtraCredit = function( newExtraCreditValue, questionId )\n{\n  var extraCreditDiv = $( \'extra_credit_\' + questionId );\n  if ( extraCreditDiv )\n  {\n    if ( newExtraCreditValue )\n    {\n      extraCreditDiv.removeClassName( \'hidden\' );\n      extraCreditDiv.addClassName( \'extraCredit\' );\n    }\n    else\n    {\n      extraCreditDiv.addClassName( \'hidden\' );\n      extraCreditDiv.removeClassName( \'extraCredit\' );\n    }\n  }\n};\n\nassessment.updateFullCredit = function( newFullCredit, questionId )\n{\n  document.getElementById( \'original_fullCredit_value_\' + questionId ).value = newFullCredit.toString();\n  if ( newFullCredit )\n  {\n    document.getElementById( \'full_credit_\' + questionId ).show();\n  }\n  else\n  {\n    document.getElementById( \'full_credit_\' + questionId ).hide();\n  }\n};\n\n// copied or linked question\nassessment.saveQuestionPoints = function( assessmentId, questionId, courseId, isBlock, isInUse, containerId )\n{\n  var pointsToSave = document.getElementsByName( \'inline_points\' );\n  var extraCredit = $s( \'inline_points_extra_credit_id\' );\n  var newExtraCreditValue = false;\n  if ( extraCredit )\n  {\n    newExtraCreditValue = extraCredit.checked;\n  }\n  var newPoints = pointsToSave[ 0 ].value;\n  var originalPointsEl = document.getElementById( \'ipoints_\' + questionId );\n  var originalExtraCreditValue = false;\n  var originalExtraCreditEl = $( \'extra_credit_\' + questionId );\n  if ( originalExtraCreditEl )\n  {\n    originalExtraCreditValue = !originalExtraCreditEl.hasClassName( \'hidden\' );\n  }\n  var originalPoints;\n  if ( originalPointsEl.childNodes )\n  {\n    originalPoints = originalPointsEl.childNodes[ 0 ].nodeValue;\n  }\n  var originalFullCredit;\n  var newFullCredit;\n  var fullCreditCheckbox = document.getElementById( \'inline_points_full_credit_\' + questionId );\n  if ( fullCreditCheckbox !== null )\n  {\n    newFullCredit = fullCreditCheckbox.checked;\n    originalFullCredit = document.getElementById( \'original_fullCredit_value_\' + questionId ).value;\n  }\n  if ( ( newPoints == originalPoints ) && ( originalExtraCreditValue == newExtraCreditValue ) &&\n       ( !fullCreditCheckbox || ( originalFullCredit == newFullCredit.toString() ) ) )\n  {\n    return "";\n  }\n  if ( isInUse && !confirm( page.bundle.getString( "confirm.points_change.regrade_warning" ) ) )\n  {\n    return "";\n  }\n  var nonceId = nonceUtil.getNonceId( \'bb-assessment-canvas\' );\n  if ( !extraCredit )\n  {\n    newExtraCreditValue = "";\n  }\n  if ( !isBlock )\n  {\n    isBlock = false;\n  }\n  else\n  {\n    isBlock = true;\n  }\n  var url = "/webapps/assessment/do/authoring/modifyAssessment?method=updateQuestionPoints" + "&question_id=" +\n            questionId + "&course_id=" + courseId + "&points_value=" + newPoints + "&extra_credit=" +\n            newExtraCreditValue + "&assessment_id=" + assessmentId + "&is_Block=" + isBlock +\n            "&blackboard.platform.security.NonceUtil.nonce=" + nonceId.value;\n  if ( fullCreditCheckbox )\n  {\n    url = url + "&full_credit=" + newFullCredit;\n  }\n\n  new Ajax.Request( url,\n  {\n      method : \'post\',\n      asynchronous : false,\n      onCreate : function()\n      {\n        document.body.style.cursor = \'progress\';\n      },\n      onComplete : function( req )\n      {\n        var json = req.responseText.evalJSON( true );\n        document.body.style.cursor = \'default\';\n        // set the new nonceId back\n        nonceId.value = json.nonceId;\n      },\n      onSuccess : function( req )\n      {\n        var json = req.responseText.evalJSON( true );\n        var showNestedReceipt = false;\n        if ( !containerId )\n        {\n          showNestedReceipt = true;\n        }\n        assessment.OnCompleteUpdateCanvas( questionId, req, showNestedReceipt );\n        if ( extraCredit )\n        {\n          assessment.updateExtraCredit( newExtraCreditValue, questionId );\n        }\n        if ( fullCreditCheckbox )\n        {\n          assessment.updateFullCredit( newFullCredit, questionId );\n        }\n        if ( !showNestedReceipt )\n        {\n          // show receipt in pool , table cell\n          var status_msg = null;\n          if ( json.successMessage != "" )\n          {\n            status_msg = $( \'status_msg_succ\' );\n          }\n          var link = containerId.down( 1 );\n          link.hide();\n          containerId.appendChild( status_msg );\n          ( status_msg ).show();\n          setTimeout( function()\n          {\n            ( status_msg ).fade(\n            {\n              duration : 0.5\n            } );\n          }, 500 );\n\n          setTimeout( function()\n          {\n            link.appear(\n            {\n              duration : 0.5\n            } );\n          }, 1000 );\n          link.focus();\n        }\n      },\n      onFailure : function( req )\n      {\n        new page.InlineConfirmation( "error", page.bundle.getString( "updatePointsFailed" ), false );\n      }\n  } );\n\n  if ( assessment.result == "" )\n  {\n    ariaLabel = originalPointsEl.getAttribute( "aria-label" );\n    originalPointsEl.setAttribute( "aria-label", ariaLabel.replace( /(\\d+)/, newPoints ) );\n  }\n\n  return assessment.result;\n};\n\nassessment.setDefaultLinkingMode = function( isLinkingMode, courseIdStr )\n{\n  var courseId = courseIdStr || document.copyQuestionsForm.course_id.value;\n  var url = "/webapps/assessment/do/authoring/questionSearch?method=saveLinkingMode" + "&linkingMode=" + isLinkingMode +\n            "&course_id=" + courseId + \'&sessionId=\' + getCookie( \'JSESSIONID\' );\n\n  new Ajax.Request( url,\n  {\n      method : \'post\',\n      onCreate : function()\n      {\n        document.body.style.cursor = \'progress\';\n      },\n      onComplete : function( transport, json )\n      {\n        document.body.style.cursor = \'default\';\n      },\n      onSuccess : function( transport, json )\n      {\n      },\n      onFailure : function( transport, json )\n      {\n      }\n  } );\n};\n\nassessment.setDisplayFullText = function( displayFull, listId )\n{\n  var extras = [];\n  // Note - Constants.DISPLAY_FULL_TEXT = "displayFullText"\n  extras.displayFullText = displayFull;\n  inventoryList.ajaxPostOnClick( null, listId, extras, true );\n};\n\nassessment.rewriteSectionForScreenReader = function( elementName )\n{\n  var element = document.getElementById( elementName );\n  element.setAttribute( "aria-live", "assertive" );\n  element.setAttribute( "aria-relevant", "all" );\n  element.setAttribute( "aria-atomic", "true" );\n  element.setAttribute( "aria-busy", "true" );\n  var myContents = element.innerHTML;\n  element.innerHTML = myContents;\n  element.setAttribute( "aria-busy", "false" );\n  return false;\n};\n\nassessment.clearQuestionModifiedStatuses = function()\n{\n  // Called on page load to make sure we don\'t have any stranded questions-to-monitor kicking around.\n  assessment.questions_to_monitor = [];\n  assessment.questions_to_monitor_index = 0;\n};\n\nassessment.QMonitor = Class.create();\n\nassessment.QMonitor.prototype =\n{\n    initialize : function( entity, index )\n    {\n      this.index = index;\n      Event.observe( entity, \'change\', this.onChange.bindAsEventListener( this ) );\n    },\n    onChange : function( event )\n    {\n      assessment.questions_to_monitor[ this.index ].status = assessment.questionStatus.MODIFIED;\n      assessment.setModifiedIcon( assessment.questions_to_monitor[ this.index ].qnum );\n    }\n};\n\nassessment.getSaveButton = function( questionNum )\n{\n  var myButton = document.getElementById( "saveButton_" + questionNum );\n  if ( !myButton )\n  {\n    if ( assessment.isOneByOne )\n    {\n      if ( questionNum == document.forms.saveAttemptForm.current_question.value )\n      {\n        myButton = document.getElementById( "saveAnswerSubmitId" ); // for one-at-a-time tests\n      }\n    }\n  }\n  return myButton;\n};\n\nassessment.setModifiedIcon = function( questionNum )\n{\n  var saveAnswerLabel = page.bundle.getString( \'takeSaveAnswer\' );\n  var myButton = assessment.getSaveButton( questionNum );\n  if ( myButton )\n  {\n    myButton.value = saveAnswerLabel;\n    Element.removeClassName( myButton, \'answerSavingButton\' );\n    Element.removeClassName( myButton, \'answerSavedButton\' );\n  }\n  // TODO - Either rip this out or put in appropriate image, style, and text\n  // NOTE - can\'t actually enable this until on-the-fly onchange support in the VTBE is done\n  // (as opposed to the current on-unload check for change)\n  // Also - would need to deal with leaving this image on-page in this scenario:\n  // Save Q1\n  // Modify Q1\n  // Save Q2\n  // -- at this point, we update the status icons and lose the modified icon for Q1\n  /*\n   * var mySpan =document.getElementById("span_"+questionNum); var myImg = document.getElementById("img_"+questionNum);\n   * mySpan.className = "qIncomplete"; myImg.src = "/images/ci/gradebook/needs_grading.png"; // better icon myImg.alt =\n   * "TODO: Incomplete"; myImg.height= "10"; myImg.width= "10";\n   */\n};\n\nassessment.addQuestionToMonitor = function( qid, qnum, isFileUploadQuestion )\n{\n  var questionBlock = $( qid );\n  assessment.questions_to_monitor[ assessment.questions_to_monitor_index ] =\n  {};\n\n  // TODO - is there a more efficient way to do this?\n  $A( questionBlock.getElementsByTagName( \'*\' ) )._each( function( entity )\n  {\n    new assessment.QMonitor( entity, assessment.questions_to_monitor_index );\n  } );\n  assessment.questions_to_monitor[ assessment.questions_to_monitor_index ].qid = qid;\n  assessment.questions_to_monitor[ assessment.questions_to_monitor_index ].qnum = qnum;\n  // Status: 0 == not changed, 1 = changed, 2 = attempted to be auto-saved since last change\n  assessment.questions_to_monitor[ assessment.questions_to_monitor_index ].status = assessment.questionStatus.NOT_MODIFIED;\n  assessment.questions_to_monitor[ assessment.questions_to_monitor_index ].isFileUploadQuestion = isFileUploadQuestion;\n  assessment.questions_to_monitor_index++;\n};\n\nassessment.remonitorFileUpload = function( qid, qnum )\n{\n  if ( assessment.questions_to_monitor_index > 0 )\n  {\n    var i = 0;\n    for ( i = 0; i < assessment.questions_to_monitor_index; i++ )\n    {\n      if ( assessment.questions_to_monitor[ i ].qnum == qnum )\n      {\n        if ( assessment.questions_to_monitor[ i ].isFileUploadQuestion )\n        {\n          var questionBlock = $( qid );\n          $A( questionBlock.getElementsByTagName( \'*\' ) )._each( function( entity )\n          {\n            new assessment.QMonitor( entity, i );\n          } );\n        }\n        else\n        {\n          return;\n        }\n      }\n    }\n  }\n};\n\nassessment.questionBeingSaved = -1;\nassessment.markQuestionAsSaved = function( qnum )\n{\n  assessment.markQuestionSaveStatus( qnum, assessment.questionStatus.NOT_MODIFIED );\n};\nassessment.markQuestionSaveStatus = function( qnum, status )\n{\n  if ( assessment.questions_to_monitor_index > 0 )\n  {\n    var i = 0;\n    for ( i = 0; i < assessment.questions_to_monitor_index; i++ )\n    {\n      if ( assessment.questions_to_monitor[ i ].qnum == qnum )\n      {\n        assessment.questions_to_monitor[ i ].status = status;\n      }\n    }\n  }\n};\nassessment.getQuestionStatus = function( qnum )\n{\n  if ( assessment.questions_to_monitor_index > 0 )\n  {\n    var i = 0;\n    for ( i = 0; i < assessment.questions_to_monitor_index; i++ )\n    {\n      if ( assessment.questions_to_monitor[ i ].qnum == qnum )\n      {\n        return assessment.questions_to_monitor[ i ].status;\n      }\n    }\n  }\n  return 0;\n};\n\nassessment.hasUnsavedAnswers = function()\n{\n  if ( assessment.questions_to_monitor_index > 0 )\n  {\n    var i = 0;\n    if ( typeof ( finalizeEditorsAnyChange ) == "function" )\n    {\n      finalizeEditorsAnyChange( assessment.vtbeChanged );\n    }\n    for ( i = 0; i < assessment.questions_to_monitor_index; i++ )\n    {\n      if ( assessment.questions_to_monitor[ i ].status != assessment.questionStatus.NOT_MODIFIED )\n      {\n        return true;\n      }\n      else if ( assessment.questions_to_monitor[ i ].isFileUploadQuestion )\n      {\n        // In IE, the assessment.QMonitor onchange handle disappears after the first file selection and I can\'t seem to\n        // add it back.\n        // This at least gets the saving to work so it doesn\'t appear totally broken. The button doesn\'t change to \'save\n        // answer\' immediately\n        // after you attach a file a second time though, but we have to live with that for now.\n        var actionDivName = \'file_upload_ans_\' + assessment.questions_to_monitor[ i ].qid + \'_selectedFileActions\';\n        var actionDiv = $( actionDivName );\n        if ( actionDiv && actionDiv.visible() )\n        {\n          assessment.questions_to_monitor[ i ].status = assessment.questionStatus.MODIFIED;\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nassessment.registerVTBEChange = function()\n{\n  if ( typeof ( registerOnChangeCallback ) == "function" )\n  {\n    registerOnChangeCallback( assessment.vtbeChangedCallback, assessment.getVtbeQuestionIndex );\n  }\n\n};\n\nassessment.autoSaveExecutor = \'\';\nassessment.nextQuestionToCheck = 0; // To avoid saving the same question too often, start on the \'next\' question in a\n                                    // subsequent pass.\nassessment.autoSaveInterval = 10; // seconds\nassessment.startAutoSave = function( interval )\n{\n  assessment.autoSaveInterval = interval;\n  assessment.autoSaveExecutor = new PeriodicalExecuter( assessment.doAutoSave, assessment.autoSaveInterval );\n};\n\nassessment.stopAutoSave = function()\n{\n  if ( assessment.autoSaveExecutor != \'\' )\n  {\n    assessment.autoSaveExecutor.stop();\n  }\n};\n\nassessment.toggleAutoSave = function( interval )\n{\n  assessment.stopAutoSave();\n  if ( $s( \'autoSaveCheckbox\' ).checked )\n  {\n    assessment.startAutoSave( interval );\n  }\n};\n\nassessment.doAutoSave = function( pe )\n{\n  if ( assessment.submittingRightNow )\n  {\n    // Ignore if submitting right now\n    return;\n  }\n  if ( assessment.savingRightNow )\n  {\n    // If we are already saving, do nothing right now.\n    return;\n  }\n  var doneOne = false;\n  if ( assessment.hasUnsavedAnswers() )\n  {\n    // Start at the next to check so we don\'t keep saving the same question over and over again\n    // in the case of someone modifying an essay question while they have "later" questions that are unsaved.\n    for ( var i = assessment.nextQuestionToCheck; i < assessment.questions_to_monitor_index; i++ )\n    {\n      var mystatus = assessment.questions_to_monitor[ i ].status;\n      // skip questions where we attempted a save - if it is left in that state then it either means we are still\n      // waiting for a response or that we failed to save for some reason and do not want to keep trying until the user\n      // changes their answer\n      if ( mystatus == assessment.questionStatus.MODIFIED || mystatus == assessment.questionStatus.FAILED_SAVE )\n      {\n        if ( doneOne )\n        {\n          // We can only submit one question per pass because otherwise the nonce fails. Switch\n          // to a higher frequency to save all the outstanding questions faster.\n          pe.stop();\n          pe.frequency = 1;\n          pe.registerCallback();\n          assessment.nextQuestionToCheck = i;\n          return;\n        }\n        assessment.questions_to_monitor[ i ].status = assessment.questionStatus.SAVE_ATTEMPTED; // flag to indicate\n                                                                                                // we\'ve already tied to\n                                                                                                // auto-save this\n        // Will be reset to 0 after a successful save or 1 if the user modifies their answer again.\n        saveOneItem( assessment.questions_to_monitor[ i ].qid, assessment.questions_to_monitor[ i ].qnum, true, false );\n        doneOne = true;\n      }\n    }\n    if ( !doneOne && assessment.nextQuestionToCheck !== 0 )\n    {\n      // If we got here that means we had an unsaved answer, didn\'t save any in our loop, and didn\'t\n      // start at the beginning. Reset our next-to-check to 0 and reschedule\n      assessment.nextQuestionToCheck = 0;\n      pe.stop();\n      pe.frequency = 1;\n      pe.registerCallback();\n      return;\n    }\n  }\n  if ( !doneOne )\n  {\n    // If we get here then we have "finished" auto-saving all that we thought we had to - make sure we start at\n    // the beginning next time.\n    assessment.nextQuestionToCheck = 0;\n    if ( pe.frequency != assessment.autoSaveInterval )\n    {\n      pe.stop();\n      pe.frequency = assessment.autoSaveInterval;\n      pe.registerCallback();\n    }\n  }\n};\n\nassessment.vtbeChanged = function( ifr )\n{\n  var index = assessment.getVtbeQuestionIndex( ifr );\n  assessment.vtbeChangedCallback( ifr, index );\n};\n\nassessment.vtbeChangedCallback = function( ifr, index )\n{\n  if ( index != -1 )\n  {\n    assessment.questions_to_monitor[ index ].status = assessment.questionStatus.MODIFIED;\n    assessment.setModifiedIcon( assessment.questions_to_monitor[ index ].qnum );\n  }\n};\n\nassessment.getVtbeQuestionIndex = function( ifr )\n{\n  var parents = ifr.ancestors();\n  var num = parents.length;\n  for ( var i = 0; i < num; i++ )\n  {\n    var parent = parents[ i ];\n    if ( page.util.hasClassName( parent, \'takeQuestionDiv\' ) )\n    {\n      var divid = parent.id;\n      for ( var j = 0; j < assessment.questions_to_monitor_index; j++ )\n      {\n        if ( assessment.questions_to_monitor[ j ].qid == divid )\n        {\n          return j;\n        }\n      }\n      return -1;\n    }\n  }\n  return -1;\n\n};\n\nassessment.warnBeforeLeavingIfUnsavedOrUnsubmitted = function( isQbyQ, isForced, isSurvey )\n{\n  if ( ( isQbyQ && window.document.assessmentInternalNavigation ) || window.document.assessmentActuallySubmitted )\n  {\n    // don\'t warn if navigating inside a one at a time test as we will be saving automatically\n    // or if the assessment is actually submitted in which case we hope they\'ve saved all answers\n    return;\n  }\n  var prefix = "test";\n  if ( isSurvey )\n  {\n    prefix = "survey";\n  }\n  var timermsg = \'\';\n  if ( typeof counter != \'undefined\' && counter.timerRunning )\n  {\n    timermsg = page.bundle.getString( prefix + ".not.submitted.timer.running" );\n  }\n\n  if ( isForced )\n  {\n    return page.bundle.getString( prefix + ".not.submitted.forced.beforeunload.warning" );\n  }\n  return page.bundle.getString( prefix + ".not.submitted.beforeunload.warning" ) + timermsg;\n};\n\n/*\n * Send a warning message to the server to display to the user on the \'next\' page they go to. Note that this message\n * will be XSSUtil.Filter\'d to avoid XSS.\n */\nassessment.queueUpWarning = function( msg, oneByOneAndForceUnload, isActivelyImpersonating )\n{\n  var url = assessment.getNextActionUrl() + \'&method=queueUpWarning\';\n  var params = Object.extend(\n  {\n      \'msg\' : msg,\n      \'oneByOneAndForceUnload\' : oneByOneAndForceUnload,\n      \'course_assessment_id\' : document.forms.saveAttemptForm.course_assessment_id.value,\n      \'isActivelyImpersonating\' : isActivelyImpersonating\n  } );\n  var myAjax = new Ajax.Request( url,\n  {\n      method : \'post\',\n      parameters : params,\n      asynchronous : false\n  } );\n};\n\nassessment.warnOnLeaveIfUnsavedOrUnsubmitted = function( isQbyQ, isForced, isSurvey, isActivelyImpersonating )\n{\n  if ( ( isQbyQ && window.document.assessmentInternalNavigation ) || window.document.assessmentActuallySubmitted )\n  {\n    // don\'t warn if navigating inside a one at a time test as we will be saving automatically\n    // or if the assessment is actually submitted in which case we hope they\'ve saved all answers\n    return;\n  }\n  var timermsg = \'\';\n  var prefix = "test";\n  if ( isSurvey )\n  {\n    prefix = "survey";\n  }\n  if ( assessment.hasUnsavedAnswers() )\n  {\n    // Since we are always auto-saving anyways, we might as well just always save unsaved answers here.\n    saveAllQuestions( false );\n  }\n  if ( isForced )\n  {\n    assessment.queueUpWarning( page.bundle.getString( prefix + ".not.submitted.forced.warning",\n                                                      assessment.currentTestName ), true, isActivelyImpersonating );\n  }\n  else\n  {\n    if ( typeof counter != \'undefined\' && counter.timerRunning )\n    {\n      timermsg = page.bundle.getString( prefix + ".not.submitted.timer.running" );\n    }\n    assessment.queueUpWarning( page.bundle.getString( prefix + ".not.submitted.warning", assessment.currentTestName ) +\n                               timermsg, false, isActivelyImpersonating );\n  }\n};\n\nassessment.setDefaultQuestionDisplay = function( blockToLeaveVisible )\n{\n  assessment.blockToLeaveVisible = blockToLeaveVisible;\n  UserDataDWRFacade.getStringPermScope( "assessment.questionsExpanded", function( questionsExpanded )\n  {\n    if ( questionsExpanded == \'false\' )\n    {\n      assessment.toggleQuestionDisplay();\n    }\n    assessment.blockToLeaveVisible = \'null\';\n  } );\n\n};\n\nassessment.setupChangeListener = function()\n{\n  // This loops over all input elements that have a name of "points_bulk"\n  $$( \'input[name="points_bulk"]\' ).each( function( elem )\n  {\n\n    Event.observe( elem, \'change\', function( event )\n    {\n      assessment.updatePointsInput( event );\n    } );\n    Event.observe( elem, \'keyup\', function( event )\n    {\n      assessment.updatePointsInput( event );\n    } );\n    Event.observe( elem, \'paste\', function( event )\n    {\n      assessment.updatePointsInput( event );\n    } );\n  } );\n};\nassessment.toggleQuestionDisplay = function()\n{\n  var newVis = !assessment.questionVisibility;\n  if ( newVis )\n  {\n    UserDataDWRFacade.setStringPermScope( "assessment.questionsExpanded", true );\n  }\n  else\n  {\n    UserDataDWRFacade.setStringPermScope( "assessment.questionsExpanded", false );\n  }\n  // Note -most of the time this will be "contentListItem:null" - that\'s OK\n  var idToIgnore = "contentListItem:" + assessment.blockToLeaveVisible;\n  $A( document.getElementsByTagName( \'li\' ) )._each( function( entity )\n  {\n    // hide|show the given entity if it is one we care about\n    var id = entity.id;\n    if ( id.startsWith( "contentListItem:" ) && id != idToIgnore )\n    {\n      $A( entity.getElementsByTagName( \'div\' ) )._each( function( adiv )\n      {\n        if ( page.util.hasClassName( adiv, \'details\' ) )\n        {\n          if ( newVis )\n          {\n            $( adiv ).show();\n          }\n          else\n          {\n            $( adiv ).hide();\n          }\n        }\n      } );\n      if ( newVis )\n      {\n        entity.removeClassName( \'hideQuestionDetails\' );\n      }\n      else\n      {\n        entity.addClassName( \'hideQuestionDetails\' );\n      }\n    }\n  } );\n  var buttonText = page.bundle.getString( newVis ? "hide.question.details" : "show.question.details" );\n  $( \'content_listContainer_hideshowQuestions_top\' ).down( \'a\' ).update( buttonText );\n  $( \'content_listContainer_hideshowQuestions_bottom\' ).down( \'a\' ).update( buttonText );\n  assessment.questionVisibility = newVis;\n};\n\nassessment.setDisableFlag = function( questionId, flag )\n{\n  assessment.modifyHelper( questionId, \'setDisableFlag\' + flag, \'false\' );\n};\n\nassessment.questionLabelMap =\n{};\nassessment.dndHooksAdded = false;\n\nassessment.updateCorrectAnswerAltMessage = function()\n{\n  var index = 1;\n  var questions = $( \'content_listContainer\' );\n  if ( questions )\n  {\n    $A( questions.childElements() ).each(\n      function( li )\n      {\n        var questionNumberElement = li.select( "span.questionNumber.autoQuestionNumber" );\n        if ( questionNumberElement && questionNumberElement.length == 1 )\n        {\n          var questionNumber = questionNumberElement[ 0 ].innerHTML.substring( 0, questionNumberElement[ 0 ].innerHTML.length - 1 )\n          li.select( "img[name=\'correctAnswerImg\']" ).each(\n             function( elm )\n             {\n               var altMessage = elm.readAttribute( "alt" );\n               elm.setAttribute( "alt", altMessage.replace( "##questionNumber##", questionNumber ) )\n               var titleMessage = elm.readAttribute( "title" );\n               if (titleMessage){\n                 elm.setAttribute( "title", altMessage.replace( "##questionNumber##", questionNumber ) )\n               }\n             } )\n        }\n\n      } )\n  }\n}\n\nassessment.setQuestionNumbers = function()\n{\n  var index = 1;\n  // loop through line items in list of questions\n  var questions = $( \'content_listContainer\' );\n  if ( questions )\n  {\n    $A( questions.childElements() ).each( function( li )\n    {\n      var h3 = li.down( \'h3\' );\n      var span = h3.down( \'span.questionNumber\' );\n      if ( !span ) // create & add span for questionNumber if none exists\n      {\n        span = new Element( \'span\',\n        {\n          \'class\' : \'questionNumber autoQuestionNumber\'\n        } );\n        h3.insert(\n        {\n          top : span\n        } );\n      }\n      var id = h3.up( \'div\' ).id;\n      var qSetSize = $( \'questionCount\' + id );\n      var qNumStr = \'\' + index;\n      if ( qSetSize ) // show number range for question sets\n      {\n        var s = parseInt( qSetSize.innerHTML, 10 );\n        index += s - 1;\n        if ( s > 1 )\n        {\n          qNumStr += \' - \' + index;\n        }\n        else if ( s === 0 )\n        {\n          qNumStr = \'\';\n        }\n      }\n      qNumStr = qNumStr + \'.\';\n      index++;\n      span.update( qNumStr );\n      // force JAWS reads number + label\n      var checkbox = li.down( \'input\' );\n      var label = li.down( \'label\' );\n      checkbox.setAttribute(\'aria-label\', qNumStr+\' \'+label.innerHTML);\n      // Save numbered label in map for loading accessible reorder select.\n      // Since the question labels render as literal text, replace all &nbsp; with space.\n      assessment.questionLabelMap[ id ] = h3.innerHTML.stripTags().replace( /&nbsp;/g, " " );\n    } );\n  }\n  if ( !assessment.dndHooksAdded )\n  {\n    var dndCtrl = dragdrop.getControllerObjById( \'pageListReorderControls\' );\n    if ( dndCtrl )\n    {\n      // Set question numbers in the accessible reorder select before opening it\'s popup.\n      // Setting the question numbers needs to be defered until the popup is added to the DOM, which\n      // happens just before the popup is opened\n      dndCtrl.extPreOpenCallback = assessment.setAccessibleReorderQuestionNumbers;\n      // call this function to set question numbers after a dnd or accessible reorder happens\n      dndCtrl.extPostOrderCallback = assessment.setQuestionNumbers;\n      assessment.dndHooksAdded = true;\n    }\n  }\n};\n\nassessment.setAccessibleReorderQuestionNumbers = function()\n{\n  $A( $( \'pageListReorderControlSelect\' ).options ).each( function( option )\n  {\n    option.text = assessment.questionLabelMap[ option.value ];\n  } );\n};\n\nassessment.viewReferencingCanvases = function( courseId, assessmentId )\n{\n  var url = "/webapps/assessment/do/authoring/modifyAssessment?course_id=" + courseId +\n            "&method=getReferringCanvases&assessmentId=" + assessmentId;\n  new Ajax.Request( url,\n  {\n      method : \'post\',\n      asynchronous : false,\n      onCreate : function()\n      {\n        document.body.style.cursor = \'progress\';\n      },\n      onComplete : function( req )\n      {\n        document.body.style.cursor = \'default\';\n      },\n      onSuccess : function( req )\n      {\n        $( \'referencingCanvasesPlaceholder\' ).update( req.responseText );\n      },\n      onFailure : function( req )\n      {\n        $( \'referencingCanvasesPlaceholder\' ).update( page.bundle.getString( "error.loading.referrers" ) );\n      }\n  } );\n};\n\nassessment.normalizedWidth = 0;\nassessment.setNormalizedButtonWidth = function( myButton )\n{\n  if ( assessment.normalizedWidth === 0 )\n  {\n    myButton.value = page.bundle.getString( \'takeSaveAnswer\' );\n    Element.removeClassName( myButton, \'answerSavingButton\' );\n    Element.removeClassName( myButton, \'answerSavedButton\' );\n    assessment.normalizedWidth = myButton.clientWidth;\n\n    myButton.value = page.bundle.getString( \'takeSaveAnswerAgain\' );\n    Element.addClassName( myButton, \'answerSavedButton\' );\n    if ( myButton.clientWidth > assessment.normalizedWidth )\n    {\n      assessment.normalizedWidth = myButton.clientWidth;\n    }\n    myButton.value = page.bundle.getString( \'savingAnswer\' );\n    Element.addClassName( myButton, \'answerSavingButton\' );\n    Element.removeClassName( myButton, \'answerSavedButton\' );\n    if ( myButton.clientWidth > assessment.normalizedWidth )\n    {\n      assessment.normalizedWidth = myButton.clientWidth;\n    }\n  }\n  // myButton.style.width = assessment.normalizedWidth + \'px\';\n  return;\n};\n\nassessment.resetFields = function()\n{\n  window.document.assessmentSubmitted = false;\n  window.document.assessmentActuallySubmitted = true;\n};\n\nassessment.getNextActionUrl = function()\n{\n  var url = document.forms.saveAttemptForm.action;\n  url = url + \'?saveSequence=\' + ( assessment.saveSequence++ ) + \'&takePageId=\' + assessment.takePageId;\n  \n  // Add query parameters needed to regenerate the launch page if needed. This is to handle the edge case where\n  // a student tries to save their question, happens to lose their network connection for that second. In that scenario,\n  // he would see an internal browser error page. If he hits \'enter\' on the browser location bar and happens to get back\n  // his network connection, that will generate a GET\n  // to the LEARN Server. To try to recover from the network error, LEARN will use the following query parameters to\n  // send them back to the take page.\n  // Note, this won\'t work for Assessments using \'forceCompletion\'.\n  url = url + \'&course_assessment_id=\' + document.forms.saveAttemptForm.course_assessment_id.value;\n  url = url + \'&course_id=\' + document.forms.saveAttemptForm.course_id.value;\n  url = url + \'&content_id=\' + document.forms.saveAttemptForm.content_id.value;\n  return url;\n};\n\nassessment.submitAttemptForm = function()\n{\n  var myForm = document.forms.saveAttemptForm;\n  var origUrl = myForm.action;\n  myForm.action = assessment.getNextActionUrl();\n  try\n  {\n    myForm.submit();\n  }\n  catch ( err )\n  {\n    // Make sure we get to the next line and reset the url just in case.\n  }\n  myForm.action = origUrl;\n  // For submits on tests with file-upload questions, we have to be able to submit the form again.\n  // For other uses of this method, we\'re reloading the page and dealing with double-submit in our own\n  // assessment-specific fashion so we want to disable the default doublesubmit handling.\n  doubleSubmit.allowSubmitAgainForForm( myForm );\n};\n\n// This is the final save-and-submit request for the test/survey\nassessment.doConfirmSubmit = function( msg )\n{\n  document.forms.saveAttemptForm.save_and_submit.value = \'true\';\n  try\n  {\n    if ( confirmSubmit( msg ) )\n    {\n      assessment.resetFields();\n      assessment.submitAttemptForm();\n    }\n  }\n  catch ( err )\n  {\n    // If we had an error, continue to clear the saveandsubmit value\n  }\n  document.forms.saveAttemptForm.save_and_submit.value = \'\';\n  return false;\n};\n\nassessment.alertSaveStatus = function( status, forSaveAll )\n{\n  if ( status == \'COMPLETED\' )\n  {\n    // status == \'COMPLETED\' we will not show an alert on successful save, button change to \'Saved\' is already indicator\n    // of successful save for individual questions\n    if ( forSaveAll )\n    {\n      alert( page.bundle.getString( "confirm.saved_all" ) );\n    }\n  }\n  else if ( status == \'PARTIAL\' )\n  {\n    alert( page.bundle.getString( "confirm.saved_partial" ) );\n  }\n  else if ( status == \'UNANSWERED\' )\n  {\n    alert( page.bundle.getString( "confirm.saved_empty" ) );\n  }\n  else\n  {\n    alert( page.bundle.getString( "confirm.error" + ( forSaveAll ? "_all" : "" ) ) );\n  }\n};\n\n// The following safetynet method is used to give the student a chance to \'resubmit\' if they are afraid\n// the system has "lost" their request. In reality this shouldn\'t happen, but in cases where a server node\n// crashes or is killed while saving or the rarer case where a firewall or other network device "swallows" the\n// connection\n// this will at least enable the buttons in the UI so the student can try again.\nassessment.checkAlreadySavedSafetyNet = function()\n{\n  assessment.alreadySavedSafetyNetId = null;\n  if ( !window.document.assessmentSaved )\n  {\n    // Since the already-saved check can be done on either a page reload or on an inline save, the\n    // safety net is not going to always "go away" because there is no page reload. Instead, merely\n    // check the status of this flag and silently return if it has been cleared.\n    return;\n  }\n  if ( doesUserWantToRiskItAndTryOver()  )\n  {\n    window.document.assessmentSaved = false;\n  }\n  else\n  {\n    assessment.checkAlreadySavedSafetyNet.delay( assessment.safetyNetDelay );\n  }\n};\n\nassessment.checkAlreadySaved = function( msg )\n{\n  var valid = assessment.prepareForSubmit( true );\n  if ( window.document.assessmentSaved === true )\n  {\n    alert( msg );\n    return false;\n  }\n  if ( assessment.alreadySavedSafetyNetId !== null )\n  {\n    window.clearTimeout( assessment.alreadySavedSafetyNetId );\n  }\n  assessment.alreadySavedSafetyNetId = assessment.checkAlreadySavedSafetyNet.delay( assessment.safetyNetDelay );\n  window.document.assessmentSaved = true;\n  return true;\n};\n\nassessment.removeFileUploadAnswer = function( fieldName, divName, questionId, questionNumber, remAnsSuffix,\n                                              takeDupeSaveMsg )\n{\n  document.getElementById( divName ).style.display = "none";\n  document.forms.saveAttemptForm.elements.method.value = "fileremove";\n  document.forms.saveAttemptForm.elements[ fieldName + \'-override\' ].value = "false";\n  document.forms.saveAttemptForm.elements[ fieldName + remAnsSuffix ].value = "true";\n  try\n  {\n    if ( assessment.checkAlreadySaved( takeDupeSaveMsg ) )\n    {\n      saveOneItem( questionId, questionNumber, true, false );\n    }\n  }\n  catch ( err )\n  {\n    // Ignore - just want to make sure we do the next statement\n  }\n  document.forms.saveAttemptForm.elements[ fieldName + remAnsSuffix ].value = "";\n  return false;\n};\n\nassessment.updateQuestionStatusResponse = function( originalRequest )\n{\n  var qnums = originalRequest.responseText;\n  var lines = qnums.split( "\\n" );\n  var qnum = lines[ 0 ].split( "," );\n  for ( var i = 0; i < qnum.length; i++ )\n  {\n    var num = qnum[ i ];\n    if ( num > 0 )\n    {\n      setSavedIcon( num );\n    }\n    else\n    {\n      setNotSavedIcon( -num, true );\n    }\n  }\n  for ( var j = 1; j < lines.length; j++ )\n  {\n    var fileUpload = lines[ j ].split( ":" );\n    if ( fileUpload.length == 2 )\n    {\n      var divName = "file_upload_div_" + fileUpload[ 0 ];\n      var divElement = document.getElementById( divName );\n      if ( fileUpload[ 1 ] == "HIDE" )\n      {\n        if ( divElement !== null )\n        {\n          divElement.style.display = "none";\n        }\n      }\n      else\n      {\n        var spanName = "file_upload_span_" + fileUpload[ 0 ];\n        var cancelFileButton = "file_upload_ans_" + fileUpload[ 0 ] + "_cancelFileButton";\n        var cancelElement = document.getElementById( cancelFileButton );\n        var overrideName = "file_upload_ans_" + fileUpload[ 0 ] + "-override";\n        var overrideElement = document.forms.saveAttemptForm.elements[ overrideName ];\n        var spanElement = document.getElementById( spanName );\n        if ( divElement !== null ) // we must check if item exists for one question at a time format\n        {\n          divElement.style.display = "block";\n        }\n        if ( spanElement !== null )\n        {\n          spanElement.innerHTML = fileUpload[ 1 ];\n        }\n        if ( cancelElement !== null )\n        {\n          cancelElement.click();\n        }\n        if ( typeof overrideElement !== \'undefined\' && overrideElement !== null )\n        {\n          overrideElement.value = "true";\n        }\n      }\n    }\n  }\n};\n\nassessment.prepareForSubmit = function( doValidation )\n{\n  // MUST VALIDATE FORM TO PERSIST WYSIWYG\n  // Set textarea value to VTBE contents:\n  if ( typeof ( finalizeEditors ) == "function" )\n  {\n    finalizeEditors();\n  }\n\n  /* Transform equations place holders into html before validation */\n  var ismath = window.api ? true : false; // True if webeq is there\n\n  /* Transform equations place holders into html before validation */\n  if ( ismath )\n  {\n    api.setHtml();\n  }\n\n  if ( doValidation )\n  {\n    /* Validate form TODO: Why not call validateForm() */\n    var valid = formCheckList.check();\n    return valid;\n  }\n  return true;\n};\n\nassessment.inlineJumpTo = function( questionNumber )\n{\n  var elem = $( questionNumber );\n  elem.removeClassName( \'hidden\' );\n  elem.focus();\n  var mytop = elem.cumulativeOffset()[ 1 ];\n  var scrollleft = document.viewport.getScrollOffsets().left;\n  var statusHeight = $( \'topbar\' ).getDimensions().height + 30;\n  window.scrollTo( scrollleft, mytop - statusHeight );\n  elem.addClassName( \'hidden\' );\n  return false;\n};\n\nassessment.getQuestionItemResponseSilent = function( originalRequest )\n{\n  assessment.getQuestionItemResponseHelper( originalRequest, false );\n};\n\nassessment.getQuestionItemResponse = function( originalRequest )\n{\n  assessment.getQuestionItemResponseHelper( originalRequest, true );\n};\n\nassessment.getQuestionItemResponseHelper = function( originalRequest, interactive )\n{\n  var reqStatus = originalRequest.status;\n  var status = assessment.parseAjaxResponse( originalRequest );\n  assessment.setQuestionStatus( status == "COMPLETED", (reqStatus != 0) );\n  assessment.savingRightNow = false;\n  if ( interactive )\n  {\n    assessment.alertSaveStatus( status, false );\n  }\n};\n\nassessment.onFailureCallBackSilent = function( failure )\n{\n  assessment.onFailureCallBackHelper( failure, false );\n};\n\nassessment.onFailureCallBack = function( failure )\n{\n  assessment.onFailureCallBackHelper( failure, true );\n};\n\nassessment.onFailureCallBackHelper = function( failure, interactive )\n{\n  try\n  {\n    if ( failure && failure.responseText )\n    {\n      var error = failure.responseText.split( \'##\' )[ 0 ];\n      if ( interactive )\n      {\n        alert( page.bundle.getString( "confirm.error" ) + ": " + error );\n      }\n    }\n    // First, immediately set the status to false for the question we just failed on - then do a full update of all\n    // status.\n    assessment.setQuestionStatus( false, false );\n    updateQuestionStatus();\n  }\n  catch ( err )\n  {\n    // Ignoring - just want to make sure we hit the next two lines of code all the time\n  }\n  assessment.savingRightNow = false;\n  window.document.assessmentSaved = false;\n};\n\nassessment.onExceptionCallBackSilent = function( failure )\n{\n  assessment.onExceptionCallBackHelper( failure, false );\n};\n\nassessment.onExceptionCallBack = function( failure )\n{\n  assessment.onExceptionCallBackHelper( failure, true );\n};\n\nassessment.onExceptionCallBackHelper = function( failure, interactive )\n{\n  assessment.onFailureCallBackHelper( failure, interactive );\n};\n\nassessment.setQuestionStatus = function( isSave, isSuccess )\n{\n  var questionNum = document.forms[ \'saveAttemptForm\' ].current_question.value\n  if ( isSave )\n  {\n    setSavedIcon( questionNum );\n  }\n  else\n  {\n    setNotSavedIcon( questionNum, isSuccess );\n    if ( !isSuccess )\n    {\n      // Called as a result of a failure/exception in the ajax call - set the savestatus to FAILED_SAVE\n      // so that we will try to auto-save again (and to avoid having questionstatus think it is actually saved)\n      assessment.markQuestionSaveStatus( questionNum, assessment.questionStatus.FAILED_SAVE );\n    }\n  }\n  window.document.assessmentSaved = false;\n};\n\nassessment.AIMcompleteCallbackSilent = function( response )\n{\n  return assessment.AIMcompleteCallbackHelper( response, false, false );\n};\n\nassessment.AIMcompleteCallback = function( response )\n{\n  return assessment.AIMcompleteCallbackHelper( response, true, false );\n};\n\nassessment.AIMcompleteSaveAllCallback = function( response )\n{\n  return assessment.AIMcompleteCallbackHelper( response, true, true );\n};\n\nassessment.AIMcompleteCallbackHelper = function( response, interactive, forSaveAll )\n{\n  document.forms[ \'saveAttemptForm\' ].target = "";\n  var status = \'ERROR\';\n  try\n  {\n    if ( response )\n    {\n      // AIM-posted responses will be wrapped in a pre html block...\n      response = response.replace( /<pre[^>.]*>/i, \'\' ).replace( /<\\/pre>/, \'\' );\n    }\n    status = assessment.parseAjaxResponseEx( response );\n    updateQuestionStatus();\n  }\n  catch ( err )\n  {\n    // Ignoring - just want to make sure we hit the next line of code all the time\n  }\n  assessment.savingRightNow = false;\n  try\n  {\n    if ( interactive )\n    {\n      assessment.alertSaveStatus( status, forSaveAll );\n    }\n    assessment.setQuestionStatus( status == "COMPLETED", status != "ERROR" );\n    if ( status != \'COMPLETED\' && status != \'UNANSWERED\' )\n    {\n      var qId = assessment.getQuestionIdFromNumber( assessment.questionBeingSaved );\n      if ( qId )\n      {\n        assessment.hideShowFileActionsIfRequired( qId, false );\n      }\n    }\n  }\n  catch ( err )\n  {\n    // Ignoring - just want to make sure we hit the next two lines of code all the time\n  }\n  window.document.assessmentSaved = false;\n  return;\n};\n\nfunction setSavedIcon( questionNum )\n{\n  if ( assessment.getQuestionStatus( questionNum ) == assessment.questionStatus.FAILED_SAVE )\n  {\n    //\n    return;\n  }\n  var mySpan = document.getElementById( "span_" + questionNum );\n  var myImg = document.getElementById( "img_" + questionNum );\n  var myButton = assessment.getSaveButton( questionNum );\n\n  mySpan.className = "qComplete";\n  myImg.src = "/images/ci/icons/file_li.gif";\n  myImg.alt = page.bundle.getString( "qStatus.complete" );\n  myImg.height = "10";\n  myImg.width = "10";\n  if ( assessment.questionBeingSaved != -1 && questionNum != assessment.questionBeingSaved )\n  {\n    // Do not update the status to saved for a question if we were not just saving it.\n    return;\n  }\n  if ( myButton )\n  {\n    assessment.setNormalizedButtonWidth( myButton );\n    myButton.value = page.bundle.getString( "take.save_answer.again" );\n    Element.removeClassName( myButton, \'answerSavingButton\' );\n    Element.removeClassName( myButton, \'answerSaveFailed\' );\n    Element.addClassName( myButton, \'answerSavedButton\' );\n    assessment.failedSaveCount = 0;\n  }\n  assessment.markQuestionAsSaved( questionNum );\n}\n\nfunction setNotSavedIcon( questionNum, isSuccess )\n{\n  var mySpan = document.getElementById( "span_" + questionNum );\n  var myImg = document.getElementById( "img_" + questionNum );\n  var myButton = assessment.getSaveButton( questionNum );\n\n  mySpan.className = "qIncomplete";\n  myImg.src = "/images/spacer.gif";\n  myImg.alt = page.bundle.getString( "qStatus.incomplete" );\n  myImg.height = "1";\n  myImg.width = "1";\n  if ( myButton )\n  {\n    assessment.setNormalizedButtonWidth( myButton );\n    Element.removeClassName( myButton, \'answerSavingButton\' );\n    Element.removeClassName( myButton, \'answerSavedButton\' );\n    if (isSuccess)\n    {\n      myButton.value = page.bundle.getString( "take.save_answer" );\n      Element.removeClassName( myButton, \'answerSaveFailed\' );\n      assessment.failedSaveCount = 0;\n    }\n    else\n    {\n      myButton.value = page.bundle.getString( "take.save_answer.failed" );\n      Element.addClassName( myButton, \'answerSaveFailed\' );\n      assessment.failedSaveCount++;\n      if (assessment.failedSaveCount >= assessment.SAVE_ATTEMPTS_BETWEEN_NOTIFICATION)\n      {\n        assessment.failedSaveCount = 0;\n        alert(page.bundle.getString(\'continuous.save.failures\'))\n      }\n    }\n  }\n}\n\nfunction AIMstartCallbackSilent()\n{\n  return true;\n}\nfunction AIMstartCallback()\n{\n  return true;\n}\n\nfunction doesUserWantToRiskItAndTryOver()\n{\n  var key = assessment.backtrackProhibited ? \'warning.taking.too.long.nobacktracking\' : \'warning.taking.too.long\';\n  return window.confirm( page.bundle.getString( key ) );\n}\n\n// The following safetynet methods are used to give the student a chance to \'resubmit\' if they are afraid\n// the system has "lost" their request. In reality this shouldn\'t happen, but in cases where a server node\n// crashes or is killed while saving or the rarer case where a firewall or other network device "swallows" the\n// connection\n// this will at least enable the buttons in the UI so the student can try again.\nfunction checkAlreadySubmittedSafetyNet()\n{\n  if ( doesUserWantToRiskItAndTryOver() )\n  {\n    window.document.assessmentSubmitted = false;\n    assessment.submittingRightNow = false;\n  }\n  else\n  {\n    checkAlreadySubmittedSafetyNet.delay( assessment.safetyNetDelay );\n  }\n}\n\nfunction internalNavigationSafetyNet()\n{\n  if ( doesUserWantToRiskItAndTryOver()  )\n  {\n    window.document.assessmentInternalNavigation = false;\n  }\n  else\n  {\n    internalNavigationSafetyNet.delay( assessment.safetyNetDelay );\n  }\n}\n\nassessment.parseAjaxResponse = function( originalRequest )\n{\n  var response = originalRequest.responseText;\n  return assessment.parseAjaxResponseEx( response );\n};\n\nassessment.parseAjaxResponseEx = function( response )\n{\n  var status = \'ERROR\';\n  if ( typeof ( response ) != \'undefined\' && response !== \'\' )\n  {\n    var parts = response.split( \',\' );\n    status = parts[ 0 ];\n    var statusParts = status.split( \'>\' );\n    if ( statusParts.length > 1 )\n    {\n      status = statusParts[ 1 ];\n    }\n    if ( parts.length > 1 )\n    {\n      var elapsed = parts[ 1 ].split( \'<\' )[ 0 ];\n      if ( status != \'COMPLETED\' && status != \'UNANSWERED\' && status != \'PARTIAL\' )\n      {\n        status = \'ERROR\';\n      }\n      if ( elapsed != -1 )\n      {\n        if ( window[ \'counter\' ] )\n        {\n          fixClock( elapsed );\n        }\n      }\n    }\n  }\n  return status;\n}\n\nfunction saveQuestionItem( questionNum, asyncSave, interactive )\n{\n  var url = assessment.getNextActionUrl();\n  document.forms[ \'saveAttemptForm\' ].elements[ \'saveonequestion\' ].value = "true";\n  var myAjax = new Ajax.Request( url,\n  {\n      method : \'post\',\n      parameters : Form.serialize( document.forms[ \'saveAttemptForm\' ] ),\n      onSuccess : interactive ? assessment.getQuestionItemResponse : assessment.getQuestionItemResponseSilent,\n      onFailure : interactive ? assessment.onFailureCallBack : assessment.onFailureCallBackSilent,\n      onException : interactive ? assessment.onExceptionCallBack : assessment.onExceptionCallBackSilent,\n      asynchronous : asyncSave\n  } );\n}\n\nassessment.saveAllQuestionsResponse = function( originalRequest )\n{\n  try\n  {\n    var status = assessment.parseAjaxResponse( originalRequest );\n    if ( status == \'COMPLETED\' ) //have to do this here because the alert is modal and freezes the UI.\n    {\n      for( var i = 0; i < assessment.questions_to_monitor_index; i++ )\n      {\n        assessment.questionBeingSaved = assessment.questions_to_monitor[i].qnum;\n        setSavedIcon( assessment.questionBeingSaved );\n      }\n    }\n    assessment.alertSaveStatus( status, true );\n  }\n  catch ( err )\n  {\n    // Ignoring - just want to make sure we hit the rest of this method\n  }\n  try\n  {\n    // value of -1 indicates saving all questions\n    // after it was changed above, we need to reset it here, before calling updateQuestionStatus(),\n    // which otherwise would not reset the save-all button text.\n    assessment.questionBeingSaved = -1;\n    updateQuestionStatus();\n  }\n  catch ( err )\n  {\n    // Ignoring - just want to make sure we hit the next two lines of code all the time\n  }\n  assessment.savingRightNow = false;\n  window.document.assessmentSaved = false;\n};\n\nfunction getDisplayPreference( element )\n{\n  if ( element == "statusBlock" )\n  {\n    UserDataDWRFacade.getStringTempScope( element, getStatusDisplay );\n  }\n  else\n  {\n    UserDataDWRFacade.getStringTempScope( element, getInstructionDisplay );\n  }\n}\n\nfunction getStatusDisplay( response )\n{\n  if ( response == "inline" )\n  {\n    showElement( \'statusBlock\' );\n  }\n  else\n  {\n    hideElement( \'statusBlock\' );\n  }\n}\n\nfunction setFileUploadType( param )\n{\n  document.forms[ \'saveAttemptForm\' ].elements[ \'fileUploadType\' ].value = param;\n}\n\nfunction isFileUploadType()\n{\n  if ( document.forms[ \'saveAttemptForm\' ].elements[ \'fileUploadType\' ].value == \'true\' )\n  {\n    return true;\n  }\n  else\n  {\n    return false;\n  }\n}\nfunction getInstructionDisplay( response )\n{\n  if ( response == "none" )\n  {\n    var msgspan = "instructionsText";\n    var msgimg = msgspan + "img";\n    document.getElementById( msgspan ).style.display = "none";\n    document.images[ msgimg ].src = "/images/ci/ng/more_options_dark.gif";\n    document.images[ msgimg ].title = ""; // TODO: This text was lost a while ago... what should it be?\n    document.images[ msgimg ].alt = ""; // ditto\n  }\n}\n\nfunction updateQuestionStatus()\n{\n  // Reset the save-all button text if we\'re saving all the questions\n  if ( assessment.questionBeingSaved == -1 )\n  {\n    var topSaveAllButton = document.getElementById( "top_saveAllAnswersButton" );\n    var bottomSaveAllButton = document.getElementById( "bottom_saveAllAnswersButton" );\n    if ( topSaveAllButton )\n    {\n      topSaveAllButton.value = page.bundle.getString( \'take.save_continue\' );\n    }\n    if ( bottomSaveAllButton )\n    {\n      bottomSaveAllButton.value = page.bundle.getString( \'take.save_continue\' );\n    }\n  }\n\n  var url = assessment.getNextActionUrl();\n  // no xsrf check required for updating status\n  document.forms.saveAttemptForm.elements[ \'method\' ].value = \'reloadQS\';\n  var parms = Form.serialize( document.forms[ \'saveAttemptForm\' ] );\n  document.forms.saveAttemptForm.elements[ \'method\' ].value = \'\';\n  var myAjax = new Ajax.Request( url,\n  {\n      method : \'post\',\n      parameters : parms,\n      onComplete : assessment.updateQuestionStatusResponse\n  } );\n}\n\nassessment.onQueryTimeRemainingSuccess = function( originalRequest )\n{\n    var response = originalRequest.responseText;\n\tvar obj = JSON.parse( response );\n\t\n\treturn obj.timeRemainingInMS || 0;\n}\n\nassessment.queryRemainingTimeInMS = function()\n{\n\tvar url = assessment.getNextActionUrl();\n\tdocument.forms.saveAttemptForm.elements[ \'method\' ].value = \'queryTimeRemainingMs\';\n\tvar parms = Form.serialize( document.forms[ \'saveAttemptForm\' ] );\n\tdocument.forms.saveAttemptForm.elements[ \'method\' ].value = \'\';\n\t  \n\tvar deferred = new $j.Deferred();\n\t\n\tvar myAjax = new Ajax.Request( url,\n\t{\n\t\tmethod : \'post\',\n\t\tparameters : parms,\n\t\tonComplete : function ( data ) {\n\t\t\t\t    \t     deferred.resolve( assessment.onQueryTimeRemainingSuccess( data ) );\n\t\t\t\t      }\n\t\t\t\t      \n\t} );\n\t\n\treturn deferred.promise();\n}\n\nfunction saveAllQuestions( asyncSave )\n{\n  assessment.prepareForSubmit( false );\n\n  var topSaveAllButton = document.getElementById( "top_saveAllAnswersButton" );\n  var bottomSaveAllButton = document.getElementById( "bottom_saveAllAnswersButton" );\n  if ( topSaveAllButton )\n  {\n    topSaveAllButton.value = page.bundle.getString( \'take.save_continue.saving\' );\n  }\n  if ( bottomSaveAllButton )\n  {\n    bottomSaveAllButton.value = page.bundle.getString( \'take.save_continue.saving\' );\n  }\n  assessment.questionBeingSaved = -1; // saving all questions\n  if ( !isFileUploadType() )\n  {\n    assessment.savingRightNow = true; // cleared in callback methods\n    var url = assessment.getNextActionUrl();\n    document.forms.saveAttemptForm.elements[ \'method\' ].value = \'saveAllAnswers\';\n    var parms = Form.serialize( document.forms[ \'saveAttemptForm\' ] );\n    document.forms.saveAttemptForm.elements[ \'method\' ].value = \'\';\n    var myAjax = new Ajax.Request( url,\n    {\n        method : \'post\',\n        parameters : parms,\n        onSuccess : assessment.saveAllQuestionsResponse,\n        onFailure : assessment.onFailureCallBack,\n        onException : assessment.onExceptionCallBack,\n        asynchronous : asyncSave\n    } );\n  }\n  else\n  {\n    if ( !asyncSave )\n    {\n      // At this point we are in the page unload logic and have to perform synchronous saves.\n      // We only want to save questions that have changed, and even at that, cannot save the\n      // file-upload questions as they rely on the ability to create new iframes on the current\n      // document which does not work in an onunload handler\n      var num_unsaved_upload_files = 0;\n      for ( var i = 0; i < assessment.questions_to_monitor_index; i++ )\n      {\n        if ( assessment.questions_to_monitor[ i ].status == assessment.questionStatus.MODIFIED )\n        {\n          if ( assessment.questions_to_monitor[ i ].isFileUploadQuestion )\n          {\n            num_unsaved_upload_files++;\n          }\n          else\n          {\n            saveOneItem( assessment.questions_to_monitor[ i ].qid, assessment.questions_to_monitor[ i ].qnum,\n                         asyncSave, false );\n          }\n        }\n      }\n      if ( num_unsaved_upload_files > 0 )\n      {\n        assessment.queueUpWarning( page.bundle.getString( "question.file_upload.unsaved_warning",\n                                                          assessment.currentTestName, num_unsaved_upload_files ) );\n      }\n    }\n    else\n    {\n      assessment.savingRightNow = true; // cleared in callback methods\n      var theSaveForm = document.forms.saveAttemptForm;\n      theSaveForm.elements[ \'method\' ].value = \'saveAllAnswers\';\n      AIM.submit( theSaveForm,\n      {\n          \'onStart\' : AIMstartCallback,\n          \'onComplete\' : assessment.AIMcompleteSaveAllCallback\n      } );\n      assessment.submitAttemptForm();\n      theSaveForm.elements[ \'method\' ].value = \'\';\n      theSaveForm.target = ""; // Do not wait for the callback to change the target - clear it now so navigation will\n                                // still work\n    }\n  }\n}\nassessment.getQuestionIdFromNumber = function( qnum )\n{\n  for ( var i = 0; i < assessment.questions_to_monitor_index; i++ )\n  {\n    if ( assessment.questions_to_monitor[ i ].qnum == qnum )\n    {\n      return assessment.questions_to_monitor[ i ].qid;\n    }\n  }\n  return undefined;\n};\n\n// This method is only called while taking an assessment\nfunction closeWindow()\n{\n  window.close();\n  return false;\n}\n\nfunction saveOneItem( questionId, questionNumber, asyncSave, interactive )\n{\n  if ( assessment.submittingRightNow )\n  {\n    // Ignore if submitting right now\n    return;\n  }\n  var myButton = assessment.getSaveButton( questionNumber );\n\n  assessment.prepareForSubmit( false );\n  document.forms[ \'saveAttemptForm\' ].current_question.value = questionNumber;\n  if ( !assessment.isOneByOne )\n  {\n    document.forms[ \'saveAttemptForm\' ].current_attempt_item_id.value = questionId;\n  }\n\n  var theSaveForm = document.forms[ \'saveAttemptForm\' ];\n\n  // No user interaction when the user leave the page (asyncSave == false)\n  if ( !asyncSave || !interactive || assessment.checkAlreadySaved( page.bundle.getString( \'take.dupe_save\' ) ) )\n  {\n    if ( myButton )\n    {\n      myButton.value = page.bundle.getString( \'take.saving_answer\' );\n      Element.removeClassName( myButton, \'answerSaveFailed\' );\n      Element.addClassName( myButton, \'answerSavingButton\' );\n      Element.removeClassName( myButton, \'answerSavedButton\' );\n    }\n    assessment.savingRightNow = true; // cleared in callback methods\n    theSaveForm.elements[ \'method\' ].value = \'saveQuestion\';\n    /*\n     * we are reusing the same window, but the assessmentSaved attribute does not get reset on the main page until after\n     * this save is finished processing, so there can be no double submit\n     */\n    // Save the question via ajax\n    assessment.questionBeingSaved = questionNumber;\n    if ( !isFileUploadType() || !asyncSave )\n    {\n      saveQuestionItem( questionNumber, asyncSave, interactive );\n    }\n    else\n    {\n      assessment.hideShowFileActionsIfRequired( questionId, true );\n      theSaveForm.elements[ \'saveonequestion\' ].value = "true";\n      AIM.submit( theSaveForm,\n      {\n          \'onStart\' : AIMstartCallbackSilent, // Always silent on start - don\'t want to display the red saving answer\n                                              // for single questions\n          \'onComplete\' : interactive ? assessment.AIMcompleteCallback : assessment.AIMcompleteCallbackSilent\n      } )\n      assessment.submitAttemptForm();\n      theSaveForm.target = ""; // Do not wait for the callback to change the target - clear it now so navigation will\n                                // still work\n      assessment.remonitorFileUpload( questionId, questionNumber );\n    }\n  }\n\n  theSaveForm.elements[ \'method\' ].value = \'\';\n  theSaveForm.current_attempt_item_id.value = theSaveForm.current_attempt_item_id_backup.value;\n}\n\nassessment.hideShowFileActionsIfRequired = function( questionId, hide )\n{\n  var fieldName = \'file_upload_ans_\' + questionId + \'_selectedFileActions\';\n  var selectedFileActions = $( fieldName );\n  if ( selectedFileActions )\n  {\n    if ( hide )\n    {\n      assessment.hasUnsavedAnswers(); // In case we clicked to add a file AND then clicked to remove an existing file\n                                      // before saving the add-file - this will force a save of the added file after\n                                      // removing the old one\n      selectedFileActions.hide();\n    }\n    else\n    {\n      selectedFileActions.show();\n    }\n  }\n};\n\nassessment.checkAlreadySubmitted = function( msg )\n{\n  if ( typeof ( finalizeEditors ) == "function" )\n  {\n    finalizeEditors();\n  }\n  if ( window.document.assessmentSubmitted == true )\n  {\n    alert( msg );\n    return false;\n  }\n  checkAlreadySubmittedSafetyNet.delay( assessment.safetyNetDelay );\n  window.document.assessmentSubmitted = true;\n  return true;\n};\n\nassessment.ensureVisible = function ( scrollId )\n{\n\n  if (scrollId.startsWith("position_")) // See ModifyQuestionAction.SCROLL_POSITION_PREFIX\n  {\n    scrollId = scrollId.substring(9);\n    // loop through line items in list of questions\n    var questions = $( \'content_listContainer\' );\n    if ( questions )\n    {\n      var allQuestions = questions.childElements();\n      if (scrollId >= allQuestions.length)\n      {\n        scrollId = allQuestions.length;\n      }\n      scrollId -= 1;\n      var qq = allQuestions[ scrollId ];\n      if ( qq )\n      {\n        var bid = qq.id.replace( \'contentListItem:\', \'blockstart_\' );\n        page.util.ensureVisible( $( bid ) );\n      }\n    }\n  }\n  else\n  {\n    page.util.ensureVisible($(scrollId));\n  }\n};\n'