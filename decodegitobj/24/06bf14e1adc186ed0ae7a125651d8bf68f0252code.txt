b'blob 78892\x00#!/usr/bin/env python\nimport os, sys, threading\nimport _thread\nimport subprocess\nimport shutil\nimport psutil\n\nimport binascii\nimport re\nimport time\nfrom datetime import datetime\nfrom time import gmtime,strftime\nimport math\nimport tkinter as tk\nfrom tkinter import *\nfrom tkinter import Tk\nimport pyscreenshot\nimport argparse\n#from PIL import Image\nimport PIL.Image\nimport PIL.ImageTk\nfrom operator import itemgetter\ndef pythoninstall():\n    subprocess.call("",shell=True)\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument("-altc","--altcpdir",help="Loc of PDF conv. Example: -altcpdir /home/")\n    parser.add_argument("-pdir","--pdfdir",help="Loc of PDF. Example: -pdir /home/")\n    parser.add_argument("-p","--pdfname",help="Name of PDF. Example: -p ABC.pdf")\n    parser.add_argument("-ps","--pagestart",help="Starting Page. Example: -ps 1")\n    parser.add_argument("-pe","--pageend",help="End Page. Example: -pe 6")\n    parser.add_argument("-sp","--singlepage",help="End Page. Example: -sp 9")\n    parser.add_argument("-d","--density",help="DPI. Example: -d 100")\n    parser.add_argument("-t","--type",help="OCV Type. Example: -t 1")\n    parser.add_argument("-nc","--noconversion",help="OCV Type. Example: -nc 1")\n    parser.add_argument("-pmdir","--pdfmdir",help="Loc of PDFs. Example: -pdir /home/user")\n    parser.add_argument("-cont","--continuenote",help="continue previous note.")\n    parser.add_argument("-test","--testing",help="Testing mode")\n    parser.add_argument("-shpdf","--showpdf",help="Testing mode")\n    parser.add_argument("-multip","--multiplepage",help="Multiple page")\n    return parser.parse_args()\ndef checkfile(filename):\n    if not os.path.exists(filename):\n        f = open(filename,\'w\')\n        f.close()\ndef checkdir(dirname,mode):\n    if mode=="rw":\n        shutil.rmtree(dirname)\n    if not os.path.exists(dirname):\n        os.makedirs(dirname)\n    return True\ndef checkfileand(filename):\n    if not os.path.exists(filename):\n        f = open(filename,\'w\')\n        f.close()\ndef checkdirand(dirname):\n    if os.path.exists(dirname):\n        #shutil.rmtree(dirname)\n        subprocess.call("adb shell mkdir -p "+dirname,shell=True)\n    else:\n        subprocess.call("adb shell mkdir "+dirname,shell=True)\n    return True\ndef copyfile(source,dest):\n    if sys.platform in [\'linux\', \'linux2\']:\n        subprocess.call("cp "+source+" "+dest,shell=True)\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        subprocess.call("copy "+source+" "+dest,shell=True)\n    return True\ndef delfile(filedir):\n    if os.path.exists(filedir):\n        if sys.platform in [\'linux\', \'linux2\']:\n            os.remove(filedir)\n            #subprocess.call("rm -rf "+dirname+" ;", shell=True)\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            #shutil.rmtree(filedir)\n            subprocess.call("rmdir /s /q "+filedir,shell=True)\ndef convasciitohex(text,texttype):\n    if texttype==1:\n        textinhex="".join("{:02x}".format(ord(c)) for c in text)\n    elif texttype==2:\n        textinhex=bytes(bytearray.fromhex(text))\n    elif textype==3:\n        textinhex=format(int(text),\'x\')\n    return textinhex\ndef appendtext(filedir,text,textformat):\n    if textformat=="w":\n        if not os.path.exists(filedir):\n            f = open(filedir,\'w\')\n            f.close()\n    if textformat=="w+":\n        f = open(filedir,\'w+\')\n        f.write(text)\n        f.close()\n    if textformat=="a":\n        #f=open(filedir,"a")\n        #f.write("\\n"+text)\n        with open(filedir,"a") as f:\n            f.write("\\n"+text)\n            f.close()\n    if textformat=="wb":\n        with open(filedir,"wb") as f:\n            append=bytes(bytearray.fromhex(text))\n            f.write(append)\n            f.close()\n            #try:\n            #    append=bytes(bytearray.fromhex(text))\n            #    f.write(append)\n            #    f.close()\n            #except:\n            #    append=text\n            #    f = open("debug.txt",\'w+\')\n            #    f.write(append)\n            #    f.close()\n            #    print("Error in debug")\n                \ndef getdateinhex0():\n    my_date="05/11/2009"\n    b_date = datetime.strptime(my_date, \'%d/%m/%Y\')\n    diffYear=int((datetime.today() - b_date).days/365)\n    diffMonth=int((datetime.today() - b_date).days/30)\n    diffMonthHex=str(format(diffMonth,\'x\')).zfill(2)\n    diffDay=int(((datetime.today() - b_date).days-(diffMonth*30)))\n    diffDayHex=str(format(diffDay,\'x\')).zfill(2)\n    return diffDayHex, diffMonthHex\ndef getdateinhex():\n    diffDayHex, diffMonthHex=getdateinhex0()\n    difftime=diffDayHex+diffMonthHex\n    print(diffDayHex, diffMonthHex)\n    print(difftime)\n    return difftime\ndef imgsize(imgdir):\n    im=PIL.Image.open(imgdir)\n    w, h = im.size\n    return w,h\ndef grabscreen():\n    #time.sleep(1)\n    if sys.platform in [\'linux\', \'linux2\'] :\n        screenw = Home.winfo_screenwidth()\n        screenh = Home.winfo_screenheight()\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        from win32api import GetSystemMetrics\n        screenw=GetSystemMetrics(0)\n        screenh=GetSystemMetrics(1)\n    im=pyscreenshot.grab(bbox=(0,0,screenw,screenh),childprocess=False)\n    im.save("screenshot.jpg")\n    #return im\n    return True\ndef grabimg(startx,starty,stopx,stopy):\n    im=pyscreenshot.grab(bbox=(startx,starty,stopx,stopy),childprocess=False)\n    return im\ndef grabimg2(startx,starty,stopx,stopy):\n    im=cv2.imread("screenshot.jpg")\n    im=im[starty:stopy,startx:stopx]\n    return im\ndef SS1(clickStartX,clickStartY,clickStopX,clickStopY,curattachdirpc):\n    picname=strftime("%Y%m%d%H%M%S")+\'abcdefghijklmno.jpg\'\n    imgdir=curattachdirpc+os.path.sep+picname\n    im=grabimg(clickStartX,clickStartY,clickStopX,clickStopY)\n    w,h=im.size\n    im.save(imgdir)\n    print(imgdir)\n    return w,h,picname,newdir1,objno2\ndef SS2(clickStartX,clickStartY,clickStopX,clickStopY,curattachdirpc):\n    picname=strftime("%Y%m%d%H%M%S")+\'abcdefghijklmno.jpg\'\n    imgdir=curattachdirpc+os.path.sep+picname\n    im=grabimg2(clickStartX,clickStartY,clickStopX,clickStopY)\n    #w,h=im.size\n    #im.save(imgdir)\n    (h, w) = im.shape[:2]\n    cv2.imwrite(imgdir,im)\n    print(imgdir)\n    return w,h,picname,newdir1,objno2\ndef checkadbdevices():\n    #global curanddevice\n    curanddevice=subprocess.getoutput("adb devices | awk \'{gsub(\\"List of devices attached\\",\\"\\");print}\'")\n    print(curanddevice)\n    deviceconnected="device"\n    if not deviceconnected in curanddevice:\n        print("notconnected")\n        return ""\n        pass\n    return curanddevice\ndef runadbcommand(command):\n    curanddevice=checkadbdevices()\n    #nulldevice="error: device \'(null)\' not found"\n    deviceconnected="device"\n    if deviceconnected in curanddevice:\n        subprocess.call(command, shell=True)\ncuranddevice=checkadbdevices()\ndir0=os.path.dirname(os.path.realpath(__file__))\nregexindex1=r\'(01)(.{8})(.{4})(011a)\'\npatternpic=r\'(010ac480c391c391c391(?!.*010ac480c391c391c391))(.*?)(01c88a)(.{36})(.{28})(.{2})(.{2})(.{2})(.{2})(.{36})(0303)(.{102,})\'\n#patternpicx=r\'(010ac480c391c391c391(?!.*010ac480c391c391c391))(.*?)(01c88a)(.{28})(.{2})(.{2})(.{2})(.{2})(.{36})(.{36})(03)(.{8})(.{8})(.{8})(.{8})(.*?)\'\npatternpicx=r\'(010[aA][cC]480[cC]391[cC]391[cC]391(?!.*010[aA][cC]480[cC]391[cC]391[cC]391))(.*?)(01[cC]88[aA])(.{24})(.{12})(.{24})(.{12})(.{36})(03)(.{8})(.{8})(.{8})(.{8})(.*?)\'\nregexindex2=r\'(1123236e6f7465732f2323756e66696c6564(?!.*1123236e6f7465732f2323756e66696c6564))(.*?)(00\\d\\d\\d\\d00\\d\\d)(2323)\'\nregexnote1=r\'(0302010201)(.{2})(.{2}){0,1}\'\nregexnote2=r\'(0302010201)(.{2})(.{2})(0a){0,1}\'\nregexnote1v2=r\'(.{1570})(0201)(.{2})(0a)\'\nthedir=dir0+os.path.sep+"ConvPDF"\nwsldir="/mnt/c/Windows"\n\nif sys.platform in [\'linux\', \'linux2\']:\n    userid=subprocess.getoutput("awk -F: \'!/root/ && /(\\/bin\\/bash)/ {print $1}\' /etc/passwd")\n    userhomedir="/home/"+userid\n    from Xlib.display import Display\n    import Xlib.display as display\n    from Xlib import X, XK\n    from Xlib.ext import record\n    from Xlib.protocol import rq\n    import signal\n    dirand="/run/"+userid+"/1000/gvfs"\n    dirandcheck=dirand+"*/Internal shared storage"\n    if os.path.exists(dirandcheck):\n        dirand2=os.listdir(dirand)\n        fnnotesdirand=dirand+os.path.sep+dirand2[0]+"/Internal shared storage/fiinote/notes"\n        subprocess.call("nautilus file://"+schooldirpc,shell=True)\n    if os.path.exists(wsldir):\n        thedirw="C:\\\\Users\\\\"+userid+"\\\\AppData\\\\Roaming\\\\FiiNote\\\\@pagkly\\\\notes"\n        print(thedirw)\n        #thedir=subprocess.getoutput("echo "+thedirw+" | awk \'{gsub(\\"C:\\",\\"/mnt/c\\");gsub(\\"\\\\\\\\\\",\\"/\\");print}\'")\n        thedir=re.sub(r"C:","/mnt/c",thedirw)\n        thedir=re.sub(r"\\\\","/",thedir)\n        print(thedir)\nif sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n    print("Windows10")\n    userid=subprocess.getoutput("echo %USERNAME%")\n    userhomedir=subprocess.getoutput("echo %USERPROFILE%")\n    dirand="Z:"\n    dirand2=userhomedir+os.path.sep+"AppData"+os.path.sep+"Roaming"+os.path.sep+"FiiNote"+os.path.sep+"@pagkly"+os.path.sep+"notes"\n\n    #time.sleep(3600)\n    if os.path.exists(dirand):\n        fnnotesdirand=dirand+os.path.sep+"fiinote"+os.path.sep+"notes"+os.path.sep\n    if os.path.exists(dirand2):\n        thedir=dirand2\n\nautodirpc=userhomedir+os.path.sep+"Documents"+os.path.sep+"Docs"+os.path.sep+"Tech"+os.path.sep+"Automate"\nschooldirpc=autodirpc+os.path.sep+"PDF"+os.path.sep+"Sem2"\npdftonotedir=autodirpc+os.path.sep+"FN35AOCV"+os.path.sep+"pdf2note.py"\nfnexedir=dir0+os.path.sep+"FiiNote"+os.path.sep+"FiiNote.exe"\nfiinotew10pcdir=userhomedir+"\\\\Documents\\\\Docs\\\\Automate\\\\FiiNoteWINE\\\\FiiNote.exe"\npdfreaderexedir=dir0+os.path.sep+"SumatraPDF-3.1.2"+os.path.sep+"SumatraPDF.exe"\nwinefnexedir="wine "+fnexedir\nwinepdfreaderexedir="wine "+pdfreaderexedir\n#thedir=autodir+"/FiiNote/Save/@pagkly/notes/"\nprint("THEDIR="+thedir)\nfnnotesdirpc=thedir\nfnnotesdirandint="/storage/emulated/0/fiinote/notes"\ncurnotelocpc=fnnotesdirpc+os.path.sep+"andimages.txt"\nconvpdfdirpcname="ConvertedPDF2"\nconvpdfdirpc=dir0+os.path.sep+convpdfdirpcname\nnoconversion=False\nquality=100\npagestart=1\nocvtype="0"\n#os.remove(curnotelocpc)\n#####pdf2note\ndef dependencies():\n    if sys.platform in [\'linux\', \'linux2\']:\n        subprocess.call("",shell=True)\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        subprocess.call("",shell=True)\ndef setvarnotz(thedir,newdir1):\n    global notzdn,notefn,curindexpc,curindexoldpc,curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand,convpdfdirpc\n    notzdn=newdir1+".notz"\n    notefn=newdir1+".note"\n    curindexpc=thedir+os.path.sep+"index.nti"\n    curindexoldpc=thedir+os.path.sep+"index.ntiold"\n    curnotzpc=thedir+os.path.sep+notzdn\n    curnotefpc=curnotzpc+os.path.sep+notefn\n    curattachdirpc=curnotzpc+os.path.sep+"attach"\n    curnotefpc1=thedir+os.path.sep+"ConvertedPDF"+os.path.sep+notefn\n    curnotzand=fnnotesdirandint+os.path.sep+notzdn\n    curattachdirand=curnotzand+os.path.sep+"attach"\n    checkdir(curnotzpc,"")\n    checkdir(curattachdirpc,"")\n    if not os.path.exists(curnotefpc):\n        checkfile(curnotefpc)\n        ##subprocess.call("adb shell touch "+curnotefand,shell=True)\n        firstlineappend(newdir1,curnotefpc)\n        if curanddevice:\n            runadbcommand("adb push "+curnotefpc+" "+curnotzand)\n        print("appendfline")\n    appendtext(curnotelocpc,newdir1+".notz","w+")\n    if curanddevice:\n        runadbcommand("adb push "+curnotzpc+" "+fnnotesdirandint)\n    return curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand\ndef checknotz(curnotelocpc):\n    global objno2,newdir1\n    if curanddevice:\n        runadbcommand("adb shell \\"su -c \'input keyevent KEYCODE_ESCAPE && sleep 0.1 && killall com.fiistudio.fiinote\'\\"")\n    if os.path.exists(curnotelocpc):\n        with open(curnotelocpc) as f:\n            for line in f:\n                if re.search(r"\\.notz",str(line)):\n                    newdir1=line\n                    newdir1 = re.sub(\'.notz\', \'\', newdir1)\n        curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand=setvarnotz(fnnotesdirpc,newdir1)\n        if os.path.exists(curnotzpc) and os.path.exists(curnotefpc) and os.path.exists(curattachdirpc):\n            print("checkingcnf")\n            print(curnotefpc)\n            with open(curnotefpc,"rb") as f:\n                content=f.read()\n                contenthex=str(binascii.hexlify(content).decode(\'utf-8\'))\n                mo1 = re.search(regexnote1,contenthex)\n                mo2 = re.compile(regexnote1)\n                if mo2.search(contenthex):\n                    checkending=mo1.group(3)\n                    if checkending:\n                        if checkending=="0a":\n                            objno2=int(mo1.group(2), 16)\n                        else:\n                            mo1 = re.search(regexnote2,contenthex)\n                            mo2 = re.compile(regexnote2)\n                            if mo2.search(contenthex):\n                                prefix=int(mo1.group(2), 16)\n                                objno2=int(mo1.group(3), 16)\n                                if prefix==194:\n                                    objno2=objno2\n                                if prefix>194:\n                                    prefix0=((prefix-194)*64)+128\n                                    objno2=objno2-128\n                                    #print("add="+str(prefix0)+str(objno2))\n                                    objno2=prefix0+objno2\n                                #print("objno2long="+str(objno2))\n                            else:\n                                objno2=1\n                    if not checkending:\n                        objno2=1\n                f.close()\n        if (not os.path.exists(curnotzpc) or not os.path.exists(curnotefpc) or not os.path.exists(curattachdirpc)) :\n            newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n    elif not os.path.exists(curnotelocpc) or (not os.path.exists(curnotzpc)):\n        newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n    else:\n        newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n    print(str(objno2))\n    #if (objno2>=400):\n    #    newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n    return newdir1,objno2\n\ndef newnotz(thedir1,thedir2):\n    global newdir1, objno2\n    if os.path.exists(curnotelocpc):\n        os.remove(curnotelocpc)\n    objno2=1\n    newdir1="AOWNLPC00000"+strftime("%Y%m%d%H%M%S")\n    #curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand=setvarnotz(fnnotesdirandint,newdir1)\n    curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand=setvarnotz(thedir1,newdir1)\n    appendnewnote(newdir1,curindexpc,curindexoldpc)\n    restartfn()\n    return newdir1,objno2\ndef newnotz0():\n    global newdir1, objno2\n    if os.path.exists(curnotelocpc):\n        os.remove(curnotelocpc)\n    CN=checknotz(curnotelocpc)\n    newdir1=CN[0]\n    objno2=CN[1]\n\ndef firstlineappendindex(newdir1,curindexpc):\n    return True\ndef firstlineappend(newdir1,curnotef):\n    difftime=getdateinhex()\n    newdir1hex=convasciitohex(newdir1,1)\n    filetypehex="060000" + \\\n                 "01" + difftime + "FFFFFF" + "0000" + \\\n                 "01" + difftime + "FFFFFF" + \\\n                 "001A" + newdir1hex + \\\n                 "000000" + "ffff" + \\\n                 "000000" + "000000" + \\\n                 "000000" + "000000" + \\\n                 "000000" + "000000" + \\\n                 "01" + \\\n                 "000000" + "000000" + \\\n                 "000000" + "000000" + \\\n                 "01" + difftime + "FFFFFF" + \\\n                 "010302010201"+ \\\n                 "01"\n    appendtext(curnotef,filetypehex,"wb")\n\ndef getnewdirlatest():\n    import os\n    directory = userhomedir+"\\\\AppData\\\\Roaming\\\\FiiNote\\\\@pagkly\\\\notes"\n    #directory = userhomedir+os.path.sep+"AppData"+os.path.sep+"Roaming"+os.path.sep+"FiiNote"+os.path.sep+"@pagkly"+os.path.sep+"notes"\n    #directory = userhomedir+"\\\\AppData"+os.path.sep+"Roaming"+os.path.sep+"FiiNote"+os.path.sep+"@pagkly"+os.path.sep+"notes"\n    print(directory)\n    alldirlist=[os.path.join(directory,d) for d in os.listdir(directory)]\n    for f in alldirlist:\n        if (".nti" in f) or ("andimages" in f) or (".pc" in f):\n            alldirlist.remove(f)\n    latestdir=max(alldirlist, key=os.path.getmtime)\n    #if "AOWNLPC0000020180808143255.notz" in latestdir:\n    #    print("correct")\n    print(latestdir)\n    #directory=re.sub(r"\\\\","\\\\\\\\",directory)\n    #print(directory)\n    #latestdir=re.sub(directory,"",latestdir)\n    allld=latestdir.split("\\\\")\n    latestdir=allld[len(allld)-1]\n    print(latestdir)\n    #time.sleep(3600)\n    latestdir=re.sub(r".notz","",latestdir)\n    return latestdir\n\ncurrentx=""\ndef appendnewpic(w,h,picname,newdir1,objno2,columntype,rectcoordlist):\n    #newdir1=getnewdirlatest()\n    curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand=setvarnotz(fnnotesdirpc,newdir1)\n    CN=checknotz(curnotelocpc)\n    objno2=CN[1]\n    objno2=int(objno2)\n    w=int(w)\n    h=int(h)\n    newlinehex="0AC480C391C391C39101";\n    secondobjhex="C88A";\n    columnno=1\n    prevxcoordinate=""\n    prevycoordinate=""\n    countingx=0\n    countingy=0\n    if not "slidenextline" or "nearlatest" or "exactcopyrest" in columntype:\n        newxlochex="A9E19E81"\n    if "slidenextline" or "nearlatest" or "exactcopyrest" in columntype:\n        print(columntype)\n        if objno2<=2:\n            pass\n        if objno2>2:\n            with open(curnotefpc, \'rb\') as f:\n                content = f.read()\n                cihx=str(binascii.hexlify(content).decode(\'utf-8\'))\n                regexc1=re.compile(patternpicx)\n                print("findpatternpic1")\n                if regexc1.search(cihx):\n                    print("findpatternpic2")\n                    mox=re.search(patternpicx,cihx)\n                    prevdefyscale=mox.group(11)\n                    prevendyscale=mox.group(13)\n        \n                    if "exactcopyrest" in columntype:\n                        """\n                        posxloc=rectcoordlist[0]*18\n                        posyloc=rectcoordlist[1]*18\n                        countingx=posxloc\n                        countingy=posyloc\n                        ctypelist=columntype.split(";;")\n                        prevxcoordinate="E5A5A9E19E81"\n                        prevycoordinate=ctypelist[-1]\n                        """\n                        pass\n                    else:\n                        prevxcoordinate=mox.group(5)\n                        prevycoordinate=mox.group(7)\n                    \n                    if "nextcolumn" in columntype:\n                        ##Get prev size\n                        #xpresuffixint,xsuffixint,xscalequotint,xscaleremint\n                        prevdefxscale=mox.group(10)\n                        xpresuffixint=int(prevdefxscale[0:2],16)\n                        xsuffixint=int(prevdefxscale[2:4],16)\n                        xscalequotint=int(prevdefxscale[4:6],16)\n                        xscaleremint=int(prevdefxscale[6:],16)\n                    \n                        prevendxscale=mox.group(12)\n                        endxpresuffixint=int(prevendxscale[0:2],16)\n                        endxsuffixint=int(prevendxscale[2:4],16)\n                        endxscalequotint=int(prevendxscale[4:6],16)\n                        endxscaleremint=int(prevendxscale[6:],16)\n                        scaledw=0\n                        while True:\n                            xscaleremint+=1\n                            if xscaleremint>191:\n                                xscalequotint+=1\n                                xscaleremint=128\n                            if xscalequotint>191:\n                                xsuffixint+=1\n                                xscalequotint=128\n                            if xsuffixint>231:\n                                xpresuffixint+=1\n                                xsuffixint=225\n                            if xpresuffixint==endxpresuffixint and xsuffixint==endxsuffixint and xscalequotint==endxscalequotint and xscaleremint==endxscaleremint:\n                                break\n                            scaledw+=1\n                        ##prevxcoordinate+prevsize+64\n                        scaledw+=64\n                        countingx=scaledw\n                            \n                    if "slidenextline" or "nextline" in columntype:\n                        ##Get prev size\n                        #ypresuffixint,ysuffixint,yscalequotint,yscaleremint\n                        ypresuffixint=int(prevdefyscale[0:2],16)\n                        ysuffixint=int(prevdefyscale[2:4],16)\n                        yscalequotint=int(prevdefyscale[4:6],16)\n                        yscaleremint=int(prevdefyscale[6:],16)\n                        \n                        endypresuffixint=int(prevendyscale[0:2],16)\n                        endysuffixint=int(prevendyscale[2:4],16)\n                        endyscalequotint=int(prevendyscale[4:6],16)\n                        endyscaleremint=int(prevendyscale[6:],16)\n                        scaledh=0\n                        while True:\n                            yscaleremint+=1\n                            if yscaleremint>191:\n                                yscalequotint+=1\n                                yscaleremint=128\n                            if yscalequotint>191:\n                                ysuffixint+=1\n                                yscalequotint=128\n                            if ysuffixint>231:\n                                ypresuffixint+=1\n                                ysuffixint=225\n                            if ypresuffixint==endypresuffixint and ysuffixint==endysuffixint and yscalequotint==endyscalequotint and yscaleremint==endyscaleremint:\n                                break\n                            scaledh+=1\n                        countingy=scaledh                        \n                else:\n                    pass\n\n    if "exactcopy" in columntype:\n        posxloc=rectcoordlist[0]*18\n        posyloc=rectcoordlist[1]*18\n        countingx=posxloc\n        countingy=posyloc\n        if "exactcopy1" in columntype:\n            prevxcoordinate="E5A5A9E19E81"\n            prevycoordinate="E5A5A9E19E81"\n        if "exactcopyrest" in columntype:\n            ctypelist=columntype.split(";;")\n            prevxcoordinate="E5A5A9E19E81"\n            prevycoordinate=ctypelist[-1]\n    if "slidenextline" or "nextline" or "exactcopy" in columntype and "firstline" not in columntype:\n        posxpppsuffixint=int(prevxcoordinate[-12:-10],16)\n        posxppsuffixint=int(prevxcoordinate[-10:-8],16)\n        posxpsuffixint=int(prevxcoordinate[-8:-6],16)\n        posxsuffixint=int(prevxcoordinate[-6:-4],16)\n        posxint=int(prevxcoordinate[-4:-2],16)\n        posxremint=int(prevxcoordinate[-2:],16)\n                    \n        posypppsuffixint=int(prevycoordinate[-12:-10],16)         \n        posyppsuffixint=int(prevycoordinate[-10:-8],16)\n        posypsuffixint=int(prevycoordinate[-8:-6],16)\n        posysuffixint=int(prevycoordinate[-6:-4],16)\n        posyint=int(prevycoordinate[-4:-2],16)\n        posyremint=int(prevycoordinate[-2:],16)\n        if not "slide" in columntype:\n            if countingx:\n                while countingx>0:\n                    posxremint+=1\n                    if posxremint>191:\n                        posxint+=1\n                        posxremint=128\n                    if posxint>191:\n                        posxsuffixint+=1\n                        posxint=128\n                    if posxsuffixint>231:\n                        posxpsuffixint+=1\n                        posxsuffixint=225\n                    if posxpsuffixint>191:\n                        posxppsuffixint+=1\n                        posxpsuffixint=128\n                    if posxppsuffixint>191:\n                        posxpppsuffixint+=1\n                        posxppsuffixint=128\n                    countingx-=1\n            posxpppsuffixhex=format(posxpppsuffixint, \'x\')\n            posxppsuffixhex=format(posxppsuffixint, \'x\')\n            posxpsuffixhex=format(posxpsuffixint, \'x\')\n            posxsuffixhex=format(posxsuffixint, \'x\')           \n            posxhex=format(posxint, \'x\')\n            posxremhex=format(posxremint, \'x\')\n            newxlochex=posxpppsuffixhex+posxppsuffixhex+posxpsuffixhex+posxsuffixhex+posxhex+posxremhex\n        \n        while countingy>0 :\n            posyremint+=1\n            if posyremint>191:\n                posyint+=1\n                posyremint=128\n            if posyint>191:\n                posysuffixint+=1\n                posyint=128\n            if posysuffixint>231:\n                posypsuffixint+=1\n                posysuffixint=225\n            if posypsuffixint>191:\n                posyppsuffixint+=1\n                posypsuffixint=128\n            if posyppsuffixint>191:\n                posypppsuffixint+=1\n                posyppsuffixint=128\n            countingy-=1\n        posypppsuffixhex=format(posypppsuffixint, \'x\')\n        posyppsuffixhex=format(posyppsuffixint, \'x\')\n        posypsuffixhex=format(posypsuffixint, \'x\')\n        posysuffixhex=format(posysuffixint, \'x\')           \n        posyhex=format(posyint, \'x\')\n        posyremhex=format(posyremint, \'x\')\n        newylochex=posypppsuffixhex+posyppsuffixhex+posypsuffixhex+posysuffixhex+posyhex+posyremhex\n        #print(newxlochex)\n        #print(newylochex)\n    if "slide" in columntype:\n        newxlochex="E5A5AAE19E81"\n    if "slide1" in columntype:\n        prevycoordinate="E5A5A9E19E81"\n        newylochex=prevycoordinate\n    if "sameline" in columntype:\n        newylochex=prevycoordinate\n    #FIRST\n    if "firstcolumn" in columntype:\n        newxlochex="E5A5A9E19E81"\n    if "firstline" in columntype:\n        newylochex="E5A5A9E19E81"\n    xlochex="E5A5AA"+"E5AB81"+\\\n            "E5A5A9"+"E19E81"+newxlochex\n    ylochex="E5A5A9"+"E19E81"+\\\n            "E5A5AA"+"E5AB81"+newylochex\n    zlochex="E5A5A9"+"E19E81"+\\\n            "E5A5A9"+"E19E81"+\\\n            "E5A5AA"+"E5AB81"\n    \n    yscalehexs="";\n    xscalehexs="";\n    ysuffix="";\n    mode2=True    \n    if mode2:\n            orix="03 E2 93 B9"\n            oriy="03 E2 93 B9"\n            if w>h:\n                if w>1000 or h>1000:\n                    realscaling=12\n                else:\n                    realscaling=18\n                if h<=25 and w>h:\n                    realscaling=18\n            elif w<h:\n                if w>1000 or h>1000:\n                    realscaling=12\n                else:\n                    realscaling=18\n            else:\n                realscaling=18\n            orixlist=orix.split()\n            defxvallist=[]\n            for f in orixlist:\n                val=int(f, 16)\n                defxvallist.append(val)\n            defxpresuffix,defxsuffix,defxscalequot,defxscalerem=defxvallist\n                \n            oriylist=oriy.split()\n            defyvallist=[]\n            for f in oriylist:\n                val=int(f, 16)\n                defyvallist.append(val)\n            defypresuffix,defysuffix,defyscalequot,defyscalerem=defyvallist\n\n            xpresuffixint,xsuffixint,xscalequotint,xscaleremint=defxvallist\n            ypresuffixint,ysuffixint,yscalequotint,yscaleremint=defyvallist                \n            #print(defxpresuffix,defxsuffix,defxscalequot,defxscalerem)\n            #print(defypresuffix,defysuffix,defyscalequot,defyscalerem)\n\n            #xscalequot=(80=128,BF=191)\n            #xscalerem=(B9=183,BF=191)\n            #xpresuffix=(02=2,)\n            scaledw=(realscaling*w)\n            if w>h and h<=25:\n                scaledw-=(w*3)\n            if w<h and h>1000:\n                scaledw+=(w/2)\n            while scaledw>0:\n                xscaleremint+=1\n                if xscaleremint>191:\n                    xscalequotint+=1\n                    xscaleremint=128\n                if xscalequotint>191:\n                    xsuffixint+=1\n                    xscalequotint=128\n                if xsuffixint>231:\n                    xpresuffixint+=1\n                    xsuffixint=225\n                scaledw-=1  \n\n            xpresuffixhex=format(xpresuffixint,\'x\').zfill(2)\n            xsuffixhex=format(xsuffixint,\'x\').zfill(2)\n            xscalequothex=format(xscalequotint,\'x\').zfill(2)\n            xscaleremhex=format(xscaleremint,\'x\').zfill(2)\n            #print(xpresuffixhex,xsuffixhex,xscalequothex,xscaleremhex)\n            xscalehexs=xpresuffixhex+xsuffixhex+xscalequothex+xscaleremhex;\n            #([ =+(#,-])(x) #$1y\n            #yscalequot=(80=128,BF=191)\n            #yscalerem=(B9=183,BF=191)\n            scaledh=realscaling*h;\n            while scaledh>0:\n                yscaleremint+=1\n                if yscaleremint>191:\n                    yscalequotint+=1\n                    yscaleremint=128\n                if yscalequotint>191:\n                    ysuffixint+=1\n                    yscalequotint=128\n                if ysuffixint>231:\n                    ypresuffixint+=1\n                    ysuffixint=225\n                scaledh-=1\n            ypresuffixhex=format(ypresuffixint,\'x\').zfill(2)\n            ysuffixhex=format(ysuffixint,\'x\').zfill(2)\n            yscalequothex=format(yscalequotint,\'x\').zfill(2)\n            yscaleremhex=format(yscaleremint,\'x\').zfill(2)\n            #print(ypresuffixhex,ysuffixhex,yscalequothex,yscaleremhex)\n            yscalehexs=ypresuffixhex+ysuffixhex+yscalequothex+yscaleremhex;\n            #print("orix="+orix)\n            #print("oriy="+oriy)\n            #print("finalx="+str(xscalehexs))\n            #print("finaly="+str(yscalehexs))\n    if mode2:\n        objscalehex="03"+orix+oriy+xscalehexs+yscalehexs\n    if (w<128):\n        xpixshex=format(w,\'x\')\n        xpixshex=str(xpixshex).zfill(2)\n    if (w>=128):\n        xquothexint=int(math.trunc(192+(w/64)));\n        xremhexint=int(math.trunc(128+(w%64)));\n        xquothexs=format(xquothexint,\'x\')\n        xremhexs=format(xremhexint,\'x\')\n        xpixshex=xquothexs+xremhexs;\n    if (h<128):\n        ypixshex=format(h,\'x\')\n        ypixshex=str(ypixshex).zfill(2)\n    if (h>=128):\n        yquothexint=int(math.trunc(192+(h/64)));\n        yremhexint=int(math.trunc(128+(h%64)));\n        yquothexs=format(yquothexint,\'x\')\n        yremhexs=format(yremhexint,\'x\')\n        ypixshex=yquothexs+yremhexs;\n        \n    picnamelen=len(picname)+1\n    picnamelenhex=format(picnamelen,\'x\')\n    picnamehex=picnamelenhex+convasciitohex(picname,1)\n    hexc = newlinehex+secondobjhex+xlochex+ylochex+zlochex+objscalehex+picnamehex+xpixshex+ypixshex+"01"\n    print("number="+str(objno2))\n    print("w,h="+str(w),str(h))\n    print(newlinehex)\n    print(xlochex)\n    print(ylochex)\n    print(zlochex)\n    print("objscale="+objscalehex)\n    print(picnamehex)\n    append=""\n    if os.path.exists(curnotefpc):\n        with open(curnotefpc,"rb") as f:\n            content=f.read()\n            cihx=str(binascii.hexlify(content).decode(\'utf-8\'))\n            mo1=re.search(regexnote1,cihx)\n            mo2=re.compile(regexnote1)\n            if mo2.search(cihx) and objno2<=127:\n                objno2=int(mo1.group(2), 16)\n                objno2+=1\n                checkending=mo1.group(3)\n                prefixhex="" \n                if objno2<=2:\n                    totalobjhex=str(format(objno2,\'x\')).zfill(2)\n                    replace1 = re.sub(regexnote1, mo1.group(1)+totalobjhex, cihx)\n                    append=replace1+hexc\n                if objno2>2 and objno2<128 and checkending=="0a":\n                    totalobjhex=str(format(objno2,\'x\')).zfill(2)\n                    replace1 = re.sub(regexnote1, mo1.group(1)+totalobjhex+mo1.group(3), cihx)\n                    append=replace1+hexc\n                if objno2==128 and checkending=="0a":\n                    prefix=194;\n                    prefixhex=format(prefix,\'x\')\n                    totalobjhex=str(format(objno2,\'x\')).zfill(2)\n                    replace1=re.sub(regexnote1, mo1.group(1)+prefixhex+totalobjhex+mo1.group(3), cihx)\n                    print("numbc3="+str(objno2))\n                append=replace1+hexc\n            elif mo2.search(cihx) and objno2>127:\n                mo1=re.search(regexnote2,cihx)\n                mo2=re.compile(regexnote2)\n                if mo2.search(cihx):\n                    objno2+=1\n                    prefix=int(mo1.group(2), 16)\n                    prefix0=194+int((objno2-128)/64);\n                    prefixhex=format(prefix0,\'x\')\n                    if (objno2<192):\n                        totalobjhex=str(format(objno2,\'x\')).zfill(2)\n                    if (objno2>=192):\n                        totalobjhex=str(format((128+int((objno2-192)%64)),\'x\')).zfill(2)\n                    replace1 = re.sub(regexnote2, mo1.group(1)+prefixhex+totalobjhex+mo1.group(4), cihx)\n                    append=replace1+hexc\n                    print("numbc6="+str(objno2))\n            print("TOTOBJHEX="+totalobjhex)\n    if append:\n        appendtext(curnotefpc,append,"wb")\n    return objno2,curattachdirpc\n\n\ndef appendnewnote(newdir1,curindexpc,curindexoldpc):\n    global replace1, replace2\n    replace1=""\n    replace2=""\n    with open(curindexpc, \'rb\') as f:\n        print("checkingindexcur")\n        content = f.read()\n        cihx=str(binascii.hexlify(content).decode(\'utf-8\'))\n        regexc1=re.compile(regexindex1)\n        if regexc1.search(cihx):\n            mo1= re.search(regexindex1,cihx)\n            p1d=(int(mo1.group(3), 16))+1\n            p1dhex="%0.4X" % p1d\n            regexr1=mo1.group(1)+mo1.group(2)+p1dhex+mo1.group(4)\n            replace1 = re.sub(regexindex1, regexr1, cihx)\n        else:\n            pass\n        difftime=getdateinhex()\n        newdir1hex=convasciitohex(newdir1,1)\n        newfolderhex1="011A"+newdir1hex+"00" + \\\n                        "00" + \\\n                        "04" + \\\n                        "00" + \\\n                        "00" + \\\n                        "01" + difftime + "FFFFFF" + "0000" + \\\n                        "01" + difftime + "FFFFFF" + "0000" + \\\n                        "001A" + newdir1hex + \\\n                        "00" + "1123236E6F7465732F2323756E66696C6564" + "05" + \\\n                        "00"+ \\\n                        "000000" + \\\n                        "000000" + \\\n                        "000000" + \\\n                        "01" + difftime + "FFFFFF" + "0000" + \\\n                        "01" + difftime + "FFFFFF"\n        regexc2=re.compile(regexindex2)\n        if regexc2.search(replace1):\n            mo2 = re.search(regexindex2,replace1)\n            regexr2=mo2.group(1)+mo2.group(2)+newfolderhex1+mo2.group(3)+mo2.group(4)\n            replace2 = re.sub(regexindex2, regexr2, replace1)\n        appendtext(curindexpc,replace2,"wb")\n        print("donecheckingindexcur")\n    return True\n\ndef rebuildindex(fnnotesdirpc):\n    import os,re\n    global curindexpc,curindexoldpc\n    global curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        subprocess.call("taskkill /F /IM FiiNote.exe /T",shell=True)\n        subprocess.call("taskkill /F /IM wxHexEditor.exe /T",shell=True)\n    copyfile(curindexpc,curindexoldpc)\n    #delfile(curindexpc)\n    os.remove(curindexpc)\n    appendtext(curindexpc,"","w")\n    firstlinenote="01 00 00 00 00 00 00 00 01 01 00 09 23 23 75 6E 66 69 6C 65 64 00 00 00 00 00"\n    firstlinenote="01 00 00 00 00 00 01 01 1A 69 75 76 78 33 6A 34 6B 74 66 69 6F 6C 32 70 75 72 36 34 65 6B 6B 33 35 75 34 00 00 08 00 00 01 65 A9 66 A8 D8 00 00 01 65 A9 66 A8 F2 00 00 00 00 00 11 23 23 6E 6F 74 65 73 2F 23 23 75 6E 66 69 6C 65 64 01 00 00 01 65 A9 66 A8 F2 00 00 01 65 A9 66 A8 F2 00 00 01 65 A9 66 A8 F2 00 01 01 00 09 23 23 75 6E 66 69 6C 65 64 00 00 00 00 00"\n    firstlinenote=re.sub(" ","",firstlinenote)\n    appendtext(curindexpc,firstlinenote,"wb")\n    dirlist=sorted(os.listdir(fnnotesdirpc))\n    print(firstlinenote)\n    print(dirlist)\n    for f in dirlist:\n        if ".notz" in f:\n            newdir1=re.sub(r".notz","",f)\n            newdir1=newdir1.split(os.path.sep)[-1]\n            curnotzpc,curnotefpc,curattachdirpc,curnotzand,curattachdirand=setvarnotz(fnnotesdirpc,newdir1)\n            print("newdir={0}".format(newdir1))\n            appendnewnote(newdir1,curindexpc,curindexoldpc)\n    if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n        subprocess.call("start /MAX \\"fiinote\\" \\""+fiinotew10pcdir+"\\"",shell=True)\n    pass\n\n#####libocvfinal\nimport cv2\nimport numpy as np\na=1000\nwithcolour=True\n\npiccounter=0\nthisname=""\ndef namethis():\n    global piccounter,thisname\n    if not thisname:\n        Time=strftime("%Y%m%d%H%M%S")\n        thisname=Time+\'abcdefghi\'\n    piccounterzf=str(piccounter).zfill(6)\n    rectimgname=thisname+piccounterzf+\'.jpg\'\n    #rectimgdir=curattachdirpc+os.path.sep+rectimgname\n    piccounter+=1\n    return rectimgname\ndef everyletter(imgdir,imgname,afterimg,a,ocvtype,withcolour,testing,wledposdir,rectcoordlist):\n    global curattachdirpc\n    print("otype="+ocvtype)\n    #a=1000\n    imgori = cv2.imread(imgdir+os.path.sep+imgname)\n    img=imgori.copy()\n    (imgh, imgw) = img.shape[:2]\n    image_size = imgh*imgw\n    mser = cv2.MSER_create()\n    mser.setMaxArea(int(image_size/2))\n    mser.setMinArea(10)\n\n    #dtext\n    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY) #Converting to GrayScale\n    _, bw = cv2.threshold(gray, 0.0, 255.0, cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n\n    if imgh>imgw:\n        kernelcd = np.ones((5,20), np.uint8)\n        if "math" in ocvtype:\n            kernelcd = np.ones((5,30), np.uint8)\n    if imgw>imgh:\n        kernelcd = np.ones((5,20), np.uint8)\n    bwcd=cv2.erode(bw, kernelcd, iterations=1)\n    regions, rects = mser.detectRegions(bwcd)\n    imgcd=imgori.copy()\n    listcd=[]\n    for (x, y, w, h) in rects:\n        if w>10 and h>10:\n            listcd.append([x,y,w,h])\n            cv2.rectangle(imgcd, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n    #cv2.imshow(\'cd\', imgcd)\n    #cv2.waitKey(0)\n        \n    kernel = np.ones((3,1), np.uint8)\n    bw=cv2.erode(bw, kernel, iterations=1)\n    #ret, bw = cv2.connectedComponents(bw)\n    regions, rects = mser.detectRegions(bw)\n    # With the rects you can e.g. crop the letters\n    for (x, y, w, h) in rects:\n        if w<7 and h<7:\n            #cv2.rectangle(img, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n            pass\n        #cv2.rectangle(img, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n        #cv2.rectangle(img, (x-1, y-1), (x+w+1, y+h+1), color=(255, 255, 255), thickness=-1)\n        else:\n            cv2.rectangle(img, (x, y), (x+w, y+h), color=(255, 255, 255), thickness=-1)\n            pass\n    listcdoc=[]\n    def cdoc(mat):\n        mask=mat\n        im2, contours, hierarchy = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n        imgb=imgori.copy()\n        for contour in contours:\n            [x,y,w,h] = cv2.boundingRect(contour)\n            cd=[x,y,w,h]\n            #print(cd)\n            if h<(50/100*imgh) and w>(1/100*imgw) and h>(1/100*imgh):\n                listcdoc.append([x,y,w,h])\n                cv2.rectangle(imgb, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n        #cv2.imshow(\'mb\', imgb)\n        #cv2.waitKey(0)\n    imgf=imgori.copy()\n    if imgh>imgw:\n        kernelcd = np.ones((5,5), np.uint8)\n    if imgw>imgh:\n        kernelcd = np.ones((5,20), np.uint8)\n    imgfe=cv2.erode(imgf, kernel, iterations=1)\n    #cv2.imshow(\'my\', imgfe)\n    #cv2.waitKey(0)\n    hsv = cv2.cvtColor(imgfe, cv2.COLOR_BGR2HSV)\n    #cv2.imshow(\'my\', hsv)\n    #cv2.waitKey(0)\n    #filteryellow\n    lowery = np.array([20,100,100])\n    uppery = np.array([30,255,255])\n    masky = cv2.inRange(hsv, lowery, uppery)\n    #cv2.imshow(\'my\', masky)\n    #filterred\n    lowerr = np.array([160,100,100])\n    upperr = np.array([179,255,255])\n    maskr = cv2.inRange(hsv, lowerr, upperr)\n    ret, thresh = cv2.threshold(maskr, 120.0, 255.0, cv2.THRESH_BINARY_INV)\n    kernelcd = np.ones((10,30), np.uint8)\n    maskr=cv2.erode(thresh, kernelcd, iterations=1)\n    cdoc(maskr)\n    #filtergreen\n    lowerg=np.array([33,80,40])\n    upperg=np.array([102,255,255])\n    maskg = cv2.inRange(hsv, lowerg, upperg)\n    #filterblue\n    lowerb = np.array([78,158,124])\n    upperb=np.array([138,255,255])\n    maskb = cv2.inRange(hsv,lowerb,upperb)\n    ret, thresh = cv2.threshold(maskb, 120.0, 255.0, cv2.THRESH_BINARY_INV)\n    kernelcd = np.ones((5,18), np.uint8)\n    maskb=cv2.erode(thresh, kernelcd, iterations=1)\n    cdoc(maskb)\n        \n    img1=img.copy()\n    gray = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\n    ret, thresh = cv2.threshold(gray, 120.0, 255.0, cv2.THRESH_BINARY)\n    #cv2.imshow(\'BW\', thresh)\n    im2, contours, hierarchy = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    listcdsign=[]\n    for contour in contours:\n        [x,y,w,h] = cv2.boundingRect(contour)\n        if w>3 or h>3:\n            listcdsign.append([x,y,w,h])\n            cv2.rectangle(img1, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n    #print(listcdsign)\n    #print(str(len(listcd)))\n    #print(str(len(listcdsign)))\n    if not "math" in ocvtype:\n        for i in listcdsign:\n            [xsign,ysign,wsign,hsign]=i\n            for c in listcd:\n                [xcheck,ycheck,wcheck,hcheck]=c\n                if xsign in range(xcheck,xcheck+wcheck) and ysign in range(ycheck,ycheck+hcheck):\n                    #print("remove")\n                    listcd.remove(c)\n                    print(c)\n                    listcd.append([xcheck,ycheck,(xsign+wsign)-xcheck,hcheck])\n                    listcd.append([(xsign+wsign),ycheck,wcheck-((xsign+wsign)-xcheck),hcheck])\n                    break\n    listcd=sorted(listcd, key=itemgetter(1,0))\n    for i in listcd:\n        [xsign,ysign,wsign,hsign]=i\n        for c in listcd:\n            [xcheck,ycheck,wcheck,hcheck]=c\n            if xcheck in range(xsign,xsign+wsign) and ycheck in range(ysign,ysign+hsign) and i!=c:\n                listcd.remove(c)\n            \n    #for i in listcdoc:\n    #    [xsign,ysign,wsign,hsign]=i\n    #    for c in listcd:\n    #        [xcheck,ycheck,wcheck,hcheck]=c\n    #        if xsign in range(xcheck,xcheck+wcheck) and ysign in range(ycheck,ycheck+hcheck):\n                #if (hcheck)/(hsign)>2:\n                #    listcd.remove(c)\n                #    print(c)\n                #    listcd.append([xcheck,ycheck,wcheck,(ysign+hsign)-ycheck])\n                #    listcd.append([xcheck,(ysign+hsign),wcheck,hcheck-((ysign+hsign)-ycheck)])\n                #else:\n                    #print("remove")\n     #               listcd.remove(c)\n     #               print(c)\n     #               listcd.append([xcheck,ycheck,(xsign+wsign)-xcheck,hcheck])\n     #               listcd.append([(xsign+wsign),ycheck,wcheck-((xsign+wsign)-xcheck),hcheck])\n     #               break\n    imgfinal=imgori.copy()\n    a=1000\n    if "colour" in ocvtype:\n        for cd in listcdoc:\n            [x,y,w,h] = cd\n            if w>20:\n                a-=1\n                #cropthisimg\n                cropimg=imgfinal[y:y+h, x:x+w]\n                cv2.rectangle(imgfinal, (x, y), (x+w, y+h), color=(255, 255, 255), thickness=-1)\n                #rectimgname=str(a)+"t1"+imgname\n                #rectimgdir=imgdir+os.path.sep+rectimgname\n                \n                rectimgname=namethis()\n                rectimgdir=curattachdirpc+os.path.sep+rectimgname\n                \n                cv2.imwrite(rectimgdir, cropimg)\n                #rectcoord=int(x-5)+" "+int(y-5)+" "+int(x+w+5)+" "+int(y+h+5)+" "+rectimgname\n                rectcoord=str(x-5)+" "+str(y-5)+" "+str(x+w+5)+" "+str(y+h+5)+" "+rectimgname\n                appendtext(wledposdir,rectcoord,"a")\n                rectcoord=(int(x-5),int(y-5),int(x+w+5),int(y+h+5),rectimgname)\n                rectcoordlist.append(rectcoord)\n                pass\n    a=1000\n    for cd in listcd:\n        [x,y,w,h] = cd\n        if w>20:\n            a-=1\n            #cropthisimg\n            cropimg=imgfinal[y:y+h, x:x+w]\n            #cv2.rectangle(imgfinal, (x, y), (x+w, y+h), color=(255, 0, 255), thickness=1)\n            #rectimgname=str(a)+"t2"+imgname\n            #rectimgdir=imgdir+os.path.sep+rectimgname\n            \n            rectimgname=namethis()\n            rectimgdir=curattachdirpc+os.path.sep+rectimgname\n            \n            cv2.imwrite(rectimgdir, cropimg)\n            #rectcoord=int(x-5)+" "+int(y-5)+" "+int(x+w+5)+" "+int(y+h+5)+" "+rectimgname\n            rectcoord=str(x-5)+" "+str(y-5)+" "+str(x+w+5)+" "+str(y+h+5)+" "+rectimgname\n            appendtext(wledposdir,rectcoord,"a")\n            rectcoord=(int(x-5),int(y-5),int(x+w+5),int(y+h+5),rectimgname)\n            rectcoordlist.append(rectcoord)\n            pass\n    #cv2.imwrite("savedmser2.jpg",imgfinal)\n    #cv2.imshow(\'Contoured\', imgfinal)\n    #cv2.imwrite(imgdir+os.path.sep+"contouredc2"+afterimg, imgfinal)\n    rectcoordlist=sorted(rectcoordlist, key=itemgetter(1,0))\n    return rectcoordlist\n    \ndef convertrest(imgdir,imgname,afterimg,a,ocvtype,wledposdir,rectcoordlist):\n    ##a=0\n    print(imgname)\n    #time.sleep(3600)\n    if ocvtype=="2" or ocvtype=="21":\n        image = cv2.imread(imgdir+os.path.sep+imgname)\n    if ocvtype=="1" or ocvtype=="3":\n        image = cv2.imread(imgdir+os.path.sep+imgname)\n    imgw,imgh=imgsize(imgdir+os.path.sep+imgname)\n    timgh=0.10*imgw\n    bimgh=0.90*imgw\n    gray = cv2.cvtColor(image,cv2.COLOR_BGR2GRAY) # grayscale\n    _,thresh = cv2.threshold(gray,150,255,cv2.THRESH_BINARY_INV) # threshold\n    kernel = cv2.getStructuringElement(cv2.MORPH_CROSS,(3,3))\n    dilated = cv2.dilate(thresh,kernel,iterations = 13) # dilate\n    _, contours, hierarchy = cv2.findContours(dilated,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE) # get contours\n    # for each contour found, draw a rectangle around it on original image\n    #print(contours)\n    for contour in contours:\n        a-=1\n        # get rectangle bounding contour\n        [x,y,w,h] = cv2.boundingRect(contour)\n        # discard areas that are too large\n        img=image[y-5:y+h+5, x-5:x+w+5]\n        if h>10 and w>10 and y>timgh and y<bimgh:\n            ##cv2.rectangle(image,(x,y),(x+w,y+h),(255,0,255),2)\n            img=image[y-5:y+h+5, x-5:x+w+5]\n        else:\n            img=image[y-5:y+h+5, x-5:x+w+5]\n        #rectimgname=str(a)+"t2"+imgname\n        #rectimgdir=imgdir+os.path.sep+rectimgname\n        \n        rectimgname=namethis()\n        rectimgdir=curattachdirpc+os.path.sep+rectimgname\n        \n        cv2.imwrite(rectimgdir, img)\n        cv2.rectangle(image, (x, y), (x+w, y+h), (255, 255, 255), -1)\n        #rectcoord=int(x-5)+" "+int(y-5)+" "+int(x+w+5)+" "+int(y+h+5)+" "+rectimgname\n        rectcoord=str(x-5)+" "+str(y-5)+" "+str(x+w+5)+" "+str(y+h+5)+" "+rectimgname\n        appendtext(wledposdir,rectcoord,"a")\n        rectcoord=(int(x-5),int(y-5),int(x+w+5),int(y+h+5),rectimgname)\n        rectcoordlist.append(rectcoord)\n            \n    # write original image with added contours to disk\n    cv2.imwrite(imgdir+os.path.sep+"contouredc2"+afterimg, image)\n    #ocv1/3\n    ##converttext(dir_path,"13.jpg",1000)\n    #ocv2\n    ##converttext(dir_path,"conv0003.jpg",1000)\n    #rectcoordlist=[]\n    rectcoordlist=sorted(rectcoordlist, key=itemgetter(1,0))\n    return rectcoordlist\n\ndef converttext(imgdir,imgname,afterimg,a,ocvtype,colour,testing,wledposdir,rectcoordlist):\n    large=cv2.imread(imgdir+os.path.sep+imgname)\n    imgw,imgh=imgsize(imgdir+os.path.sep+imgname)\n    timgh=0.10*imgw\n    bimgh=0.90*imgw\n    print(imgdir+os.path.sep+imgname+" "+str(imgw)+","+str(imgh))\n    if ocvtype=="1" or ocvtype=="2" or ocvtype=="4" or ocvtype=="5":\n        rgb=large\n        #if imgw>imgh:\n        #    rgb=cv2.pyrDown(large)\n    if ocvtype=="3":\n        rgb=cv2.pyrDown(large)\n    if ocvtype=="21":\n        rgb=cv2.pyrUp(large)\n        rgb=cv2.pyrUp(rgb)\n    rgb2=rgb.copy()\n    small = cv2.cvtColor(rgb, cv2.COLOR_BGR2GRAY)\n    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))\n    grad = cv2.morphologyEx(small, cv2.MORPH_GRADIENT, kernel)\n\n    _, bw = cv2.threshold(grad, 0.0, 255.0, cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (9, 1))\n    connected = cv2.morphologyEx(bw, cv2.MORPH_CLOSE, kernel)\n    #cv2.imwrite(imgdir+os.path.sep+\'grab1.png\',connected)\n    # using RETR_EXTERNAL instead of RETR_CCOMP\n    _, contours, hierarchy = cv2.findContours(connected.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\n\n    mask = np.zeros(bw.shape, dtype=np.uint8)\n    #print(contours)\n    for idx in range(len(contours)):\n        x, y, w, h = cv2.boundingRect(contours[idx])\n        mask[y:y+h, x:x+w] = 0\n        cv2.drawContours(mask, contours, idx, (255, 255, 255), -1)\n        r = float(cv2.countNonZero(mask[y:y+h, x:x+w])) / (w * h)\n        if ocvtype=="1" or ocvtype=="3" :\n            if r > 0.45 and w > 100 and h > 10 and y>timgh and y<bimgh:\n                a-=1\n                ##img = rgb[y:y+h-1, x:x+w-1]\n                img=rgb[y-5:y+h+5, x-5:x+w+5]\n                rectimgname=str(a)+"t1"+imgname\n                rectimgdir=imgdir+os.path.sep+rectimgname\n                cv2.imwrite(rectimgdir, img)\n                cv2.rectangle(rgb, (x, y), (x+w, y+h), (255, 255, 255), -1)\n                \n                #rectcoord=int(x-5)+" "+int(y-5)+" "+int(x+w+5)+" "+int(y+h+5)+" "+rectimgname\n                rectcoord=str(x-5)+" "+str(y-5)+" "+str(x+w+5)+" "+str(y+h+5)+" "+rectimgname\n                appendtext(wledposdir,rectcoord,"a")\n                rectcoord=(int(x-5),int(y-5),int(x+w+5),int(y+h+5),rectimgname)\n                rectcoordlist.append(rectcoord)\n        elif ocvtype=="2" or ocvtype=="21":\n            if r > 0.45 and w > 25 and h > 10:\n                a-=1\n                ##img = rgb[y+15:y+h-15, x+15:x+w-15]\n                img=rgb[y:y+h, x:x+w]\n                if ocvtype=="2":\n                    cv2.imwrite(imgdir+os.path.sep+str(a)+"t1"+imgname, img)\n                elif ocvtype=="21":\n                    cv2.rectangle(rgb, (x-3, y-3), (x+w+3, y+h+3), (255, 255, 255), -1)\n                cv2.rectangle(rgb, (x, y), (x+w, y+h), (255, 255, 255), -1)\n                converttext(imgdir, str(a)+"t1"+imgname+".jpg","2"+afterimg+".jpg",a,4,"neutral",testing)\n        elif ocvtype=="4":\n            if r > 0.45 and w > 25 and h > 10:\n                a-=1\n                ##img = rgb[y:y+h-1, x:x+w-1]\n                img=rgb[y-5:y+h+5, x-5:x+w+5]\n                cv2.imwrite(imgdir+os.path.sep+str(a)+"t3"+imgname, img)\n                cv2.rectangle(rgb, (x, y), (x+w, y+h), (255, 255, 255), -1)\n        elif ocvtype=="5":\n            if w > 25 and h > 10 and y>timgh and y<bimgh:\n                a-=1\n                ##img = rgb[y:y+h-1, x:x+w-1]\n                img=rgb[y-5:y+h+5, x-5:x+w+5]\n                cv2.imwrite(imgdir+os.path.sep+str(a)+"t3"+imgname, img)\n                cv2.rectangle(rgb, (x, y), (x+w, y+h), (255, 255, 255), -1)\n\n        if testing and y>timgh and y<bimgh:\n            #img0=rgb[y-5:y+h+5, x-5:x+w+5]\n            #cv2.imwrite(imgdir+os.path.sep+str(a)+"t0qc"+imgname, img0)\n            #cv2.rectangle(rgb2, (x, y), (x+w, y+h), (255, 255, 255), -1)\n            #print("testing")\n            pass\n    if ocvtype=="1" or ocvtype=="3":\n        ##rgb = cv2.pyrUp(rgb)\n        cv2.imwrite(imgdir+os.path.sep+afterimg, rgb)\n        convertrest(imgdir,"contouredc"+imgname,afterimg,a,ocvtype,wledposdir,rectcoordlist)\n        #converttext(imgdir,"contouredc"+imgname,"contouredc2"+afterimg,a,5,"neutral",testing)\n    if ocvtype=="4":\n        ##rgb = cv2.pyrUp(rgb)\n        cv2.imwrite(imgdir+os.path.sep+afterimg, rgb)\n        convertrest(imgdir,"contouredc"+imgname,afterimg,a,ocvtype,wledposdir,rectcoordlist)\n    if ocvtype=="5":\n        cv2.imwrite(imgdir+os.path.sep+afterimg, rgb)\n#    cv2.imwrite(imgdir+os.path.sep+afterimg+".jpg", img)\n    if testing:\n        #cv2.imwrite(imgdir+os.path.sep+"mask"+afterimg, mask)\n        #cv2.imwrite(imgdir+os.path.sep+"rect2"+afterimg, rgb2)\n        print("testing")\n        pass\n    rectcoordlist=sorted(rectcoordlist, key=itemgetter(1,0))\n    return rectcoordlist\ndef convertcolour(imgdir,imgname,afterimg,colour,size):\n    a=1000\n    idx=0\n    # Convert BGR to HSV\n    frame=cv2.imread(imgdir+os.path.sep+imgname)\n    if size=="down":\n        frame=cv2.pyrDown(frame)\n    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n    if colour=="red":\n        lowerr = np.array([110,50,50])\n        upperr = np.array([130,255,255])\n        mask = cv2.inRange(hsv, lowerr, upperr)\n    elif colour=="green":\n        lowerg=np.array([33,80,40])\n        upperg=np.array([102,255,255])\n        mask = cv2.inRange(hsv, lowerg, upperg)\n    elif colour=="blue":\n        lowerb = np.array([110,50,50])\n        upperb = np.array([130,255,255])\n        mask = cv2.inRange(hsv,lowerb,upperb)\n    #cv2.imwrite(imgdir+os.path.sep+\'grabblue.png\', mask)\n\n    kernel = np.ones((5,5),\'int\')\n    dilated = cv2.dilate(mask,kernel)\n    ##cv2.imwrite(imgdir+os.path.sep+\'grabblue1.png\',dilated)\n    #res = cv2.bitwise_and(frame,frame,mask=mask)\n    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (9, 1))\n    connected = cv2.morphologyEx(dilated, cv2.MORPH_CLOSE, kernel)\n    ##cv2.imwrite(imgdir+os.path.sep+\'grabblue2.png\',connected)\n\n    #_,thrshed = cv2.threshold(cv2.cvtColor(connected,cv2.COLOR_BGR2GRAY),3,255,cv2.THRESH_BINARY)\n    #_,contours,hier = cv2.findContours(thrshed,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)\n    _, contours, hierarchy = cv2.findContours(connected.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)\n    #print(contours)\n    for idx in range(len(contours)):\n        a-=1\n        x, y, w, h = cv2.boundingRect(contours[idx])\n        mask[y:y+h, x:x+w] = 0\n        cv2.drawContours(mask, contours, idx, (255, 255, 255), -1)\n        r = float(cv2.countNonZero(mask[y:y+h, x:x+w])) / (w * h)\n        if r > 0.45 and w > 50 and h > 10:\n            a-=1\n            img=frame[y-5:y+h+5, x-5:x+w+5]\n            #rectcoord=int(x-5)+" "+int(x+w+5)+" "+int(y-5)+" "+int(y+h+5)+" "+imgname\n            rectcoord=[int(x-5),int(y-5),int(x+w+5),int(y+h+5),rectimgname]\n            rectcoordlist.append(rectcoord)\n            cv2.imwrite(imgdir+os.path.sep+str(a)+"t1blue"+imgname, img)\n            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 255, 255), -1)\n    cv2.imwrite(imgdir+os.path.sep+afterimg, frame)\n    rectcoordlist=sorted(rectcoordlist, key=itemgetter(1,0))\n    return rectcoordlist\n\ndef pushnewdir1toand(newdir1,curindexpc,curindexoldpc):\n    curanddevice=checkadbdevices()\n    #nulldevice="error: device \'(null)\' not found"\n    deviceconnected="device"\n    if deviceconnected in curanddevice:\n        copydir(fnnotesdirpc+os.path.sep+newdir1,fnnotesdirand)\n        appendnewnote(newdir1,curindexpc,curindexoldpc)\n    return True\ndef runpdftonote(convpdfdirpc,pdfdir,pdfname,pagestart,pageend,ocvtype,continuenote,testing,multiplepage):\n    print("startpdftonote")\n    #column=1\n    column=""\n    pageend=pageend+1\n    if noconversion:\n        print("noconv")\n        countpage=0\n        #b=objno2\n        delfile(convpdfdirpc)\n        newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n        for i in range(pagestart,pageend) :\n            print("Page"+str(i))\n            convpname,imgname=convertpdf2jpg2(pdfdir,pdfname,quality,i,convpdfdirpc,"")\n            page=re.sub(r"(convp|.jpg)","",imgname)\n            page=re.sub(r"(conv)","wledpos",imgname)\n            wledposdir=re.sub(convpdfdirpcname,"",page)\n            rectcoordlist=[(0,0,0,0,convpname+".jpg")]\n            objno2=convertjpg2note(convpdfdirpc,column,newdir1,objno2,wledposdir,rectcoordlist)\n            """\n            if a==10 or i==(pageend-1):\n                #convertjpg2note(convpdfdirpc,column,newdir1,objno2,wledposdir)\n                objno2=convertjpg2note(convpdfdirpc,column,newdir1,objno2,wledposdir,rectcoordlist)\n                a=0\n                column+=1\n            """\n            print(imgname)\n            countpage+=1\n    if not noconversion:\n        countpage=0\n        delfile(convpdfdirpc)\n        newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n        for i in range(pagestart,pageend) :\n            if i==pagestart:\n                column="exactcopy1"\n            if i>pagestart:\n                with open(curnotefpc, \'rb\') as f:\n                    content = f.read()\n                    cihx=str(binascii.hexlify(content).decode(\'utf-8\'))\n                    regexc1=re.compile(patternpic)\n                    print("findpatternpic1")\n                    if regexc1.search(cihx):\n                        print("findpatternpic2")\n                        mox= re.search(patternpicx,cihx)\n                        prevxcoordinate=mox.group(5)\n                        prevycoordinate=mox.group(7)\n                        prevdefyscale=mox.group(11)\n                        prevendyscale=mox.group(13)\n                        column="exactcopyrest;;"+prevycoordinate\n                    print(str(column))\n                #time.sleep(3600)\n                pass\n            delfile(convpdfdirpc)\n            if multiplepage:\n                if countpage>=multiplepage:\n                    countpage=0\n                    newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n                if multiplepage=="all":\n                    pass\n            if not multiplepage and i>pagestart:\n                #newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n                pass\n            #CN=checknotz(curnotelocpc)\n            #newdir1=CN[0]\n            #objno2=CN[1]\n            \n            a=1000\n            ##i-=1\n            convpname,imgname=convertpdf2jpg2(pdfdir,pdfname,quality,i,convpdfdirpc,"")\n            #imgname=re.sub(r"(.pdf|.jpg|.png|.bmp.svg)","",imgname)\n            #imgname=re.sub(convpdfdirpc,"",imgname)\n            page=re.sub(r"(convp|.jpg)","",imgname)\n            page=re.sub(r"(conv)","wledpos",imgname)\n            wledposdir=re.sub(convpdfdirpcname,"",page)\n            print(wledposdir)\n            appendtext(wledposdir,"","w+")\n            rectcoordlist=[]\n            print(str(i)+" "+convpname,imgname)\n            if testing:\n                pdfconvimg=convpdfdirpc+os.path.sep+"contouredc"+convpname+".jpg"\n                pdfdir0img=dir0+os.path.sep+"contouredc"+convpname+".jpg"\n                #rectcoordlist=converttext(convpdfdirpc,convpname+".jpg","contouredc"+convpname+".jpg",1000,1,"neutral",testing,wledposdir,rectcoordlist)\n                rectcoordlist=everyletter(convpdfdirpc,convpname+".jpg","contouredc"+convpname+".jpg",1000,ocvtype,withcolour,testing,wledposdir,rectcoordlist)\n                a-=1\n                column+=1\n            if not testing:\n                straight=True\n                if not straight:\n                    pdfconvimg=convpdfdirpc+os.path.sep+"contouredc"+convpname+".jpg"\n                    pdfdir0img=dir0+os.path.sep+"contouredc"+convpname+".jpg"\n                    #convertcolour(convpdfdirpc,convpname+".jpg","contouredc"+convpname+".jpg","green","down")\n                    rectcoordlist=convertcolour(convpdfdirpc,convpname+".jpg","contouredc"+convpname+".jpg","green","",wledposdir,rectcoordlist)\n                    subprocess.call("mv "+pdfconvimg+" "+pdfdir0img,shell=True)\n                    objno2=convertjpg2note(convpdfdirpc,2,newdir1,1,wledposdir)\n\n                    shutil.rmtree(convpdfdirpc)\n                    checkdir(convpdfdirpc,"")\n                    subprocess.call("mv "+pdfdir0img+" "+pdfconvimg,shell=True)\n                    rectcoordlist=convertcolour(convpdfdirpc,"contouredc"+convpname+".jpg","contouredc"+convpname+".jpg","blue","",wledposdir,rectcoordlist)\n                    subprocess.call("mv "+pdfconvimg+" "+pdfdir0img,shell=True)\n                    objno2=convertjpg2note(convpdfdirpc,1,newdir1,objno2,wledposdir)\n\n                    shutil.rmtree(convpdfdirpc)\n                    checkdir(convpdfdirpc,"")\n                    subprocess.call("mv "+pdfdir0img+" "+pdfconvimg,shell=True)\n                    rectcoordlist=converttext(convpdfdirpc,"contouredc"+convpname+".jpg","contouredc"+convpname+".jpg",1000,ocvtype,"neutral","",wledposdir,rectcoordlist)\n                    subprocess.call("mv "+pdfconvimg+" "+pdfdir0img,shell=True)\n                    objno2=convertjpg2note(convpdfdirpc,2,newdir1,objno2,wledposdir)\n\n                if straight:\n                    #shutil.rmtree(convpdfdirpc)\n                    #checkdir(convpdfdirpc,"")\n                    #subprocess.call("mv "+pdfdir0img+" "+pdfconvimg,shell=True)\n                    ##rectcoordlist=converttext(convpdfdirpc,convpname+".jpg","contouredc"+convpname+".jpg",1000,1,"neutral","",wledposdir,rectcoordlist)\n                    rectcoordlist=everyletter(convpdfdirpc,convpname+".jpg","contouredc"+convpname+".jpg",1000,ocvtype,withcolour,testing,wledposdir,rectcoordlist)\n                    #subprocess.call("mv "+pdfconvimg+" "+pdfdir0img,shell=True)\n                    objno2=convertjpg2note(convpdfdirpc,column,newdir1,objno2,wledposdir,rectcoordlist)\n\n                ###subprocess.call("cp "+convpdfdirpc+os.path.sep+convpname+".jpg "+pdfdir+os.path.sep+"attach/00.jpg",shell=True)\n                ###subprocess.call("cp "+convpdfdirpc+os.path.sep+convpname+".jpg "+pdfdir+os.path.sep+"attach",shell=True)\n                a-=1\n            countpage+=1\n\n        print("noconv")\n        countpage=0\n        #b=objno2\n        #delfile(convpdfdirpc)\n        #newdir1,objno2=newnotz(fnnotesdirpc,fnnotesdirpc)\n        for i in range(pagestart,pageend) :\n            print("Page"+str(i))\n            #delfile(convpdfdirpc)\n            #convpdfdirpc\n            global curattachdirpc\n            convpname,imgname=convertpdf2jpg2(pdfdir,pdfname,quality,i,curattachdirpc,"")\n            page=re.sub(r"(convp|.jpg)","",imgname)\n            page=re.sub(r"(conv)","wledpos",imgname)\n            wledposdir=re.sub(convpdfdirpcname,"",page)\n\n            rectcoordlist=[(0,0,0,0,convpname+".jpg")]\n            #rectcoordlist=[(0,0,0,0,slideimgname)]\n            if i==pagestart:\n                column="slide1"\n            elif i>pagestart:\n                column="slidenextline"\n            \n            objno2=convertjpg2note(curattachdirpc,column,newdir1,objno2,wledposdir,rectcoordlist)\n            """\n            if a==10 or i==(pageend-1):\n                #convertjpg2note(convpdfdirpc,column,newdir1,objno2,wledposdir)\n                objno2=convertjpg2note(convpdfdirpc,column,newdir1,objno2,wledposdir,rectcoordlist)\n                a=0\n                column+=1\n            """\n            print(imgname)\n            countpage+=1\n    if args.pdfmdir :\n        relevant_path=args.pdfmdir\n        included_extensions = [\'pdf\']\n        pdf_names = [fn for fn in os.listdir(relevant_path)\n                      if any(fn.endswith(ext) for ext in included_extensions)]\n        print(len(pdf_names))\n        for i in range(0,len(pdf_names)):\n            print(pdf_names[i])\n            subprocess.call("python3 "+pdftonotedir+" -pdir \\""+relevant_path+"\\" -p \\""+pdf_names[i]+"\\" -d 100 -t 1 -nc 1" ,shell=True)\n    return rectcoordlist,wledposdir\n\ndef runshowpdf(convpdfdirpc,pdfdir,pdfname,pagestart,pageend,ocvtype,continuenote):\n    import matplotlib.pyplot as plt\n    import matplotlib.image as mpimg\n    convpdfdirpc1=convpdfdirpc+os.path.sep+pdfname\n    if not os.path.exists(convpdfdirpc1):\n        os.makedirs(convpdfdirpc1)\n    imgname=convertpdf2jpg2(pdfdir,pdfname,quality,pagestart,convpdfdirpc1)\n    imgdir=convpdfdirpc+os.path.sep+pdfname+os.path.sep+imgname+".jpg"\n    print(imgdir)\n    img=mpimg.imread(imgdir)\n    imgplot=plt.imshow(img)\n    #countarea\n    plt.show()\n    image = PIL.Image.open(open(imgdir, \'rb\'))\n    #image.show()\n    return True\n\n#https://stackoverflow.com/questions/17466561/best-way-to-structure-a-tkinter-application\n#import tkinter as tk\nclass MainApplication(tk.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        tk.Frame.__init__(self, parent, *args, **kwargs)\n        self.parent = parent\n\n    if __name__ == "__main__":\n        #rootimgv = tk.Tk()\n        #aMainApplication(root).pack(side="top", fill="both", expand=True)\n        #rootimgv.mainloop()\n        pass\ndef prevpage(pdfdir,page):\n    page+=1\n    showpdf()\n    return True\ndef nextpage(pdfdir,page):\n    page+=1\n    showpdf()\n    return True\ndef detecttouch():\n    return True\ndef progresswhitelist():\n    return True\ndef whitelistarea(xpos,ypos,wimg,himg):\n    return True\ndef progresspage():\n    return True\n\ndef convertpdf2jpg(pdfdir,pdfname,quality,page,convpdfdirpc):\n    ##for i in range(int(pagestart),int(pageend)):\n    #ppmcommand2="convert -verbose -density "+str(quality)+" -trim "+pdfdir+os.path.sep+pdfname+"["+str(page)+"] -quality 100 -flatten -sharpen 0x1.0 "+convpdfdirpc+os.path.sep+convpname\n    pdfpage=subprocess.getoutput("pdfinfo \\""+pdfdir+os.path.sep+pdfname+"\\" | grep Pages: | awk \'{print $2}\'")\n    pagez=str(page).zfill(4)\n    convpname="conv"+pagez\n    ppmcommand="pdftoppm \\""+pdfdir+os.path.sep+pdfname+"\\" \\""+convpdfdirpc+os.path.sep+convpname+"\\" -jpeg -f "+str(page)+" -singlefile"\n    #ppmcommand="pdftoppm \\""+pdfdir+os.path.sep+pdfname+"\\" \\""+convpdfdirpc+os.path.sep+convpname+"\\" -png -f "+str(page)+" -singlefile"\n    print(ppmcommand)\n    print(convpname)\n    subprocess.call(ppmcommand,shell=True)\n    imgdir=convpdfdirpc+os.path.sep+convpname+".jpg"\n    while True:\n        if os.path.exists(imgdir):\n            print(imgdir)\n            break\n    return convpname\ndef getpdfinfo(pdfdir,pdfname,ver):\n        if sys.platform in [\'linux\', \'linux2\']:\n                pdfinfocommand="pdfinfo"\n                pdftoppmcommand="pdftoppm"\n                pdfpage=subprocess.getoutput(pdfinfocommand+" \\""+pdfdir+os.path.sep+pdfname+"\\" | grep Pages: | awk \'{print $2}\'")\n                pdfpage=int(pdfpage)\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n                userid=subprocess.getoutput("echo %USERNAME%")\n                userhomedir=subprocess.getoutput("echo %USERPROFILE%")\n                popplerver="poppler-0.51"\n                popplerdir="C:\\\\Users\\\\"+userid+"\\\\Downloads\\\\"+popplerver+"_x86\\\\"+popplerver+"\\\\bin"\n                pdfinfocommand=popplerdir+"\\\\pdfinfo.exe"\n                pdftoppmcommand=popplerdir+"\\\\pdftoppm.exe"\n                if ver=="wsl":\n                        pdfdir0=conwindirtovwsldir(pdfdir)\n                        convpdfdirpc0=conwindirtovwsldir(convpdfdirpc)\n                        print("convertpdf2jpginwsl="+pdfdir)\n                        ##pdfpage=subprocess.getoutput("wsl pdfinfo \\""+pdfdir0+"/"+pdfname+"\\" | grep Pages: | awk \'{print $2}\'")\n                        #ppmcommand="wsl pdftoppm \\""+pdfdir0+"/"+pdfname+"\\" \\""+convpdfdirpc0+"/"+convpname+"\\" -jpeg -f "+str(page)+" -singlefile"\n                        imgdir=convpdfdirpc+os.path.sep+convpname+".jpg"\n                pdfpage0=subprocess.getoutput(pdfinfocommand+" \\""+pdfdir+os.path.sep+pdfname+"\\"")\n                #print("pp0="+pdfpage0)\n                #https://stackoverflow.com/questions/15422144/how-to-read-a-long-multiline-string-line-by-line-in-python\n                for line in pdfpage0.splitlines():\n                        #print(line)\n                        #lineResult = libLAPFF.parseLine(line)\n                        lineResult=line\n                        pdfpage1=lineResult\n                        #print("pp1="+pdfpage1)\n                        if re.search(r"Pages:",str(line)):\n                                pdfpage1=line\n                                #print("pp1="+pdfpage1)\n                                pdfpage2 = re.sub(r"(Pages:)([ ])*", \'\', pdfpage1)\n                                #print("pp2="+pdfpage2)\n                                pdfpage=int(pdfpage2)\n        print("totalp="+str(pdfpage))\n        return pdftoppmcommand,pdfpage\ndef convertpdf2jpg2(pdfdir,pdfname,quality,page,convpdfdirpc,ver):\n        ##for i in range(int(pagestart),int(pageend)):\n        #ppmcommand2="convert -verbose -density "+str(quality)+" -trim "+pdfdir+os.path.sep+pdfname+"["+str(page)+"] -quality 100 -flatten -sharpen 0x1.0 "+convpdfdirpc+os.path.sep+convpname\n        ossep=os.path.sep\n        if not os.path.exists(convpdfdirpc):\n            os.makedirs(convpdfdirpc)\n        pdftoppmcommand,pdfpage=getpdfinfo(pdfdir,pdfname,"")\n        if page<0:\n            page=1\n        if page<=pdfpage:\n            pagez=str(page).zfill(4)\n        if page>pdfpage:\n            pagez=str(pdfpage).zfill(4)\n        #convpname="conv"+pagez\n        convpname=namethis()\n        convpname=re.sub(".jpg","",convpname)\n        img0=convpdfdirpc+os.path.sep+convpname\n        imgdir=img0+".jpg"\n        #imgdir=img0\n        if not os.path.exists(imgdir):\n            ppmcommand=pdftoppmcommand+" \\""+pdfdir+os.path.sep+pdfname+"\\" \\""+img0+"\\" -jpeg -f "+str(page)+" -singlefile"\n            #ppmcommand=pdftoppmcommand+" \\""+pdfdir+os.path.sep+pdfname+"\\" \\""+img0+"\\" -png -f "+str(page)+" -singlefile"\n            print(ppmcommand)\n            subprocess.call(ppmcommand,shell=True)\n            #time.sleep(5)\n        while True:\n            if os.path.exists(imgdir):\n                print(imgdir)\n                break\n        return convpname,imgdir\n\ndef conwindirtovwsldir(windir):\n    checkdir="C:\\\\Windows"\n    wsldir=""\n    #if os.path.exists(checkdir):\n        #userid=subprocess.getoutput("awk -F: \'!/root/ && /(\\/bin\\/bash)/ {print $1}\' /etc/passwd")\n        #userid=subprocess.getoutput("echo \\"%USERNAME%\\"")\n    print("wd="+windir)\n    wsldir=re.sub(r"C:","/mnt/c",windir)\n    wsldir=re.sub(r"\\\\","/",wsldir)\n    print("ad="+wsldir)\n    return wsldir\n\ndef convertjpg2note(folderlocation,column,newdir1,objno2,wledposdir,rectcoordlist):\n    global curattachdirpc\n    print("runengine")\n    objno2re=objno2\n    folderlocation=curattachdirpc\n    allfnpicdir=os.listdir(folderlocation)\n    copytowin=True\n    copytoand=False\n    wsl=False\n    if copytowin and not copytoand and not wsl:\n        copycommand="copy"\n        copytohere=curattachdirpc\n        pass\n    if copytoand and not copytowin:\n        copycommand="cp"\n        copytohere=fnnotesdirandint\n        pass\n    #for i in range(0,len(allfnpicdir)):\n    #if not column:\n    #    column=1\n    if fnnotesdirandint:\n        attachfnanddir=fnnotesdirandint+"/"+newdir1+".notz"+"/"+"attach"\n        print(attachfnanddir)\n    """\n    if len(rectcoordlist)==0:\n        if objno2<=2:\n            w, h=imgsize(picdirnew)\n            appendnewpic(w,h,picname,newdir1,objno2re,"nearlatest;;firstcolumn;;firstline")\n        else:\n            appendnewpic(w,h,picname,newdir1,objno2re,"nearlatest;;firstcolumn;;nextline")\n        return objno2re\n    """\n    for i in range(0,len(rectcoordlist)):\n        ##Time=strftime("%Y%m%d%H%M%S")\n        ##objno2rez=str(objno2re).zfill(6)\n        ##picname=Time+\'abcdefghi\'+objno2rez+\'.jpg\'\n        #objno2rez=str(objno2re).zfill(2)\n        #lpicname=Time+\'abcdefghijklm\'+objno2rez+\'.jpg\'\n        #print(picname)\n        if rectcoordlist[i][4] in allfnpicdir:\n            allfnpicdir.remove(rectcoordlist[i][4])\n            pass\n        picdir=folderlocation+ os.path.sep +  rectcoordlist[i][4]\n        if objno2re>=0 and os.path.getsize(picdir)>0:\n            ###print(rectcoordlist[i][4])                    \n            ##picdir=folderlocation+ os.path.sep +  allfnpicdir[i]\n            picname=rectcoordlist[i][4]\n            picdir=folderlocation+ os.path.sep +  rectcoordlist[i][4]\n            picdirnew=folderlocation + os.path.sep + picname\n            #if wledposdir:\n                #textori=open(wledposdir)\n                #with open(wledposdir,"r") as f:\n                #    content=f.read()\n                #    textedit=re.sub(allfnpicdir[i],picname,content)\n                #    appendtext(wledposdir,textedit,"w+")\n            print(picdir)\n            if curanddevice:\n                subprocess.call(copycommand+" \\""+picdir+"\\" \\""+picdirnew+"\\"", shell=True)\n                os.remove(picdir)\n                subprocess.call(copycommand+" \\""+picdirnew+"\\" \\""+curattachdirpc+"\\"", shell=True)\n            w, h=imgsize(picdirnew)\n            #appendnewpic(w,h,picname,newdir1,objno2re,"nearlatest")\n            columntype="exactcopy"\n            if i==0 and "nearlatest" in columntype and not "slide" in str(type(column)):\n                columntype="nearlatest;;firstcolumn;;nextline"\n            elif i>0 and "nearlatest" in columntype and not "slide" in str(type(column)):\n                prevx=int(rectcoordlist[i-1][0])\n                prevy=int(rectcoordlist[i-1][1])\n                curx=int(rectcoordlist[i][0])\n                cury=int(rectcoordlist[i][1])\n                if w>h:\n                    prevcorrection=100\n                elif h>w:\n                    prevcorrection=30\n                else:\n                    prevcorrection=0\n                \n                if w>1000 or h>1000:\n                    columntype="nearlatest;;nextcolumn;;sameline"\n                    appendtext(wledposdir,"firstline","a")\n                else:\n                    if cury in range(prevy-prevcorrection,prevy+prevcorrection) and curx>prevx:\n                        columntype="nearlatest;;nextcolumn;;sameline"\n                        appendtext(wledposdir,"sameline","a")\n                    elif not cury in range(prevy-prevcorrection,prevy+prevcorrection):\n                        columntype="nearlatest;;firstcolumn;;nextline"\n                        appendtext(wledposdir,"nextline","a")\n                    else:\n                        columntype="nearlatest;;firstcolumn;;nextline"\n                        appendtext(wledposdir,"nextline","a")\n            \n            if "str" in str(type(column)):\n                if "slide1" in column:\n                    columntype="nearlatest;;slide1"\n                elif "slidenextline" in column:\n                    columntype="nearlatest;;slidenextline"\n                if "exactcopy" in column:\n                    if objno2<=2:\n                        columntype="exactcopy1"\n                    else:\n                        columntype=column\n            if columntype:\n                appendnewpic(w,h,picname,newdir1,objno2re,columntype,rectcoordlist[i])  \n                \n            if curanddevice:\n                runadbcommand("adb push -p \\""+picdirnew+"\\" \\""+attachfnanddir+"\\"")\n            objno2re+=1\n        if curanddevice:\n            runadbcommand("adb push \\""+curnotefpc+"\\" \\""+curnotzand+"\\"")\n    print(str(len(allfnpicdir)))\n    print(allfnpicdir)\n    """\n    for i in range(0,len(allfnpicdir)):\n        Time=strftime("%Y%m%d%H%M%S")\n        objno2rez=str(objno2re).zfill(6)\n        picname=Time+\'abcdefghi\'+objno2rez+\'.jpg\'\n        #objno2rez=str(objno2re).zfill(2)\n        #picname=Time+\'abcdefghijklm\'+objno2rez+\'.jpg\'\n        print(picname)\n        picdir=folderlocation+ os.path.sep +  allfnpicdir[i]\n        picdirnew=folderlocation + os.path.sep + picname\n        subprocess.call(copycommand+" \\""+picdir+"\\" \\""+picdirnew+"\\"", shell=True)\n        os.remove(picdir)\n        subprocess.call(copycommand+" \\""+picdirnew+"\\" \\""+curattachdirpc+"\\"", shell=True)\n        w, h=imgsize(picdirnew)\n        #appendnewpic(w,h,picname,newdir1,objno2re,"nearlatest;;firstcolumn;;firstline")\n        appendnewpic(w,h,picname,newdir1,objno2re,"nearlatest;;nextcolumn;;sameline")\n        if attachfnanddir:\n            runadbcommand("adb push -p \\""+picdirnew+"\\" \\""+attachfnanddir+"\\"")\n        objno2re+=1\n    """\n    return objno2re\n\ndef restartfn():\n        if sys.platform in [\'Windows\', \'win32\', \'cygwin\']:\n            fiinotew10pcdir=userhomedir+"\\\\Documents\\\\Docs\\\\Automate\\\\FiiNoteWINE\\\\FiiNote.exe"\n            subprocess.call("taskkill /F /IM FiiNote.exe /T",shell=True)\n            subprocess.call("start /MAX \\"fiinote\\" \\""+fiinotew10pcdir+"\\"",shell=True)\ndef setvarconvpdf():\n    global ocvtype,noconversion\n    testing=False\n    continuenote=False\n    showpdf=False\n    if args.altcpdir:\n        global convpdfdirpcname,convpdfdirpc,curnotelocpc\n        convpdfdirpcname=args.altcpdir\n        convpdfdirpc=dir0+os.path.sep+convpdfdirpcname\n        curnotelocpc=fnnotesdirpc+os.path.sep+convpdfdirpcname+".txt"\n        \n    if args.testing:\n        testing=True\n    if args.continuenote :\n        continuenote=True\n    if args.pdfdir:\n        pdfdir=args.pdfdir\n    else:\n        pdfdir=dir0\n        #print("Slide=100")\n        #print("Tbook=300")\n        #print("Work=300/Adobe")\n        \n    if args.multiplepage:\n        multiplepage=int(args.multiplepage)\n    else:\n        multiplepage=""\n        \n    if args.pdfname:\n        checkdir(convpdfdirpc,"")\n        #pdfname=args.pdfname\n        pfulldir=args.pdfname.split(os.path.sep)\n        if len(pfulldir)==1:\n            pdfdir=dir0\n            pdfname=pfulldir[0]\n        else:\n            pdfdir=os.path.sep.join(pfulldir[:-1:])\n            pdfname=pfulldir[-1]\n        if os.path.exists(convpdfdirpc):\n            shutil.rmtree(convpdfdirpc)\n        \n        if args.density :\n            quality=int(args.density)\n        if args.pagestart :\n            pagestart=int(args.pagestart)\n        else:\n            pagestart=1\n        if args.pageend :\n            pageend=int(args.pageend)\n            pageend=pageend\n        else:\n            pdftoppmcommand,pdfpage=getpdfinfo(pdfdir,pdfname,"")\n            #pdfpage=subprocess.getoutput("pdfinfo \\""+pdfdir+os.path.sep+pdfname+"\\" | grep Pages: | awk \'{print $2}\'")\n            pageend=int(pdfpage)\n        if args.singlepage:\n            pagestart=int(args.singlepage)\n            pageend=int(args.singlepage)\n        #if args.type.isdigit():\n        #    ocvtype=int(args.type)\n        ocvtype=str(args.type)\n            \n        if args.noconversion=="1":\n            noconversion=True\n        print("PDFDir="+pdfdir+os.path.sep+pdfname+" Page="+str(pagestart)+" to "+str(pageend))\n        print("ocvt"+str(ocvtype))\n        if args.showpdf:\n            runshowpdf(convpdfdirpc,pdfdir,pdfname,pagestart,pageend,ocvtype,continuenote)\n        if not args.showpdf:\n            if not testing:\n                testing=""\n            if testing:\n                continuenote=False\n            rectcoordlist,wledposdir=runpdftonote(convpdfdirpc,pdfdir,pdfname,pagestart,pageend,ocvtype,continuenote,testing,multiplepage)\n        if rectcoordlist and os.path.exists(wledposdir):\n            #print(rectcoordlist)\n            for f in rectcoordlist:\n                appendthis=""\n                for i in range(0,len(f)):\n                    appendthis=appendthis+str(f[i])+" "\n                appendtext(wledposdir,str(appendthis),"a")\n        os.remove(curnotelocpc)\n        #restartfn()\n    return True\nargs = parse_args()\nsetvarconvpdf()\n#convertcolour(convpdfdirpc,".jpg","green")\n#convertcolour("/home/user/Pictures","Screenshot from 2018-07-05 20-04-46.png","green")\n'