b'blob 29506\x00/**\n *  This module implements a dynamic tree that can be lazily loaded using Ajax\n */\nvar dynamictree = {};\n\n/**\n *  Images used in the tree\n */\ndynamictree.Images =\n{\n  EMPTY: getCdnURL( \'/images/ci/icons/nlstree/blank.gif\' ),\n  NONE: getCdnURL( \'/images/ci/icons/nlstree/lineints.gif\' ),\n  NONE_LAST: getCdnURL( \'/images/ci/icons/nlstree/lineang.gif\' ),\n  MINUS: getCdnURL( \'/images/ci/icons/nlstree/minusb.gif\' ),\n  MINUS_LAST: getCdnURL( \'/images/ci/icons/nlstree/minusnb.gif\' ),\n  PLUS: getCdnURL( \'/images/ci/icons/nlstree/plusb.gif\' ),\n  PLUS_LAST: getCdnURL( \'/images/ci/icons/nlstree/plusnb.gif\' )\n};\n\n/**\n * Types of tree nodes\n *\n * JSON format of tree nodes:\n *\n * var myNode = {\n *  type: "ROOT"|"NODE"|"HEADER"|"SEPARATOR"|"HTML",\n *  id: "an id to uniquely identify this node, passed to dynamic loading code when the node is expanded",\n *  expanded: true/false (whether this node is initially expanded),\n *  icon: "URL to an icon to display for this node",\n *  contents: "HTML for the contents of the node (usually a link)",\n *  hasChildren: "Whether this node has/can have children",\n *  children: [array of nodes]\n * }\n */\ndynamictree.NodeType =\n{\n  ROOT: \'ROOT\', //the root of a tree, is invisible\n  NODE: \'NODE\', //a node in a tree\n  HEADER: \'HEADER\', //a header in a tree\n  SEPARATOR: \'SEPARATOR\', //a separator in a tree\n  HTML: \'HTML\' // HTML to be displayed unformatted within tree\n};\n\ndynamictree.StoreScope =\n{\n  SESSION: \'Session\',\n  PERMANENT: \'Permanent\'\n};\n\ndynamictree.Tree = Class.create();\ndynamictree.Tree.prototype =\n{\n  /**\n     * Creates a new tree.\n     *\n     * @param container\n     *            the page element that will contain the tree\n     * @param initialTrees\n     *            a list of ROOT type nodes to initially populate the tree with\n     * @param generatorUrl\n     *            URL to use to dynamically load tree nodes\n     * @param contextParameters\n     *            additional URL parameters to pass to the generator.\n     * @param retainState\n     *            whether the state of node expand/collapse should be retained.\n     *            Default is false.\n     * @param expandAllByDefault\n     *            whether the full contents of the tree should be\n     *            rendered/expanded on initial display. Default is false.\n     * @param storeScope\n     *            save ExpandedItemStore in different scope,\n     *            StoreScope[\'SESSION\']: in http session\n     *            scope;StoreScope[\'PERMANENT\']: in database.\n     *            Default is StoreScope[\'SESSION\']\n     */\n  initialize: function( container, initialTrees, generatorUrl, contextParameters, retainState, expandAllByDefault, storeScope, isMenuExpandable )\n  {\n    this.container = $(container);\n    this.navPaletteContainer = $$(\'navPaletteContent\');\n    this.isDynamic = generatorUrl ? true : false;\n    this.generatorUrl = generatorUrl;\n    this.onPreToggleNodeCallback = null;\n\n    this.retainState = false;\n    if ( retainState )\n    {\n      this.retainState = retainState;\n    }\n\n    this.storeScope = dynamictree.StoreScope.SESSION;\n    if ( storeScope )\n    {\n      this.storeScope = storeScope;\n    }\n\n    this.expandAllByDefault = false;\n    if ( expandAllByDefault )\n    {\n      this.expandAllByDefault = expandAllByDefault;\n    }\n\n    if ( contextParameters )\n    {\n      this.contextParameters = contextParameters.toQueryParams();\n    }\n    else\n    {\n      this.contextParameters = {};\n    }\n\n    this.expandStr = page.bundle.getString("dynamictree.expand");\n    this.collapseStr = page.bundle.getString("dynamictree.collapse");\n\n    if ( initialTrees )\n    {\n      this.initTree( initialTrees );\n\n      // now that the tree is rendered expand it if we are supposed to\n      if ( this.expandAllByDefault )\n      {\n        this.expandAll();\n      }\n    }\n    else if ( this.isDynamic )\n    {\n      // dynamically load the initial tree if none is specified, load either the\n      // full tree or simply initialize depending on the expandByDefault value\n      if ( this.expandAllByDefault )\n      {\n        this.expandAll();\n      }\n      else\n      {\n        this.loadInitialTree();\n      }\n    }\n    if (isMenuExpandable) {\n            this.container.addClassName("expTreeContainer");\n            (function() { this.container.style.overflow = \'hidden\'; }.bind(this).defer());\n            Event.observe(this.container, "mouseover", this.menuExpand\n                    .bindAsEventListener(this));\n            Event.observe(this.container, "mouseout", this.menuExpand\n                    .bindAsEventListener(this));\n        }\n  },\n\n  getExpandFolderAlt: function( toggleNode )\n  {\n    if ( toggleNode.folderName )\n    {\n      return page.bundle.getString("dynamictree.expand.folder", toggleNode.folderName);\n    }\n    else\n    {\n      return page.bundle.getString("dynamictree.expand");\n    }\n  },\n\n  getCollapseFolderAlt: function( toggleNode )\n  {\n    if ( toggleNode.folderName )\n    {\n      return page.bundle.getString("dynamictree.collapse.folder", toggleNode.folderName);\n    }\n    else\n    {\n      return page.bundle.getString("dynamictree.collapse");\n    }\n  },\n\n  /**\n   * Callback function to call prior to toggling the tree node.  Callback\n   * can cancel the toggle by returning false.\n   */\n  setOnPreToggleNodeCallback: function( functionCallback )\n  {\n    this.onPreToggleNodeCallback = functionCallback;\n  },\n\n  /**\n   *  Dynamically load the initial tree (since one wasn\'t specified)\n   */\n  loadInitialTree: function()\n  {\n    var params = Object.extend({ initTree: "true",storeScope: this.storeScope }, this.contextParameters);\n    new Ajax.Request( this.generatorUrl,\n    {\n      method: \'post\',\n      parameters: params,\n      requestHeaders: { cookie: document.cookie },\n      onSuccess: this.afterInitLoad.bind( this )\n    });\n  },\n\n  /**\n   * Callback invoked after the whole-tree-load Ajax call returns.\n   */\n  afterInitLoad: function( req )\n  {\n    try\n    {\n      var result = req.responseText.evalJSON( true );\n      if ( result.success != \'true\' )\n      {\n        new page.InlineConfirmation("error", result.errorMessage, false );\n      }\n      else\n      {\n        this.initTree( result.children );\n      }\n    }\n    catch ( e )\n    {\n      //Invalid response\n    }\n  },\n\n  /**\n   *  Draw the whole tree using the specified array of root nodes.\n   */\n  initTree: function( treesJson )\n  {\n    var treeHtml = \'\';\n    for ( var i = 0; i < treesJson.length; i++ )\n    {\n      treeHtml += this.getHtmlForNode( treesJson[i], i == (treesJson.length - 1) );\n    }\n\n    this.container.innerHTML = treeHtml;\n    this.container.getElementsBySelector("img.treeNodeToggler").each( function( toggler )\n    {\n      var linkArea = this.getLinkAndArea(toggler);\n      Event.observe( linkArea.toggleLink, "click", this.onNodeToggleClick.bindAsEventListener( this, linkArea.toggleLink, toggler, linkArea.toggleArea ) );\n    }.bind(this));\n\n    $A(this.container.getElementsByTagName("h4")).each( function( toggler )\n    {\n      var toggleLink = toggler.getElementsByTagName(\'a\')[0];\n      var toggleArea = toggler.nextSibling;\n      Event.observe( toggleLink, "click", this.onNodeToggleClick.bindAsEventListener( this, toggleLink, toggler, toggleArea ) );\n    }.bind(this));\n  },\n\n  upToTagName: function(element, tagName)\n  {\n    while (element)\n    {\n      element = element.parentNode;\n      if (tagName == element.tagName.toLowerCase()) {\n        break;\n      }\n    }\n    return element;\n  },\n\n  getLinkAndArea: function(toggler)\n  {\n    // aka link = toggler.up(\'a\')\n    // aka area = toggler.up(\'li\').down(\'ul);\n    var toggleLink = undefined;\n    var toggleArea = undefined;\n    var element = toggler;\n    while (element && (!toggleLink || !toggleArea))\n    {\n      element = element.parentNode;\n      var tagName = element.tagName.toLowerCase();\n      if (tagName == \'a\') {\n        toggleLink = element;\n      } else if (tagName == \'li\') {\n        toggleArea = element.getElementsByTagName(\'ul\')[0];\n        // try to get the folder name from the span tag first.\n        // this is used in the Performance Dashboard - Adaptive Release\n        // popup window.\n        var fname = element.getElementsByTagName(\'span\')[0];\n        if ( fname )\n        {\n          toggler.folderName = fname.title.strip();\n        }\n        // if you can not get the folder name from the span tag,\n        // it will be in the second anchor tag.  this is used\n        // for the course menu on the left.\n        else\n        {\n          fname = element.getElementsByTagName(\'a\')[1];  // 2nd anchor is folder name\n          toggler.folderName = fname.innerHTML.strip();\n        }\n        if ( toggler.alt == this.expandStr )\n        {\n          toggler.alt = this.getExpandFolderAlt( toggler );\n        }\n        else\n        {\n          toggler.alt = this.getCollapseFolderAlt( toggler );\n        }\n        toggleLink.title = toggler.alt;\n      }\n    }\n    return {toggleLink: toggleLink, toggleArea: toggleArea};\n  },\n\n  /**\n   * Collapse all the nodes in the tree\n   */\n  collapseAll: function( )\n  {\n    if ( this.retainState )\n    {\n      var params = Object.extend({ collapseAll: "true", saveState: "true", storeScope: this.storeScope }, this.contextParameters );\n      new Ajax.Request( this.generatorUrl,\n      {\n        method: \'post\',\n        parameters: params,\n        requestHeaders: { cookie: document.cookie },\n        onSuccess: this.collapseCallBack.bind( this )\n      });\n    }\n\n    this.container.getElementsBySelector("img.treeNodeToggler").each( function( toggler )\n    {\n      if ( toggler.src.indexOf( dynamictree.Images.NONE ) < 0 && toggler.src.indexOf( dynamictree.Images.NONE_LAST ) < 0 )\n      {\n        var linkArea = this.getLinkAndArea(toggler);\n        if ( toggler.src.indexOf( dynamictree.Images.MINUS ) >= 0 )\n        {\n          toggler.src = dynamictree.Images.PLUS;\n        } else if ( toggler.src.indexOf( dynamictree.Images.MINUS_LAST ) >= 0 )\n        {\n          toggler.src = dynamictree.Images.PLUS_LAST;\n        }\n        toggler.alt = this.getExpandFolderAlt( toggler );\n        linkArea.toggleLink.title = toggler.alt;\n        linkArea.toggleArea.style.display = \'none\';\n      }\n    }.bind(this));\n  },\n\n  /**\n   * Expand all the nodes in the tree.\n   */\n  expandAll: function( )\n  {\n    if ( this.isDynamic ) // If it\'s dynamic we load the entire tree from the server\n    {\n      var params = Object.extend({ expandAll: "true" }, this.contextParameters);\n      params = Object.extend({ storeScope: this.storeScope}, params);\n      new Ajax.Request( this.generatorUrl,\n      {\n        method: \'post\',\n        parameters: params,\n        requestHeaders: { cookie: document.cookie },\n        onSuccess: this.afterInitLoad.bind( this )\n      });\n    }\n    else\n    {\n      this.container.getElementsBySelector("img.treeNodeToggler").each( function( toggler )\n      {\n        var linkArea = this.getLinkAndArea(toggler);\n        var hasChildren = (linkArea.toggleArea.getElementsByTagName(\'li\').length !== 0);\n        if ( hasChildren )\n        {\n          if ( toggler.src.indexOf( dynamictree.Images.PLUS ) )\n          {\n            toggler.src = dynamictree.Images.MINUS;\n          } else if ( toggler.src.indexOf( dynamictree.Images.PLUS_LAST ) )\n          {\n            toggler.src = dynamictree.Images.MINUS_LAST;\n          }\n          toggler.alt = this.getCollapseFolderAlt( toggler );\n          linkArea.toggleLink.title = toggler.alt;\n          linkArea.toggleArea.style.display = \'\';\n        }\n        else\n        {\n          if ( toggler.src.indexOf( dynamictree.Images.PLUS ) )\n          {\n            toggler.src = dynamictree.Images.EMPTY;\n          } else if ( toggler.src.indexOf( dynamictree.Images.PLUS_LAST ) )\n          {\n            toggler.src = dynamictree.Images.EMPTY_LAST;\n          }\n          toggler.alt = \'\';\n          linkArea.toggleLink.title = \'\';\n        }\n      }.bind(this));\n    }\n  },\n\n  /**\n   *  Event handler for when a use clicks on the [+/-] toggle images\n   *  @param event the dom event\n   *  @param toggleLink the link used to toggle the node\n   *  @param toggleImage the expand/collapse image element for this node\n   *  @param toggleArea the html element containing the children of this node.\n   */\n  onNodeToggleClick: function( event, toggleLink, toggleImage, toggleArea )\n  {\n    if ( this.onPreToggleNodeCallback )\n    {\n      if ( this.onPreToggleNodeCallback( toggleLink ) === false )\n      {\n        if ( event )\n        {\n          Event.stop( event );\n        }\n        return false;\n      }\n    }\n\n    var id, params, firstParams, hasChildren;\n    if ( !toggleImage.src )\n    {\n      if ( toggleImage.className == "treeSubhead-collapsed" )\n      {\n        hasChildren = (toggleArea.getElementsByTagName(\'li\').length !== 0);\n        if ( !hasChildren && this.isDynamic )\n        {\n          id = this.upToTagName( toggleLink, \'h4\').id;\n          params = Object.extend({ itemId: id }, this.contextParameters);\n          params = Object.extend({ storeScope: this.storeScope}, params);\n          new Ajax.Request( this.generatorUrl,\n          {\n            method: \'post\',\n            parameters: params,\n            requestHeaders: { cookie: document.cookie },\n            onSuccess: this.afterNodeLoad.bind( this, toggleLink, toggleImage, toggleArea )\n          });\n        }\n        else if ( this.retainState )\n        {\n          id = this.upToTagName( toggleLink, \'h4\').id;\n          firstParams = Object.extend({ itemId: id }, this.contextParameters );\n          params = Object.extend({ collapse: "false" }, firstParams );\n          params = Object.extend({ saveState: "true" }, params);\n          params = Object.extend({ storeScope: this.storeScope}, params);\n          new Ajax.Request( this.generatorUrl,\n          {\n            method: \'post\',\n            parameters: params,\n            requestHeaders: { cookie: document.cookie },\n            onSuccess: this.collapseCallBack.bind( this  )\n          });\n        }\n        toggleImage.className = "";\n        toggleArea.style.display = \'\';\n      }\n      else\n      {\n        toggleImage.className = "treeSubhead-collapsed";\n        toggleArea.style.display = \'none\';\n        if ( this.retainState )\n        {\n          id = this.upToTagName( toggleLink, \'h4\').id;\n          firstParams = Object.extend({ itemId: id }, this.contextParameters );\n          params = Object.extend({ collapse: "true" }, firstParams );\n          params = Object.extend({ saveState: "true" }, params);\n          params = Object.extend({ storeScope: this.storeScope}, params);\n          new Ajax.Request( this.generatorUrl,\n          {\n            method: \'post\',\n            parameters: params,\n            requestHeaders: { cookie: document.cookie },\n            onSuccess: this.collapseCallBack.bind( this  )\n          });\n        }\n      }\n    }\n    else\n    {\n      if (  toggleImage.src.indexOf( dynamictree.Images.MINUS ) >= 0 || toggleImage.src.indexOf( dynamictree.Images.MINUS_LAST ) >= 0 )\n      {\n        this.collapseTreeNode( toggleLink, toggleImage, toggleArea);\n      }\n      else if ( toggleImage.src.indexOf( dynamictree.Images.PLUS ) >= 0 || toggleImage.src.indexOf( dynamictree.Images.PLUS_LAST ) >= 0 )\n      {\n        // this node has no children if it does not have a child "li" or if\n        // it does and the "li" has a special class indicating that it is empty\n        var node = toggleArea.getElementsByTagName("li");\n        if (node.length === 0)\n        {\n          node = null;\n        }\n        else\n        {\n          node = node[0];\n        }\n        hasChildren = node && ( !page.util.hasClassName( node, \'--empty--\' ) );\n\n        if ( !hasChildren && this.isDynamic )\n        {\n          id = this.upToTagName( toggleLink, \'li\').id;\n          params = Object.extend({ itemId: id }, this.contextParameters);\n          params = Object.extend({ storeScope: this.storeScope}, params);\n          new Ajax.Request( this.generatorUrl,\n          {\n            method: \'post\',\n            parameters: params,\n            requestHeaders: { cookie: document.cookie },\n            onSuccess: this.afterNodeLoad.bind( this, toggleLink, toggleImage, toggleArea )\n          });\n        }\n        else\n        {\n          if ( this.retainState )\n          {\n            id = this.upToTagName( toggleLink, \'li\').id;\n            firstParams = Object.extend({ itemId: id }, this.contextParameters );\n            params = Object.extend({ collapse: "false" }, firstParams );\n            params = Object.extend({ saveState: "true" }, params);\n            params = Object.extend({ storeScope: this.storeScope}, params);\n            new Ajax.Request( this.generatorUrl,\n            {\n              method: \'post\',\n              parameters: params,\n              requestHeaders: { cookie: document.cookie }\n            });\n          }\n          if ( toggleImage.src.indexOf( dynamictree.Images.PLUS ) >= 0 )\n          {\n            if ( !hasChildren )\n            {\n              toggleImage.src = dynamictree.Images.NONE;\n              toggleImage.alt = \'\';\n              toggleLink.title = \'\';\n            }\n            else\n            {\n              toggleImage.src = dynamictree.Images.MINUS;\n              toggleImage.alt = this.getCollapseFolderAlt( toggleImage );\n              toggleLink.title = toggleImage.alt;\n              toggleArea.style.display = \'\';\n            }\n          }\n          else\n          {\n            if ( !hasChildren )\n            {\n              toggleImage.src = dynamictree.Images.NONE_LAST;\n              toggleImage.alt = \'\';\n              toggleLink.title = \'\';\n            }\n            else\n            {\n              toggleImage.src = dynamictree.Images.MINUS_LAST;\n              toggleImage.alt = this.getCollapseFolderAlt( toggleImage );\n              toggleLink.title = toggleImage.alt;\n              toggleArea.style.display = \'\';\n            }\n          }\n        }\n      }\n    }\n\n    Event.stop( event );\n  },\n\n  collapseTreeNode: function( toggleLink, toggleImage, toggleArea )\n  {\n    toggleArea.style.display = \'none\';\n    if ( this.retainState )\n    {\n      var id = this.upToTagName( toggleLink, \'li\').id;\n      var firstParams = Object.extend({ itemId: id }, this.contextParameters );\n      var params = Object.extend({ collapse: "true" }, firstParams );\n      params = Object.extend({ saveState: "true" }, params);\n      params = Object.extend({ storeScope: this.storeScope}, params);\n      new Ajax.Request( this.generatorUrl,\n      {\n        method: \'post\',\n        parameters: params,\n        requestHeaders: { cookie: document.cookie },\n        onSuccess: this.collapseCallBack.bind( this  )\n      });\n    }\n    if ( toggleImage.src.indexOf( dynamictree.Images.MINUS ) >= 0 )\n    {\n      toggleImage.src = dynamictree.Images.PLUS;\n    }\n    else\n    {\n      toggleImage.src = dynamictree.Images.PLUS_LAST;\n    }\n    toggleImage.alt = this.getExpandFolderAlt( toggleImage );\n    toggleLink.title = toggleImage.alt;\n  },\n\n  /**\n    Callback for the Collapse Method:Not doing anything\n  **/\n  collapseCallBack: function( event)\n  {\n  },\n\n  /**\n   *  Callback invoked after a node is lazily loaded in (after the [+] is clicked)\n   *  @param toggleLink the link used to toggle the node\n   *  @param toggleImage the expand/collapse image element for this node\n   *  @param toggleArea the html element containing the children of this node.\n   *  @param req the XMLHttpRequest used to load the nodes\n   */\n  afterNodeLoad: function( toggleLink, toggleImage, toggleArea, req )\n  {\n    var result;\n    try\n    {\n      result = req.responseText.evalJSON( true );\n      if ( result.success != \'true\' )\n      {\n        new page.InlineConfirmation("error", result.errorMessage, false );\n      }\n      else\n      {\n        var children = result.children;\n        var hasChildren = (children && children.length > 0);\n        if ( hasChildren )\n        {\n          var childrenHtml = \'\';\n          for ( var i = 0; i < children.length; i++ )\n          {\n            childrenHtml += this.getHtmlForNode( children[i], i == (children.length - 1) );\n          }\n          toggleArea.innerHTML = childrenHtml;\n          toggleArea.style.display = \'\';\n          $(toggleArea).getElementsBySelector("img.treeNodeToggler").each( function( toggler )\n          {\n            var linkArea = this.getLinkAndArea(toggler);\n\n            var tLink = linkArea.toggleLink;\n            var tArea = linkArea.toggleArea;\n            Event.observe( tLink, "click", this.onNodeToggleClick.bindAsEventListener( this, tLink, toggler, tArea ) );\n          }.bind(this));\n        }\n\n        if ( toggleImage.src.indexOf( dynamictree.Images.PLUS ) >= 0 )\n        {\n          if ( !hasChildren )\n          {\n            toggleImage.src = dynamictree.Images.NONE;\n            toggleImage.alt = \'\';\n            toggleLink.title = \'\';\n          }\n          else\n          {\n            toggleImage.src = dynamictree.Images.MINUS;\n            toggleImage.alt = this.getCollapseFolderAlt( toggleImage );\n            toggleLink.title = toggleImage.alt;\n          }\n        }\n        else\n        {\n          if ( !hasChildren )\n          {\n            toggleImage.src = dynamictree.Images.NONE_LAST;\n            toggleImage.alt = \'\';\n            toggleLink.title = \'\';\n          }\n          else\n          {\n            toggleImage.src = dynamictree.Images.MINUS_LAST;\n            toggleImage.alt = this.getCollapseFolderAlt( toggleImage );\n            toggleLink.title = toggleImage.alt;\n          }\n        }\n\n        if ( !hasChildren ) // No link anymore\n        {\n          var parent = toggleLink.parentNode;\n          Element.remove( toggleLink );\n          parent.insertBefore( toggleImage, parent.firstChild );\n        }\n      }\n    }\n    catch ( e )\n    {\n      // Invalid response\n    }\n  },\n\n  /**\n   *  Generates the HTML for a tree node\n   */\n  getHtmlForNode: function( node, isLast )\n  {\n    var result = \'\', children, i;\n    if ( node.type == dynamictree.NodeType.ROOT )\n    {\n      result = \'<ul class="tree"\';\n      if ( node.id )\n      {\n        result += \' id="\' + node.id +\'"\';\n      }\n      result += \'>\';\n\n      children = node.children;\n      if ( children && children.length > 0 )\n      {\n        for ( i = 0; i < children.length; i++ )\n        {\n          result += this.getHtmlForNode( children[i], i == (children.length - 1) );\n        }\n      }\n      result += \'</ul>\';\n    }\n    else if ( node.type == dynamictree.NodeType.HEADER )\n    {\n      var colors = "";\n      if( node.areaColor )\n      {\n        colors += node.areaColor;\n      }\n\n      if( node.textColor )\n      {\n        colors += node.textColor;\n      }\n\n      result = \'<li class="subhead"><h4 \';\n\n      result +=  \'id="\' + node.id +\'"\';\n      if ( node.expanded )\n      {\n    \tresult +=\'class="">\';\n      }\n      else\n      {\n    \tresult +=\'class="treeSubhead-collapsed">\';\n      }\n      result +=\'<a href="#" style="\'+colors+\'">\' + node.contents + \'</a></h4>\';\n      children = node.children;\n      if ( children && children.length > 0 )\n      {\n        if ( node.expanded )\n        {\n          result += \'<ul>\';\n        }\n        else\n        {\n          result += \'<ul style="display:none;">\';\n        }\n\n        for ( i = 0; i < children.length; i++ )\n        {\n          result += this.getHtmlForNode( children[i], i == (children.length - 1) );\n        }\n        result += "</ul>";\n      }\n      result += \'</li>\';\n    }\n    else if ( node.type == dynamictree.NodeType.NODE )\n    {\n      /*\n       * Node rendering is a multi-step process.  We start by building a list\n       * into which we can dump the current node we are rendering\n       */\n      if ( isLast )\n      {\n        result = \'<li class="last" id="\' + node.id + \'">\';\n      }\n      else\n      {\n        result = \'<li id="\' + node.id + \'">\';\n      }\n\n      /*\n       * Now render the tree controls (plus/minus sign) along with the image\n       * (dotted lines) that show this node\' place in the hierarchy\n       */\n      children = node.children;\n      var hasChildren = node.hasChildren;\n      var img;\n      if ( !hasChildren || ( children && children.length > 0 ) )\n      {\n        if ( children.length > 0 )\n        {\n          if ( node.expanded )\n          {\n            img = ( isLast ? dynamictree.Images.MINUS_LAST : dynamictree.Images.MINUS );\n            result += \'<a href="#" class="toggle" title="\' + this.collapseStr.escapeHTML() + \'"><img src="\' + img + \'" class="treeNodeToggler" width="18" height="18" alt="\' + this.collapseStr.escapeHTML() + \'"></a>\';\n          }\n          else\n          {\n            img = ( isLast ? dynamictree.Images.PLUS_LAST : dynamictree.Images.PLUS );\n            result += \'<a href="#" class="toggle" title="\' + this.expandStr.escapeHTML() + \'"><img src="\' + img + \'" class="treeNodeToggler" width="18" height="18" alt="\' + this.expandStr.escapeHTML() + \'"></a>\';\n          }\n        }\n        else\n        {\n          img = ( isLast ? dynamictree.Images.NONE_LAST : dynamictree.Images.NONE );\n          result += \'<img src="\' + img+\'" alt="" width="18" height="18">\';\n        }\n      }\n      else\n      {\n        img = ( isLast ? dynamictree.Images.PLUS_LAST : dynamictree.Images.PLUS );\n        result += \'<a href="#" class="toggle" title="\' + this.expandStr.escapeHTML() + \'"><img src="\' + img + \'" class="treeNodeToggler" width="18" height="18" alt="\' + this.expandStr.escapeHTML() + \'"></a>\';\n      }\n\n      /*\n       * Render the node icon\n       */\n      if ( node.icon )\n      {\n        result += \'<img src="\' + node.icon + \'" alt="" class="treeNodeIcon">\';\n      }\n      result += node.contents;\n\n      /*\n       * Now render the children of this node if it has any\n       */\n      if ( hasChildren )\n      {\n        if ( children && children.length > 0 )\n        {\n          if ( node.expanded )\n          {\n            result += \'<ul>\';\n          }\n          else\n          {\n            result += \'<ul style="display:none;">\';\n          }\n          for ( i = 0; i < children.length; i++ )\n          {\n            result += this.getHtmlForNode( children[i], i == (children.length - 1) );\n          }\n          result += \'</ul>\';\n        }\n        else\n        {\n          // it is invalid to show a <ul></ul> without a child <li></li>.  Give\n          // the "empty" <li> a special class so that we can distinguish this\n          // case from the situation where a node actually has no children --\n          // this distinction is necessary for determining whether we need to\n          // go back to the server to dynamically load children for a node.\n          result += \'<ul style="display:none;"><li class="--empty--"></li></ul>\';\n        }\n      }\n\n      result+= \'</li>\';\n    }\n    else if ( node.type == dynamictree.NodeType.HEADER )\n    {\n      result = \'<h4 class="treehead">\'+node.contents+\'</h4>\';\n    }\n    else if ( node.type == dynamictree.NodeType.SEPARATOR )\n    {\n      result = \'<hr>\';\n    }\n    else if ( node.type == dynamictree.NodeType.HTML )\n    {\n      result = \'<li><div class="none">\' + node.contents + \'</div></li>\';\n    }\n    return result;\n  },\n\n  menuExpand : function(evt) {\n        var parentContainer = this.container.ancestors()[0];\n        var parentContainerBackgroundColor = this.getCurrentStyle( parentContainer, \'background-color\' );\n        var parentContainerWidth = parentContainer.clientWidth - 1;\n        var scrollWidth = this.container.scrollWidth;\n        if ( scrollWidth <= parentContainerWidth )\n        {\n          // No Extra data displayed.\n          return;\n        }\n        var ek = evt.type;\n        if ( ek == \'mouseover\' )\n        {\n            this.container.style.zIndex = \'10000000\';\n            this.container.style.position = \'relative\';\n            containerWidth = scrollWidth ;\n            new Effect.Morph(\n                    this.container,\n                    {\n                        style :\'border:1px solid #999999; width:\' + containerWidth + \'px; opacity:0.94; background:\' + parentContainerBackgroundColor,\n                        duration :0,\n                        queue : {\n                            scope :\'open\'\n                        }\n                    });\n            var queue = Effect.Queues.get(\'close\');\n            queue.each( function(effect) {\n                effect.cancel();\n            });\n        }\n        else\n        {\n            this.container.style.zIndex = \'auto\';\n            new Effect.Morph(\n                    this.container,\n                    {\n                        style :\'border:0px; opacity:1.0;background:transparent;width:\' + parentContainerWidth + \'px\',\n                        duration :0,\n                        queue : {\n                            scope :\'close\'\n                        }\n                    });\n            var queueClose = Effect.Queues.get(\'open\');\n            queueClose.each( function(effect) {\n                effect.cancel();\n            });\n        }\n    },\n\n    getCurrentStyle : function(oElm, strCssRule) {\n        var strValue = "";\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n            strValue = document.defaultView.getComputedStyle(oElm, "")\n                    .getPropertyValue(strCssRule);\n        } else if (oElm.currentStyle) {\n            strCssRule = strCssRule.replace(/\\-(\\w)/g, function(strMatch, p1) {\n                return p1.toUpperCase();\n            });\n            strValue = oElm.currentStyle[strCssRule];\n        }\n        return strValue;\n    }\n};\n'