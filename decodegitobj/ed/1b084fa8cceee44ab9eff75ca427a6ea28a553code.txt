b'blob 46046\x00/*\n * Copyright 2005 Joe Walker\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Declare an object to which we can add real functions.\n */\nif (dwr == null) var dwr = {};\nif (dwr.util == null) dwr.util = {};\nif (DWRUtil == null) var DWRUtil = dwr.util;\n\n/** @private The flag we use to decide if we should escape html */\ndwr.util._escapeHtml = true;\n\n/**\n * Set the global escapeHtml flag\n */\ndwr.util.setEscapeHtml = function(escapeHtml) {\n  dwr.util._escapeHtml = escapeHtml;\n};\n\n/** @private Work out from an options list and global settings if we should be esccaping */\ndwr.util._shouldEscapeHtml = function(options) {\n  if (options && options.escapeHtml != null) {\n    return options.escapeHtml;\n  }\n  return dwr.util._escapeHtml;\n};\n\n/**\n * Return a string with &, < and > replaced with their entities\n * @see TODO\n */\ndwr.util.escapeHtml = function(original) {\n  return original.replace(/&/g,\'&amp;\').replace(/</g,\'&lt;\').replace(/>/g,\'&gt;\');\n};\n\n/**\n * Replace common XML entities with characters (see dwr.util.escapeHtml())\n * @see TODO\n */\ndwr.util.unescapeHtml = function(original) {\n  return original.replace(/&amp;/g,\'&\').replace(/&lt;/g,\'<\').replace(/&gt;/g,\'>\');\n};\n\n/**\n * Replace characters dangerous for XSS reasons with visually similar characters\n * @see TODO\n */\ndwr.util.replaceXmlCharacters = function(original) {\n  original = original.replace("&", "+");\n  original = original.replace("<", "\\u2039");\n  original = original.replace(">", "\\u203A");\n  original = original.replace("\\\'", "\\u2018");\n  original = original.replace("\\"", "\\u201C");\n  return original;\n};\n\n/**\n * Return true iff the input string contains any XSS dangerous characters\n * @see TODO\n */\ndwr.util.containsXssRiskyCharacters = function(original) {\n  return (original.indexOf(\'&\') != -1\n    || original.indexOf(\'<\') != -1\n    || original.indexOf(\'>\') != -1\n    || original.indexOf(\'\\\'\') != -1\n    || original.indexOf(\'\\"\') != -1);\n};\n\n/**\n * Enables you to react to return being pressed in an input\n * @see http://getahead.org/dwr/browser/util/selectrange\n */\ndwr.util.onReturn = function(event, action) {\n  if (!event) event = window.event;\n  if (event && event.keyCode && event.keyCode == 13) action();\n};\n\n/**\n * Select a specific range in a text box. Useful for \'google suggest\' type functions.\n * @see http://getahead.org/dwr/browser/util/selectrange\n */\ndwr.util.selectRange = function(ele, start, end) {\n  ele = dwr.util._getElementById(ele, "selectRange()");\n  if (ele == null) return;\n  if (ele.setSelectionRange) {\n    ele.setSelectionRange(start, end);\n  }\n  else if (ele.createTextRange) {\n    var range = ele.createTextRange();\n    range.moveStart("character", start);\n    range.moveEnd("character", end - ele.value.length);\n    range.select();\n  }\n  ele.focus();\n};\n\n/**\n * Find the element in the current HTML document with the given id or ids\n * @see http://getahead.org/dwr/browser/util/$\n */\nif (document.getElementById) {\n  dwr.util.byId = function() {\n    var elements = new Array();\n    for (var i = 0; i < arguments.length; i++) {\n      var element = arguments[i];\n      if (typeof element == \'string\') {\n        element = document.getElementById(element);\n      }\n      if (arguments.length == 1) {\n        return element;\n      }\n      elements.push(element);\n    }\n    return elements;\n  };\n}\nelse if (document.all) {\n  dwr.util.byId = function() {\n    var elements = new Array();\n    for (var i = 0; i < arguments.length; i++) {\n      var element = arguments[i];\n      if (typeof element == \'string\') {\n        element = document.all[element];\n      }\n      if (arguments.length == 1) {\n        return element;\n      }\n      elements.push(element);\n    }\n    return elements;\n  };\n}\n\n/**\n * Alias $ to dwr.util.byId\n * @see http://getahead.org/dwr/browser/util/$\n */\nvar $;\nif (!$) {\n  $ = dwr.util.byId;\n}\n\n/**\n * This function pretty-prints simple data or whole object graphs, f ex as an aid in debugging.\n * @see http://getahead.org/dwr/browser/util/todescriptivestring\n */\ndwr.util.toDescriptiveString = function(data, showLevels, options) {\n  if (showLevels === undefined) showLevels = 1;\n  var opt = {};\n  if (dwr.util._isObject(options)) opt = options;\n  var defaultoptions = {\n    escapeHtml:false,\n    baseIndent: "",\n    childIndent: "\\u00A0\\u00A0",\n    lineTerminator: "\\n",\n    oneLineMaxItems: 5,\n    shortStringMaxLength: 13,\n    propertyNameMaxLength: 30\n  };\n  for (var p in defaultoptions) {\n    if (!(p in opt)) {\n      opt[p] = defaultoptions[p];\n    }\n  }\n\n  var skipDomProperties = {\n    document:true, ownerDocument:true,\n    all:true,\n    parentElement:true, parentNode:true, offsetParent:true,\n    children:true, firstChild:true, lastChild:true,\n    previousSibling:true, nextSibling:true,\n    innerHTML:true, outerHTML:true,\n    innerText:true, outerText:true, textContent:true,\n    attributes:true,\n    style:true, currentStyle:true, runtimeStyle:true,\n    parentTextEdit:true\n  };\n\n  function recursive(data, showLevels, indentDepth, options) {\n    var reply = "";\n    try {\n      // string\n      if (typeof data == "string") {\n        var str = data;\n        if (showLevels == 0 && str.length > options.shortStringMaxLength)\n          str = str.substring(0, options.shortStringMaxLength-3) + "...";\n        if (options.escapeHtml) {\n          // Do the escape separately for every line as escapeHtml() on some\n          // browsers (IE) will strip line breaks and we want to preserve them\n          var lines = str.split("\\n");\n          for (var i = 0; i < lines.length; i++) lines[i] = dwr.util.escapeHtml(lines[i]);\n          str = lines.join("\\n");\n        }\n        if (showLevels == 0) { // Short format\n          str = str.replace(/\\n|\\r|\\t/g, function(ch) {\n            switch (ch) {\n              case "\\n": return "\\\\n";\n              case "\\r": return "";\n              case "\\t": return "\\\\t";\n            }\n          });\n        }\n        else { // Long format\n          str = str.replace(/\\n|\\r|\\t/g, function(ch) {\n            switch (ch) {\n              case "\\n": return options.lineTerminator + indent(indentDepth+1, options);\n              case "\\r": return "";\n              case "\\t": return "\\\\t";\n            }\n          });\n        }\n        reply = \'"\' + str + \'"\';\n      }\n\n      // function\n      else if (typeof data == "function") {\n        reply = "function";\n      }\n\n      // Array\n      else if (dwr.util._isArray(data)) {\n        if (showLevels == 0) { // Short format (don\'t show items)\n          if (data.length > 0)\n            reply = "[...]";\n          else\n            reply = "[]";\n        }\n        else { // Long format (show items)\n          var strarr = [];\n          strarr.push("[");\n          var count = 0;\n          for (var i = 0; i < data.length; i++) {\n            if (! (i in data)) continue;\n            var itemvalue = data[i];\n            if (count > 0) strarr.push(", ");\n            if (showLevels == 1) { // One-line format\n              if (count == options.oneLineMaxItems) {\n                strarr.push("...");\n                break;\n              }\n            }\n            else { // Multi-line format\n              strarr.push(options.lineTerminator + indent(indentDepth+1, options));\n            }\n            if (i != count) {\n              strarr.push(i);\n              strarr.push(":");\n            }\n            strarr.push(recursive(itemvalue, showLevels-1, indentDepth+1, options));\n            count++;\n          }\n          if (showLevels > 1) strarr.push(options.lineTerminator + indent(indentDepth, options));\n          strarr.push("]");\n          reply = strarr.join("");\n        }\n      }\n\n      // Objects except Date\n      else if (dwr.util._isObject(data) && !dwr.util._isDate(data)) {\n        if (showLevels == 0) { // Short format (don\'t show properties)\n          reply = dwr.util._detailedTypeOf(data);\n        }\n        else { // Long format (show properties)\n          var strarr = [];\n          if (dwr.util._detailedTypeOf(data) != "Object") {\n            strarr.push(dwr.util._detailedTypeOf(data));\n            if (typeof data.valueOf() != "object") {\n              strarr.push(":");\n              strarr.push(recursive(data.valueOf(), 1, indentDepth, options));\n            }\n            strarr.push(" ");\n          }\n          strarr.push("{");\n          var isDomObject = dwr.util._isHTMLElement(data);\n          var count = 0;\n          for (var prop in data) {\n            var propvalue = data[prop];\n            if (isDomObject) {\n              if (!propvalue) continue;\n              if (typeof propvalue == "function") continue;\n              if (skipDomProperties[prop]) continue;\n              if (prop.toUpperCase() == prop) continue;\n            }\n            if (count > 0) strarr.push(", ");\n            if (showLevels == 1) { // One-line format\n              if (count == options.oneLineMaxItems) {\n                strarr.push("...");\n                break;\n              }\n            }\n            else { // Multi-line format\n              strarr.push(options.lineTerminator + indent(indentDepth+1, options));\n            }\n            strarr.push(prop.length > options.propertyNameMaxLength ? prop.substring(0, options.propertyNameMaxLength-3) + "..." : prop);\n            strarr.push(":");\n            strarr.push(recursive(propvalue, showLevels-1, indentDepth+1, options));\n            count++;\n          }\n          if (showLevels > 1 && count > 0) strarr.push(options.lineTerminator + indent(indentDepth, options));\n          strarr.push("}");\n          reply = strarr.join("");\n        }\n      }\n\n      // undefined, null, number, boolean, Date\n      else {\n        reply = "" + data;\n      }\n\n      return reply;\n    }\n    catch(err) {\n      return (err.message ? err.message : ""+err);\n    }\n  }\n\n  function indent(count, options) {\n    var strarr = [];\n    strarr.push(options.baseIndent);\n    for (var i=0; i<count; i++) {\n      strarr.push(options.childIndent);\n    }\n    return strarr.join("");\n  };\n\n  return recursive(data, showLevels, 0, opt);\n};\n\n/**\n * Setup a GMail style loading message.\n * @see http://getahead.org/dwr/browser/util/useloadingmessage\n */\ndwr.util.useLoadingMessage = function(message) {\n  var loadingMessage;\n  if (message) loadingMessage = message;\n  else loadingMessage = "Loading";\n  dwr.engine.setPreHook(function() {\n    var disabledZone = dwr.util.byId(\'disabledZone\');\n    if (!disabledZone) {\n      disabledZone = document.createElement(\'div\');\n      disabledZone.setAttribute(\'id\', \'disabledZone\');\n      disabledZone.style.position = "absolute";\n      disabledZone.style.zIndex = "1000";\n      disabledZone.style.left = "0px";\n      disabledZone.style.top = "0px";\n      disabledZone.style.width = "100%";\n      disabledZone.style.height = "100%";\n      document.body.appendChild(disabledZone);\n      var messageZone = document.createElement(\'div\');\n      messageZone.setAttribute(\'id\', \'messageZone\');\n      messageZone.style.position = "absolute";\n      messageZone.style.top = "0px";\n      messageZone.style.right = "0px";\n      messageZone.style.background = "red";\n      messageZone.style.color = "white";\n      messageZone.style.fontFamily = "Arial,Helvetica,sans-serif";\n      messageZone.style.padding = "4px";\n      disabledZone.appendChild(messageZone);\n      var text = document.createTextNode(loadingMessage);\n      messageZone.appendChild(text);\n      dwr.util._disabledZoneUseCount = 1;\n    }\n    else {\n      dwr.util.byId(\'messageZone\').innerHTML = loadingMessage;\n      disabledZone.style.visibility = \'visible\';\n      dwr.util._disabledZoneUseCount++;\n    }\n  });\n  dwr.engine.setPostHook(function() {\n    dwr.util._disabledZoneUseCount--;\n    if (dwr.util._disabledZoneUseCount == 0) {\n      dwr.util.byId(\'disabledZone\').style.visibility = \'hidden\';\n    }\n  });\n};\n\n/**\n * Set a global highlight handler\n */\ndwr.util.setHighlightHandler = function(handler) {\n  dwr.util._highlightHandler = handler;\n};\n\n/**\n * An example highlight handler\n */\ndwr.util.yellowFadeHighlightHandler = function(ele) {\n  dwr.util._yellowFadeProcess(ele, 0);\n};\ndwr.util._yellowFadeSteps = [ "d0", "b0", "a0", "90", "98", "a0", "a8", "b0", "b8", "c0", "c8", "d0", "d8", "e0", "e8", "f0", "f8" ];\ndwr.util._yellowFadeProcess = function(ele, colorIndex) {\n  ele = dwr.util.byId(ele);\n  if (colorIndex < dwr.util._yellowFadeSteps.length) {\n    ele.style.backgroundColor = "#ffff" + dwr.util._yellowFadeSteps[colorIndex];\n    setTimeout("dwr.util._yellowFadeProcess(\'" + ele.id + "\'," + (colorIndex + 1) + ")", 200);\n  }\n  else {\n    ele.style.backgroundColor = "transparent";\n  }\n};\n\n/**\n * An example highlight handler\n */\ndwr.util.borderFadeHighlightHandler = function(ele) {\n  ele.style.borderWidth = "2px";\n  ele.style.borderStyle = "solid";\n  dwr.util._borderFadeProcess(ele, 0);\n};\ndwr.util._borderFadeSteps = [ "d0", "b0", "a0", "90", "98", "a0", "a8", "b0", "b8", "c0", "c8", "d0", "d8", "e0", "e8", "f0", "f8" ];\ndwr.util._borderFadeProcess = function(ele, colorIndex) {\n  ele = dwr.util.byId(ele);\n  if (colorIndex < dwr.util._borderFadeSteps.length) {\n    ele.style.borderColor = "#ff" + dwr.util._borderFadeSteps[colorIndex] + dwr.util._borderFadeSteps[colorIndex];\n    setTimeout("dwr.util._borderFadeProcess(\'" + ele.id + "\'," + (colorIndex + 1) + ")", 200);\n  }\n  else {\n    ele.style.backgroundColor = "transparent";\n  }\n};\n\n/**\n * A focus highlight handler\n */\ndwr.util.focusHighlightHandler = function(ele) {\n  try {\n    ele.focus();\n  }\n  catch (ex) { /* ignore */ }\n};\n\n/** @private the current global highlight style */\ndwr.util._highlightHandler = null;\n\n/**\n * Highlight that an element has changed\n */\ndwr.util.highlight = function(ele, options) {\n  if (options && options.highlightHandler) {\n    options.highlightHandler(dwr.util.byId(ele));\n  }\n  else if (dwr.util._highlightHandler != null) {\n    dwr.util._highlightHandler(dwr.util.byId(ele));\n  }\n};\n\n/**\n * Set the value an HTML element to the specified value.\n * @see http://getahead.org/dwr/browser/util/setvalue\n */\ndwr.util.setValue = function(ele, val, options) {\n  if (val == null) val = "";\n  if (options == null) options = {};\n\n  var orig = ele;\n  if (typeof ele == "string") {\n    ele = dwr.util.byId(ele);\n    // We can work with names and need to sometimes for radio buttons, and IE has\n    // an annoying bug where getElementById() returns an element based on name if\n    // it doesn\'t find it by id. Here we don\'t want to do that, so:\n    if (ele && ele.id != orig) ele = null;\n  }\n  var nodes = null;\n  if (ele == null) {\n    // Now it is time to look by name\n    nodes = document.getElementsByName(orig);\n    if (nodes.length >= 1) ele = nodes.item(0);\n  }\n\n  if (ele == null) {\n    dwr.util._debug("setValue() can\'t find an element with id/name: " + orig + ".");\n    return;\n  }\n\n  // All paths now lead to some update so we highlight a change\n  dwr.util.highlight(ele, options);\n\n  if (dwr.util._isHTMLElement(ele, "select")) {\n    if (ele.type == "select-multiple" && dwr.util._isArray(val)) dwr.util._selectListItems(ele, val);\n    else dwr.util._selectListItem(ele, val);\n    return;\n  }\n\n  if (dwr.util._isHTMLElement(ele, "input")) {\n    if (ele.type == "radio" || ele.type == "checkbox") {\n      if (nodes && nodes.length >= 1) {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes.item(i);\n          if (node.type != ele.type) continue;\n          if (dwr.util._isArray(val)) {\n            node.checked = false;\n            for (var j = 0; j < val.length; j++)\n              if (val[j] == node.value) node.checked = true;\n          }\n          else {\n            node.checked = (node.value == val);\n          }\n        }\n      }\n      else {\n        ele.checked = (val == true);\n      }\n    }\n    else ele.value = val;\n\n    return;\n  }\n\n  if (dwr.util._isHTMLElement(ele, "textarea")) {\n    ele.value = val;\n    return;\n  }\n\n  // If the value to be set is a DOM object then we try importing the node\n  // rather than serializing it out\n  if (val.nodeType) {\n    if (val.nodeType == 9 /*Node.DOCUMENT_NODE*/) val = val.documentElement;\n    val = dwr.util._importNode(ele.ownerDocument, val, true);\n    ele.appendChild(val);\n    return;\n  }\n\n  // Fall back to innerHTML and friends\n  if (dwr.util._shouldEscapeHtml(options) && typeof(val) == "string") {\n    if (ele.textContent) ele.textContent = val;\n    else if (ele.innerText) ele.innerText = val;\n    else ele.innerHTML = dwr.util.escapeHtml(val);\n  }\n  else {\n    ele.innerHTML = val;\n  }\n};\n\n/**\n * @private Find multiple items in a select list and select them. Used by setValue()\n * @param ele The select list item\n * @param val The array of values to select\n */\ndwr.util._selectListItems = function(ele, val) {\n  // We deal with select list elements by selecting the matching option\n  // Begin by searching through the values\n  var found  = false;\n  var i;\n  var j;\n  for (i = 0; i < ele.options.length; i++) {\n    ele.options[i].selected = false;\n    for (j = 0; j < val.length; j++) {\n      if (ele.options[i].value == val[j]) {\n        ele.options[i].selected = true;\n      }\n    }\n  }\n  // If that fails then try searching through the visible text\n  if (found) return;\n\n  for (i = 0; i < ele.options.length; i++) {\n    for (j = 0; j < val.length; j++) {\n      if (ele.options[i].text == val[j]) {\n        ele.options[i].selected = true;\n      }\n    }\n  }\n};\n\n/**\n * @private Find an item in a select list and select it. Used by setValue()\n * @param ele The select list item\n * @param val The value to select\n */\ndwr.util._selectListItem = function(ele, val) {\n  // We deal with select list elements by selecting the matching option\n  // Begin by searching through the values\n  var found = false;\n  var i;\n  for (i = 0; i < ele.options.length; i++) {\n    if (ele.options[i].value == val) {\n      ele.options[i].selected = true;\n      found = true;\n    }\n    else {\n      ele.options[i].selected = false;\n    }\n  }\n\n  // If that fails then try searching through the visible text\n  if (found) return;\n\n  for (i = 0; i < ele.options.length; i++) {\n    ele.options[i].selected = (ele.options[i].text == val);\n  }\n};\n\n/**\n * Read the current value for a given HTML element.\n * @see http://getahead.org/dwr/browser/util/getvalue\n */\ndwr.util.getValue = function(ele, options) {\n  if (options == null) options = {};\n  var orig = ele;\n  if (typeof ele == "string") {\n    ele = dwr.util.byId(ele);\n    // We can work with names and need to sometimes for radio buttons, and IE has\n    // an annoying bug where getElementById() returns an element based on name if\n    // it doesn\'t find it by id. Here we don\'t want to do that, so:\n    if (ele && ele.id != orig) ele = null;\n  }\n  var nodes = null;\n  if (ele == null) {\n    // Now it is time to look by name\n    nodes = document.getElementsByName(orig);\n    if (nodes.length >= 1) ele = nodes.item(0);\n  }\n  if (ele == null) {\n    dwr.util._debug("getValue() can\'t find an element with id/name: " + orig + ".");\n    return "";\n  }\n\n  if (dwr.util._isHTMLElement(ele, "select")) {\n    // Using "type" property instead of "multiple" as "type" is an official\n    // client-side property since JS 1.1\n    if (ele.type == "select-multiple") {\n      var reply = new Array();\n      for (var i = 0; i < ele.options.length; i++) {\n        var item = ele.options[i];\n        if (item.selected) {\n          var valueAttr = item.getAttributeNode("value");\n          if (valueAttr && valueAttr.specified) {\n            reply.push(item.value);\n          }\n          else {\n            reply.push(item.text);\n          }\n        }\n      }\n      return reply;\n    }\n    else {\n      var sel = ele.selectedIndex;\n      if (sel != -1) {\n        var item = ele.options[sel];\n        var valueAttr = item.getAttributeNode("value");\n        if (valueAttr && valueAttr.specified) {\n          return item.value;\n        }\n        return item.text;\n      }\n      else {\n        return "";\n      }\n    }\n  }\n\n  if (dwr.util._isHTMLElement(ele, "input")) {\n    if (ele.type == "radio") {\n      if (nodes && nodes.length >= 1) {\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes.item(i);\n          if (node.type == ele.type) {\n            if (node.checked) return node.value;\n          }\n        }\n      }\n      return ele.checked;\n    }\n    if (ele.type == "checkbox") {\n      if (nodes && nodes.length >= 1) {\n        var reply = [];\n        for (var i = 0; i < nodes.length; i++) {\n          var node = nodes.item(i);\n          if (node.type == ele.type) {\n            if (node.checked) reply.push(node.value);\n          }\n        }\n        return reply;\n      }\n      return ele.checked;\n    }\n    return ele.value;\n  }\n\n  if (dwr.util._isHTMLElement(ele, "textarea")) {\n    return ele.value;\n  }\n\n  if (dwr.util._shouldEscapeHtml(options)) {\n    if (ele.textContent) return ele.textContent;\n    else if (ele.innerText) return ele.innerText;\n  }\n  return ele.innerHTML;\n};\n\n/**\n * getText() is like getValue() except that it reads the text (and not the value) from select elements\n * @see http://getahead.org/dwr/browser/util/gettext\n */\ndwr.util.getText = function(ele) {\n  ele = dwr.util._getElementById(ele, "getText()");\n  if (ele == null) return null;\n  if (!dwr.util._isHTMLElement(ele, "select")) {\n    dwr.util._debug("getText() can only be used with select elements. Attempt to use: " + dwr.util._detailedTypeOf(ele) + " from  id: " + orig + ".");\n    return "";\n  }\n\n  // This is a bit of a scam because it assumes single select\n  // but I\'m not sure how we should treat multi-select.\n  var sel = ele.selectedIndex;\n  if (sel != -1) {\n    return ele.options[sel].text;\n  }\n  else {\n    return "";\n  }\n};\n\n/**\n * Given a map, or a recursive structure consisting of arrays and maps, call\n * setValue() for all leaf entries and use intermediate levels to form nested\n * element ids.\n * @see http://getahead.org/dwr/browser/util/setvalues\n */\ndwr.util.setValues = function(data, options) {\n  var prefix = "";\n  if (options && options.prefix) prefix = options.prefix;\n  if (options && options.idPrefix) prefix = options.idPrefix;\n  dwr.util._setValuesRecursive(data, prefix);\n};\n\n/**\n * @private Recursive helper for setValues()\n */\ndwr.util._setValuesRecursive = function(data, idpath) {\n  // Array containing objects -> add "[n]" to prefix and make recursive call\n  // for each item object\n  if (dwr.util._isArray(data) && data.length > 0 && dwr.util._isObject(data[0])) {\n    for (var i = 0; i < data.length; i++) {\n      dwr.util._setValuesRecursive(data[i], idpath+"["+i+"]");\n    }\n  }\n  // Object (not array) -> handle nested object properties\n  else if (dwr.util._isObject(data) && !dwr.util._isArray(data)) {\n    for (var prop in data) {\n      var subidpath = idpath ? idpath+"."+prop : prop;\n      // Object (not array), or array containing objects -> call ourselves recursively\n      if (dwr.util._isObject(data[prop]) && !dwr.util._isArray(data[prop])\n          || dwr.util._isArray(data[prop]) && data[prop].length > 0 && dwr.util._isObject(data[prop][0])) {\n        dwr.util._setValuesRecursive(data[prop], subidpath);\n      }\n      // Functions -> skip\n      else if (typeof data[prop] == "function") {\n        // NOP\n      }\n      // Only simple values left (or array of simple values, or empty array)\n      // -> call setValue()\n      else {\n        // Are there any elements with that id or name\n        if (dwr.util.byId(subidpath) != null || document.getElementsByName(subidpath).length >= 1) {\n          dwr.util.setValue(subidpath, data[prop]);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Given a map, or a recursive structure consisting of arrays and maps, call\n * getValue() for all leaf entries and use intermediate levels to form nested\n * element ids.\n * Given a string or element that refers to a form, create an object from the\n * elements of the form.\n * @see http://getahead.org/dwr/browser/util/getvalues\n */\ndwr.util.getValues = function(data, options) {\n  if (typeof data == "string" || dwr.util._isHTMLElement(data)) {\n    return dwr.util.getFormValues(data);\n  }\n  else {\n    var prefix = "";\n    if (options != null && options.prefix) prefix = options.prefix;\n    if (options != null && options.idPrefix) prefix = options.idPrefix;\n    dwr.util._getValuesRecursive(data, prefix);\n    return data;\n  }\n};\n\n/**\n * Given a string or element that refers to a form, create an object from the\n * elements of the form.\n * @see http://getahead.org/dwr/browser/util/getvalues\n */\ndwr.util.getFormValues = function(eleOrNameOrId) {\n  var ele = null;\n  if (typeof eleOrNameOrId == "string") {\n    ele = document.forms[eleOrNameOrId];\n    if (ele == null) ele = dwr.util.byId(eleOrNameOrId);\n  }\n  else if (dwr.util._isHTMLElement(eleOrNameOrId)) {\n    ele = eleOrNameOrId;\n  }\n  if (ele != null) {\n    if (ele.elements == null) {\n      alert("getFormValues() requires an object or reference to a form element.");\n      return null;\n    }\n    var reply = {};\n    var name;\n    var value;\n    for (var i = 0; i < ele.elements.length; i++) {\n      if (ele[i].type in {button:0,submit:0,reset:0,image:0,file:0}) continue;\n      if (ele[i].name) {\n        name = ele[i].name;\n        value = dwr.util.getValue(name);\n      }\n      else {\n        if (ele[i].id) name = ele[i].id;\n        else name = "element" + i;\n        value = dwr.util.getValue(ele[i]);\n      }\n      reply[name] = value;\n    }\n    return reply;\n  }\n};\n\n/**\n * @private Recursive helper for getValues().\n */\ndwr.util._getValuesRecursive = function(data, idpath) {\n  // Array containing objects -> add "[n]" to idpath and make recursive call\n  // for each item object\n  if (dwr.util._isArray(data) && data.length > 0 && dwr.util._isObject(data[0])) {\n    for (var i = 0; i < data.length; i++) {\n      dwr.util._getValuesRecursive(data[i], idpath+"["+i+"]");\n    }\n  }\n  // Object (not array) -> handle nested object properties\n  else if (dwr.util._isObject(data) && !dwr.util._isArray(data)) {\n    for (var prop in data) {\n      var subidpath = idpath ? idpath+"."+prop : prop;\n      // Object, or array containing objects -> call ourselves recursively\n      if (dwr.util._isObject(data[prop]) && !dwr.util._isArray(data[prop])\n          || dwr.util._isArray(data[prop]) && data[prop].length > 0 && dwr.util._isObject(data[prop][0])) {\n        dwr.util._getValuesRecursive(data[prop], subidpath);\n      }\n      // Functions -> skip\n      else if (typeof data[prop] == "function") {\n        // NOP\n      }\n      // Only simple values left (or array of simple values, or empty array)\n      // -> call getValue()\n      else {\n        // Are there any elements with that id or name\n        if (dwr.util.byId(subidpath) != null || document.getElementsByName(subidpath).length >= 1) {\n          data[prop] = dwr.util.getValue(subidpath);\n        }\n      }\n    }\n  }\n};\n\n/**\n * Add options to a list from an array or map.\n * @see http://getahead.org/dwr/browser/lists\n */\ndwr.util.addOptions = function(ele, data/*, options*/) {\n  ele = dwr.util._getElementById(ele, "addOptions()");\n  if (ele == null) return;\n  var useOptions = dwr.util._isHTMLElement(ele, "select");\n  var useLi = dwr.util._isHTMLElement(ele, ["ul", "ol"]);\n  if (!useOptions && !useLi) {\n    dwr.util._debug("addOptions() can only be used with select/ul/ol elements. Attempt to use: " + dwr.util._detailedTypeOf(ele));\n    return;\n  }\n  if (data == null) return;\n\n  var argcount = arguments.length;\n  var options = {};\n  var lastarg = arguments[argcount - 1];\n  if (argcount > 2 && dwr.util._isObject(lastarg)) {\n    options = lastarg;\n    argcount--;\n  }\n  var arg3 = null; if (argcount >= 3) arg3 = arguments[2];\n  var arg4 = null; if (argcount >= 4) arg4 = arguments[3];\n  if (!options.optionCreator && useOptions) options.optionCreator = dwr.util._defaultOptionCreator;\n  if (!options.optionCreator && useLi) options.optionCreator = dwr.util._defaultListItemCreator;\n\n  var text, value, li;\n  if (dwr.util._isArray(data)) {\n    // Loop through the data that we do have\n    for (var i = 0; i < data.length; i++) {\n      options.data = data[i];\n      options.text = null;\n      options.value = null;\n      if (useOptions) {\n        if (arg3 != null) {\n          if (arg4 != null) {\n            options.text = dwr.util._getValueFrom(data[i], arg4);\n            options.value = dwr.util._getValueFrom(data[i], arg3);\n          }\n          else options.text = options.value = dwr.util._getValueFrom(data[i], arg3);\n        }\n        else options.text = options.value = dwr.util._getValueFrom(data[i]);\n\n        if (options.text != null || options.value) {\n          var opt = options.optionCreator(options);\n          opt.text = options.text;\n          opt.value = options.value;\n          ele.options[ele.options.length] = opt;\n        }\n      }\n      else {\n        options.value = dwr.util._getValueFrom(data[i], arg3);\n        if (options.value != null) {\n          li = options.optionCreator(options);\n          if (dwr.util._shouldEscapeHtml(options)) {\n            options.value = dwr.util.escapeHtml(options.value);\n          }\n          li.innerHTML = options.value;\n          ele.appendChild(li);\n        }\n      }\n    }\n  }\n  else if (arg4 != null) {\n    if (!useOptions) {\n      alert("dwr.util.addOptions can only create select lists from objects.");\n      return;\n    }\n    for (var prop in data) {\n      options.data = data[prop];\n      options.value = dwr.util._getValueFrom(data[prop], arg3);\n      options.text = dwr.util._getValueFrom(data[prop], arg4);\n\n      if (options.text != null || options.value) {\n        var opt = options.optionCreator(options);\n        opt.text = options.text;\n        opt.value = options.value;\n        ele.options[ele.options.length] = opt;\n      }\n    }\n  }\n  else {\n    if (!useOptions) {\n      dwr.util._debug("dwr.util.addOptions can only create select lists from objects.");\n      return;\n    }\n    for (var prop in data) {\n      if (typeof data[prop] == "function") continue;\n      options.data = data[prop];\n      if (!arg3) {\n        options.value = prop;\n        options.text = data[prop];\n      }\n      else {\n        options.value = data[prop];\n        options.text = prop;\n      }\n      if (options.text != null || options.value) {\n        var opt = options.optionCreator(options);\n        opt.text = options.text;\n        opt.value = options.value;\n        ele.options[ele.options.length] = opt;\n      }\n    }\n  }\n\n  // All error routes through this function result in a return, so highlight now\n  dwr.util.highlight(ele, options);\n};\n\n/**\n * @private Get the data from an array function for dwr.util.addOptions\n */\ndwr.util._getValueFrom = function(data, method) {\n  if (method == null) return data;\n  else if (typeof method == \'function\') return method(data);\n  else return data[method];\n};\n\n/**\n * @private Default option creation function\n */\ndwr.util._defaultOptionCreator = function(options) {\n  return new Option();\n};\n\n/**\n * @private Default list item creation function\n */\ndwr.util._defaultListItemCreator = function(options) {\n  return document.createElement("li");\n};\n\n/**\n * Remove all the options from a select list (specified by id)\n * @see http://getahead.org/dwr/browser/lists\n */\ndwr.util.removeAllOptions = function(ele) {\n  ele = dwr.util._getElementById(ele, "removeAllOptions()");\n  if (ele == null) return;\n  var useOptions = dwr.util._isHTMLElement(ele, "select");\n  var useLi = dwr.util._isHTMLElement(ele, ["ul", "ol"]);\n  if (!useOptions && !useLi) {\n    dwr.util._debug("removeAllOptions() can only be used with select, ol and ul elements. Attempt to use: " + dwr.util._detailedTypeOf(ele));\n    return;\n  }\n  if (useOptions) {\n    ele.options.length = 0;\n  }\n  else {\n    while (ele.childNodes.length > 0) {\n      ele.removeChild(ele.firstChild);\n    }\n  }\n};\n\n/**\n * Create rows inside a the table, tbody, thead or tfoot element (given by id).\n * @see http://getahead.org/dwr/browser/tables\n */\ndwr.util.addRows = function(ele, data, cellFuncs, options) {\n  ele = dwr.util._getElementById(ele, "addRows()");\n  if (ele == null) return;\n  if (!dwr.util._isHTMLElement(ele, ["table", "tbody", "thead", "tfoot"])) {\n    dwr.util._debug("addRows() can only be used with table, tbody, thead and tfoot elements. Attempt to use: " + dwr.util._detailedTypeOf(ele));\n    return;\n  }\n  if (!options) options = {};\n  if (!options.rowCreator) options.rowCreator = dwr.util._defaultRowCreator;\n  if (!options.cellCreator) options.cellCreator = dwr.util._defaultCellCreator;\n  var tr, rowNum;\n  if (dwr.util._isArray(data)) {\n    for (rowNum = 0; rowNum < data.length; rowNum++) {\n      options.rowData = data[rowNum];\n      options.rowIndex = rowNum;\n      options.rowNum = rowNum;\n      options.data = null;\n      options.cellNum = -1;\n      tr = dwr.util._addRowInner(cellFuncs, options);\n      if (tr != null) ele.appendChild(tr);\n    }\n  }\n  else if (typeof data == "object") {\n    rowNum = 0;\n    for (var rowIndex in data) {\n      options.rowData = data[rowIndex];\n      options.rowIndex = rowIndex;\n      options.rowNum = rowNum;\n      options.data = null;\n      options.cellNum = -1;\n      tr = dwr.util._addRowInner(cellFuncs, options);\n      if (tr != null) ele.appendChild(tr);\n      rowNum++;\n    }\n  }\n\n  dwr.util.highlight(ele, options);\n};\n\n/**\n * @private Internal function to draw a single row of a table.\n */\ndwr.util._addRowInner = function(cellFuncs, options) {\n  var tr = options.rowCreator(options);\n  if (tr == null) return null;\n  for (var cellNum = 0; cellNum < cellFuncs.length; cellNum++) {\n    var func = cellFuncs[cellNum];\n    if (typeof func == \'function\') options.data = func(options.rowData, options);\n    else options.data = func || "";\n    options.cellNum = cellNum;\n    var td = options.cellCreator(options);\n    if (td != null) {\n      if (options.data != null) {\n        if (dwr.util._isHTMLElement(options.data)) td.appendChild(options.data);\n        else {\n          if (dwr.util._shouldEscapeHtml(options) && typeof(options.data) == "string") {\n            td.innerHTML = dwr.util.escapeHtml(options.data);\n          }\n          else {\n            td.innerHTML = options.data;\n          }\n        }\n      }\n      tr.appendChild(td);\n    }\n  }\n  return tr;\n};\n\n/**\n * @private Default row creation function\n */\ndwr.util._defaultRowCreator = function(options) {\n  return document.createElement("tr");\n};\n\n/**\n * @private Default cell creation function\n */\ndwr.util._defaultCellCreator = function(options) {\n  return document.createElement("td");\n};\n\n/**\n * Remove all the children of a given node.\n * @see http://getahead.org/dwr/browser/tables\n */\ndwr.util.removeAllRows = function(ele, options) {\n  ele = dwr.util._getElementById(ele, "removeAllRows()");\n  if (ele == null) return;\n  if (!options) options = {};\n  if (!options.filter) options.filter = function() { return true; };\n  if (!dwr.util._isHTMLElement(ele, ["table", "tbody", "thead", "tfoot"])) {\n    dwr.util._debug("removeAllRows() can only be used with table, tbody, thead and tfoot elements. Attempt to use: " + dwr.util._detailedTypeOf(ele));\n    return;\n  }\n  var child = ele.firstChild;\n  var next;\n  while (child != null) {\n    next = child.nextSibling;\n    if (options.filter(child)) {\n      ele.removeChild(child);\n    }\n    child = next;\n  }\n};\n\n/**\n * dwr.util.byId(ele).className = "X", that we can call from Java easily.\n */\ndwr.util.setClassName = function(ele, className) {\n  ele = dwr.util._getElementById(ele, "setClassName()");\n  if (ele == null) return;\n  ele.className = className;\n};\n\n/**\n * dwr.util.byId(ele).className += "X", that we can call from Java easily.\n */\ndwr.util.addClassName = function(ele, className) {\n  ele = dwr.util._getElementById(ele, "addClassName()");\n  if (ele == null) return;\n  ele.className += " " + className;\n};\n\n/**\n * dwr.util.byId(ele).className -= "X", that we can call from Java easily\n * From code originally by Gavin Kistner\n */\ndwr.util.removeClassName = function(ele, className) {\n  ele = dwr.util._getElementById(ele, "removeClassName()");\n  if (ele == null) return;\n  var regex = new RegExp("(^|\\\\s)" + className + "(\\\\s|$)", \'g\');\n  ele.className = ele.className.replace(regex, \'\');\n};\n\n/**\n * dwr.util.byId(ele).className |= "X", that we can call from Java easily.\n */\ndwr.util.toggleClassName = function(ele, className) {\n  ele = dwr.util._getElementById(ele, "toggleClassName()");\n  if (ele == null) return;\n  var regex = new RegExp("(^|\\\\s)" + className + "(\\\\s|$)");\n  if (regex.test(ele.className)) {\n    ele.className = ele.className.replace(regex, \'\');\n  }\n  else {\n    ele.className += " " + className;\n  }\n};\n\n/**\n * Clone a node and insert it into the document just above the \'template\' node\n * @see http://getahead.org/dwr/???\n */\ndwr.util.cloneNode = function(ele, options) {\n  ele = dwr.util._getElementById(ele, "cloneNode()");\n  if (ele == null) return null;\n  if (options == null) options = {};\n  var clone = ele.cloneNode(true);\n  if (options.idPrefix || options.idSuffix) {\n    dwr.util._updateIds(clone, options);\n  }\n  else {\n    dwr.util._removeIds(clone);\n  }\n  ele.parentNode.insertBefore(clone, ele);\n  return clone;\n};\n\n/**\n * @private Update all of the ids in an element tree\n */\ndwr.util._updateIds = function(ele, options) {\n  if (options == null) options = {};\n  if (ele.id) {\n    ele.setAttribute("id", (options.idPrefix || "") + ele.id + (options.idSuffix || ""));\n  }\n  var children = ele.childNodes;\n  for (var i = 0; i < children.length; i++) {\n    var child = children.item(i);\n    if (child.nodeType == 1 /*Node.ELEMENT_NODE*/) {\n      dwr.util._updateIds(child, options);\n    }\n  }\n};\n\n/**\n * @private Remove all the Ids from an element\n */\ndwr.util._removeIds = function(ele) {\n  if (ele.id) ele.removeAttribute("id");\n  var children = ele.childNodes;\n  for (var i = 0; i < children.length; i++) {\n    var child = children.item(i);\n    if (child.nodeType == 1 /*Node.ELEMENT_NODE*/) {\n      dwr.util._removeIds(child);\n    }\n  }\n};\n\n/**\n * Clone a template node and its embedded template child nodes according to\n * cardinalities (of arrays) in supplied data.\n */\ndwr.util.cloneNodeForValues = function(templateEle, data, options) {\n  templateEle = dwr.util._getElementById(templateEle, "cloneNodeForValues()");\n  if (templateEle == null) return null;\n  if (options == null) options = {};\n  var idpath;\n  if (options.idPrefix != null)\n    idpath = options.idPrefix;\n  else\n    idpath = templateEle.id || "";\n  return dwr.util._cloneNodeForValuesRecursive(templateEle, data, idpath, options);\n};\n\n/**\n * @private Recursive helper for cloneNodeForValues().\n */\ndwr.util._cloneNodeForValuesRecursive = function(templateEle, data, idpath, options) {\n  // Incoming array -> make an id for each item and call clone of the template\n  // for each of them\n  if (dwr.util._isArray(data)) {\n    var clones = [];\n    for (var i = 0; i < data.length; i++) {\n      var item = data[i];\n      var clone = dwr.util._cloneNodeForValuesRecursive(templateEle, item, idpath + "[" + i + "]", options);\n      clones.push(clone);\n    }\n    return clones;\n  }\n  else\n  // Incoming object (not array) -> clone the template, add id prefixes, add\n  // clone to DOM, and then recurse into any array properties if they contain\n  // objects and there is a suitable template\n  if (dwr.util._isObject(data) && !dwr.util._isArray(data)) {\n    var clone = templateEle.cloneNode(true);\n    if (options.updateCloneStyle && clone.style) {\n      for (var propname in options.updateCloneStyle) {\n        clone.style[propname] = options.updateCloneStyle[propname];\n      }\n    }\n    dwr.util._replaceIds(clone, templateEle.id, idpath);\n    templateEle.parentNode.insertBefore(clone, templateEle);\n    dwr.util._cloneSubArrays(data, idpath, options);\n    return clone;\n  }\n\n  // It is an error to end up here so we return nothing\n  return null;\n};\n\n/**\n * @private Substitute a leading idpath fragment with another idpath for all\n * element ids tree, and remove ids that don\'t match the idpath.\n */\ndwr.util._replaceIds = function(ele, oldidpath, newidpath) {\n  if (ele.id) {\n    var newId = null;\n    if (ele.id == oldidpath) {\n      newId = newidpath;\n    }\n    else if (ele.id.length > oldidpath.length) {\n      if (ele.id.substr(0, oldidpath.length) == oldidpath) {\n        var trailingChar = ele.id.charAt(oldidpath.length);\n        if (trailingChar == "." || trailingChar == "[") {\n          newId = newidpath + ele.id.substr(oldidpath.length);\n        }\n      }\n    }\n    if (newId) {\n      ele.setAttribute("id", newId);\n    }\n    else {\n      ele.removeAttribute("id");\n    }\n  }\n  var children = ele.childNodes;\n  for (var i = 0; i < children.length; i++) {\n    var child = children.item(i);\n    if (child.nodeType == 1 /*Node.ELEMENT_NODE*/) {\n      dwr.util._replaceIds(child, oldidpath, newidpath);\n    }\n  }\n};\n\n/**\n * @private Finds arrays in supplied data and uses any corresponding template\n * node to make a clone for each item in the array.\n */\ndwr.util._cloneSubArrays = function(data, idpath, options) {\n  for (prop in data) {\n    var value = data[prop];\n    // Look for potential recursive cloning in all array properties\n    if (dwr.util._isArray(value)) {\n      // Only arrays with objects are interesting for cloning\n      if (value.length > 0 && dwr.util._isObject(value[0])) {\n        var subTemplateId = idpath + "." + prop;\n        var subTemplateEle = dwr.util.byId(subTemplateId);\n        if (subTemplateEle != null) {\n          dwr.util._cloneNodeForValuesRecursive(subTemplateEle, value, subTemplateId, options);\n        }\n      }\n    }\n    // Continue looking for arrays in object properties\n    else if (dwr.util._isObject(value)) {\n      dwr.util._cloneSubArrays(value, idpath + "." + prop, options);\n    }\n  }\n};\n\n/**\n * @private Helper to turn a string into an element with an error message\n */\ndwr.util._getElementById = function(ele, source) {\n  var orig = ele;\n  ele = dwr.util.byId(ele);\n  if (ele == null) {\n    dwr.util._debug(source + " can\'t find an element with id: " + orig + ".");\n  }\n  return ele;\n};\n\n/**\n * @private Is the given node an HTML element (optionally of a given type)?\n * @param ele The element to test\n * @param nodeName eg "input", "textarea" - check for node name (optional)\n *         if nodeName is an array then check all for a match.\n */\ndwr.util._isHTMLElement = function(ele, nodeName) {\n  if (ele == null || typeof ele != "object" || ele.nodeName == null) {\n    return false;\n  }\n  if (nodeName != null) {\n    var test = ele.nodeName.toLowerCase();\n    if (typeof nodeName == "string") {\n      return test == nodeName.toLowerCase();\n    }\n    if (dwr.util._isArray(nodeName)) {\n      var match = false;\n      for (var i = 0; i < nodeName.length && !match; i++) {\n        if (test == nodeName[i].toLowerCase()) {\n          match =  true;\n        }\n      }\n      return match;\n    }\n    dwr.util._debug("dwr.util._isHTMLElement was passed test node name that is neither a string or array of strings");\n    return false;\n  }\n  return true;\n};\n\n/**\n * @private Like typeOf except that more information for an object is returned other than "object"\n */\ndwr.util._detailedTypeOf = function(x) {\n  var reply = typeof x;\n  if (reply == "object") {\n    reply = Object.prototype.toString.apply(x); // Returns "[object class]"\n    reply = reply.substring(8, reply.length-1);  // Just get the class bit\n  }\n  return reply;\n};\n\n/**\n * @private Object detector. Excluding null from objects.\n */\ndwr.util._isObject = function(data) {\n  return (data && typeof data == "object");\n};\n\n/**\n * @private Array detector. Note: instanceof doesn\'t work with multiple frames.\n */\ndwr.util._isArray = function(data) {\n  return (data && data.join);\n};\n\n/**\n * @private Date detector. Note: instanceof doesn\'t work with multiple frames.\n */\ndwr.util._isDate = function(data) {\n  return (data && data.toUTCString) ? true : false;\n};\n\n/**\n * @private Used by setValue. Gets around the missing functionallity in IE.\n */\ndwr.util._importNode = function(doc, importedNode, deep) {\n  var newNode;\n\n  if (importedNode.nodeType == 1 /*Node.ELEMENT_NODE*/) {\n    newNode = doc.createElement(importedNode.nodeName);\n\n    for (var i = 0; i < importedNode.attributes.length; i++) {\n      var attr = importedNode.attributes[i];\n      if (attr.nodeValue != null && attr.nodeValue != \'\') {\n        newNode.setAttribute(attr.name, attr.nodeValue);\n      }\n    }\n\n    if (typeof importedNode.style != "undefined") {\n      newNode.style.cssText = importedNode.style.cssText;\n    }\n  }\n  else if (importedNode.nodeType == 3 /*Node.TEXT_NODE*/) {\n    newNode = doc.createTextNode(importedNode.nodeValue);\n  }\n\n  if (deep && importedNode.hasChildNodes()) {\n    for (i = 0; i < importedNode.childNodes.length; i++) {\n      newNode.appendChild(dwr.util._importNode(doc, importedNode.childNodes[i], true));\n    }\n  }\n\n  return newNode;\n};\n\n/** @private Used internally when some message needs to get to the programmer */\ndwr.util._debug = function(message, stacktrace) {\n  var written = false;\n  try {\n    if (window.console) {\n      if (stacktrace && window.console.trace) window.console.trace();\n      window.console.log(message);\n      written = true;\n    }\n    else if (window.opera && window.opera.postError) {\n      window.opera.postError(message);\n      written = true;\n    }\n  }\n  catch (ex) { /* ignore */ }\n\n  if (!written) {\n    var debug = document.getElementById("dwr-debug");\n    if (debug) {\n      var contents = message + "<br/>" + debug.innerHTML;\n      if (contents.length > 2048) contents = contents.substring(0, 2048);\n      debug.innerHTML = contents;\n    }\n  }\n};\n\n'